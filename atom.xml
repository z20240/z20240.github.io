<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://z20240.github.io</id>
    <title>Let&#39;s Life</title>
    <subtitle>Les&#39;s Blog</subtitle>
    <icon>https://z20240.github.io/images/favicon.ico</icon>
    <link href="https://z20240.github.io" />
    <author>
      <name>Les Lee</name>
    </author>
    <updated>2023-01-31T05:34:10.000Z</updated>
    <category term="nodejs" />
    <category term=" frontend" />
    <category term=" backend" />
    <category term=" mysql" />
    <category term=" hexo" />
    <category term=" mongodb" />
    <category term=" python" />
    <category term=" vue" />
    <category term=" react" />
    <entry>
        <id>https://z20240.github.io/Tech/Flutter/Flutter%20%E5%AD%B8%E7%BF%92%20-%20%E7%92%B0%E5%A2%83%E5%AE%89%E8%A3%9D%E8%88%87%E9%8C%AF%E8%AA%A4%E8%99%95%E7%90%86/</id>
        <title>Flutter 學習 - 環境安裝</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Flutter/Flutter%20%E5%AD%B8%E7%BF%92%20-%20%E7%92%B0%E5%A2%83%E5%AE%89%E8%A3%9D%E8%88%87%E9%8C%AF%E8%AA%A4%E8%99%95%E7%90%86/"/>
        <content type="html">&lt;p&gt;在開始 flutter 的專案之前，首要步驟就是先將環境架好。&lt;br /&gt;
由於 flutter 需要跨平台開發，因此我們不僅需要安裝 android sdk, 也需要安裝 ios 相關的 xcode。&lt;br /&gt;
這篇主要記錄我在架設 flutter 環境時碰到的錯誤與處理方式。&lt;/p&gt;
&lt;h2 id=&#34;建構-flutter-開發環境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建構-flutter-開發環境&#34;&gt;#&lt;/a&gt; 建構 flutter 開發環境&lt;/h2&gt;
&lt;p&gt;先列一下我裝置的規格&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- MacOS Ventura 13.1 Apple M1 chip.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- Memory 16GB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;安裝-flutter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝-flutter&#34;&gt;#&lt;/a&gt; 安裝 flutter&lt;/h3&gt;
&lt;p&gt;首先，先到 flutter 官網依照 flutter 安裝教學進行安裝。&lt;br /&gt;
由於我這邊是 macOS 因此 flutter 安裝的部分會依照 macOS 的部分進行安裝。&lt;/p&gt;
&lt;h4 id=&#34;獲得-sdk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#獲得-sdk&#34;&gt;#&lt;/a&gt; 獲得 sdk&lt;/h4&gt;
&lt;p&gt;下載 flutter sdk 並且解壓縮到自己喜歡的目錄。&lt;br /&gt;
我在  &lt;code&gt;~/Document&lt;/code&gt;  中建立了一個  &lt;code&gt;Project&lt;/code&gt;  目錄專門放置專案相關的資源。&lt;br /&gt;
因此 flutter 會放置在  &lt;code&gt;~/Document/Project&lt;/code&gt;  中。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; ~/Document/Project&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;unzip&lt;/span&gt; ~/Downloads/flutter_macos_3.7.0-stable.zip flutter&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;加入 env.&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;:&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;/flutter/bin&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;執行-flutter-doctor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#執行-flutter-doctor&#34;&gt;#&lt;/a&gt; 執行 flutter doctor&lt;/h4&gt;
&lt;p&gt;flutter doctor 會診斷是否缺少開發 flutter 時所需要的相關套件。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flutter doctor&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一次跑的時候我還未裝 andriod sdk 與 xcode 。因此得到的結果會是類似以下這樣。&lt;/p&gt;
&lt;p&gt;![][image-20230201035252043.png]&lt;/p&gt;
&lt;p&gt;接下來，我們就要一步一步地把錯誤的部分給修正。&lt;/p&gt;
&lt;h3 id=&#34;安裝-android-sdk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝-android-sdk&#34;&gt;#&lt;/a&gt; 安裝 Android sdk.&lt;/h3&gt;
&lt;p&gt;首先到 android studio 官網安裝 android studio。&lt;br /&gt;
下載並安裝完成後，開啟 android studio，並且點選  &lt;code&gt;settings &amp;gt; Appearance &amp;amp; behavior &amp;gt; System Settings &amp;gt; Andriod SDK&lt;/code&gt;   並且選擇到 sdk tools，將裡面的 sdk 都安裝起來。&lt;br /&gt;
![][image-20230201034918514.png]&lt;br /&gt;
 安裝完後在 env 中增加 path&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;:&lt;span class=&#34;token environment constant&#34;&gt;$HOME&lt;/span&gt;/Library/Android/sdk&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;再重跑一次  &lt;code&gt;flutter doctor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;![][image-20230201035715344.png]&lt;/p&gt;
&lt;p&gt;這次 error message 變了，有些 licensee 不正確。 因此我們照著執行  &lt;code&gt;flutter doctor --android-licenses&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下來它會問你一些 licenses 是否同意。 就照著選  &lt;code&gt;Y&lt;/code&gt;  就好。&lt;/p&gt;
&lt;p&gt;結束後，再跑一次  &lt;code&gt;flutter doctor&lt;/code&gt;  理論上 android 這邊的 error 就都清除了。&lt;/p&gt;
&lt;p&gt;![][image-20230201040009795.png]&lt;/p&gt;
&lt;h3 id=&#34;安裝-xcode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝-xcode&#34;&gt;#&lt;/a&gt; 安裝 xcode.&lt;/h3&gt;
&lt;p&gt;直接上 app store 安裝 xcode.&lt;/p&gt;
&lt;p&gt;![][image-20230201040236174.png]&lt;br /&gt;
 安裝完成後執行&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; xcode-select &lt;span class=&#34;token parameter variable&#34;&gt;--switch&lt;/span&gt; /Applications/Xcode.app/Contents/Developer&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; xcodebuild &lt;span class=&#34;token parameter variable&#34;&gt;-runFirstLaunch&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;再執行  &lt;code&gt;flutter doctor&lt;/code&gt;  也許會碰到跟我一樣的狀況。 敘述缺少  &lt;code&gt;cocoaPods&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;![][image-20230201040518776.png]&lt;/p&gt;
&lt;p&gt;因此我們要再安裝  &lt;code&gt;cocoaPods&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; gem &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; cocoapods&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;之後再跑一遍，理論上 xcode 的部分就也修掉了。&lt;/p&gt;
&lt;p&gt;![][image-20230201040716354.png]&lt;/p&gt;
&lt;p&gt;最後就剩下 Java 的 bundled 要處理。&lt;/p&gt;
&lt;h3 id=&#34;安裝-java-bundle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝-java-bundle&#34;&gt;#&lt;/a&gt; 安裝 Java bundle.&lt;/h3&gt;
&lt;p&gt;我首先找尋 stackoverflow 上的解決方法，查到這篇 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjg1Njk0MzAvdW5hYmxlLXRvLWZpbmQtYnVuZGxlZC1qYXZhLXZlcnNpb24td2l0aC1mbHV0dGVyLWRvY3Rvci1hZnRlci11cGRhdGluZy1hbmRyb2lk&#34;&gt;Unable to find bundled Java version with flutter doctor, after updating Android studio Arctic Fox(2020.3.1) on M1 Apple Silicon&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;底下的留言串有點長，我這邊將內容整理成一套處理的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設置  &lt;code&gt;Java_Home&lt;/code&gt;  環境變數&lt;br /&gt;
參考這篇文章 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ta3lvbmcuY29tL2phdmEvaG93LXRvLXNldC1qYXZhX2hvbWUtZW52aXJvbm1lbnQtdmFyaWFibGUtb24tbWFjLW9zLXgvI3doYXQtaXMtdXNybGliZXhlY2phdmEtaG9tZQ==&#34;&gt;# How to Set $JAVA_HOME environment variable on macOS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;/usr/libexec/java_home&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;接下來依照以下指令一步一步 alias&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /Applications/Android&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt; Studio.app/Contents/jre&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 如果發現 Contents 內沒有 jre 請執行這個步驟&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /Applications/Android&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt; Studio.app/Contents&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; jbr jre&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; jre&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 建立 jre 的 symbolic link&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;/jre jdk&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 建立 JavaAppletPlugin.plugin 的 symbolic link&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/Library/Internet Plug-Ins/JavaAppletPlugin.plugin&#34;&lt;/span&gt; jdk&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Hint: 這邊可能會碰到  &lt;code&gt;/Library/Internet Plug-Ins&lt;/code&gt;  沒有  &lt;code&gt;JavaAppletPlugin&lt;/code&gt;  的情況&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;這時我們需要另外修正這部分&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;follow 以下步驟&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到 Java 官網下載 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamF2YS5jb20vZW4vZG93bmxvYWQvaGVscC9tYWNfaW5zdGFsbC5odG1s&#34;&gt;java installation&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;依照官網指示安裝.&lt;/li&gt;
&lt;li&gt;完成之後再一次確認  &lt;code&gt;ls /Library/Internet Plug-Ins/&lt;/code&gt;  是否有  &lt;code&gt;JavaAppletPlugin.plugin&lt;/code&gt;  。此時應該就會已經裝好了&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上步驟完成之後我們再執行一次  &lt;code&gt;flutter doctor -v&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;![][image-20230201142130471.png]&lt;/p&gt;
&lt;p&gt;到這邊，應該就能看到全部錯誤都修正完畢。&lt;/p&gt;
&lt;p&gt;如此 fultter 的環境就算準備完成了。&lt;/p&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Flutter" scheme="https://z20240.github.io/categories/Tech/Flutter/" />
        <category term="flutter" scheme="https://z20240.github.io/tags/flutter/" />
        <updated>2023-01-31T05:34:10.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/Combly-Lession8/</id>
        <title>Cambly-Lession8</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/Combly-Lession8/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;comstom - traditions&lt;/li&gt;
&lt;li&gt;to get along - had a good relationship with sb. ex. we get along very well.&lt;/li&gt;
&lt;li&gt;once in a lifetime (adj.) - only one chance in lifetime.&lt;/li&gt;
&lt;li&gt;in common -&lt;/li&gt;
&lt;li&gt;to enjoy each other&#39;s company - the fact or condition of being with another or others, especially in a way that provides friendship and enjoyment.&lt;/li&gt;
&lt;li&gt;as often as -&lt;/li&gt;
&lt;li&gt;what&#39;s more - 更重要的是&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
        <updated>2023-01-30T16:28:40.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/Combly-Lession7/</id>
        <title>Cambly-Lession7</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/Combly-Lession7/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;Got something different with your hair.&lt;/li&gt;
&lt;li&gt;You dye hair.&lt;/li&gt;
&lt;li&gt;you curl your hair.&lt;/li&gt;
&lt;li&gt;wavey 波浪捲 /curly 大卷髮&lt;/li&gt;
&lt;li&gt;fossil 化石&lt;/li&gt;
&lt;li&gt;rainbow moonstone&lt;/li&gt;
&lt;li&gt;Encyclopedia&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
        <updated>2023-01-24T16:28:40.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Aws%20Architecture/Aws-architecture-Serverless/</id>
        <title>Aws 架構學習 - Serverless</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Aws%20Architecture/Aws-architecture-Serverless/"/>
        <content type="html">&lt;h1 id=&#34;aws-架構學習-lambda&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aws-架構學習-lambda&#34;&gt;#&lt;/a&gt; Aws 架構學習 - Lambda&lt;/h1&gt;
&lt;p&gt;Aws lambda 是一項 event-driven 的 serverless 服務。它鼓勵將 backend 的許多功能拆成一項項小的 function，並且部屬在 aws lambda 上。我們不再需要自己維護 server 是否正常運行、不需要另外租服務空間放置自己的 server application。Aws lambda 會在 event triggered 時自己去調用我們放上去的 lambda function，並且在結束時自動銷毀產生的 lambda 實體。&lt;/p&gt;
&lt;p&gt;有很多方法可以去 trigger aws lambda，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API getway called&lt;/li&gt;
&lt;li&gt;S3 upload&lt;/li&gt;
&lt;li&gt;DynamoDB changes&lt;/li&gt;
&lt;li&gt;Cloudwatch events&lt;/li&gt;
&lt;li&gt;SNS notifications&lt;/li&gt;
&lt;li&gt;third party APIs ... etc&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Aws Architecture" scheme="https://z20240.github.io/categories/Tech/Aws-Architecture/" />
        <category term="aws" scheme="https://z20240.github.io/tags/aws/" />
        <category term="iam" scheme="https://z20240.github.io/tags/iam/" />
        <updated>2023-01-08T05:34:10.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Others/%E4%BD%BF%E7%94%A8%20gmail%20%E7%84%A1%E9%99%90%E7%94%B3%E8%BE%A6%E5%B8%B3%E8%99%9F/</id>
        <title>如何使用 gmail 無限申辦帳號</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Others/%E4%BD%BF%E7%94%A8%20gmail%20%E7%84%A1%E9%99%90%E7%94%B3%E8%BE%A6%E5%B8%B3%E8%99%9F/"/>
        <content type="html">&lt;p&gt;很多線上服務都需要 email 進行帳號申辦。但是很多時候一個帳號僅能綁定一個信箱。而我們想要多的帳號，但是沒有這麼多信箱時該怎麼辦呢？&lt;/p&gt;
&lt;p&gt;Gmail 有一個特殊功能。如果你在自己的 gmail 信箱帳號後面使用  &lt;code&gt;+[number|letters]&lt;/code&gt;  ，gmail 會認得，並且統一寄送到你真正的信箱。&lt;/p&gt;
&lt;p&gt;例如有一個帳號是 &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmFiY0BnbWFpbC5jb20=&#34;&gt;abc@gmail.com&lt;/span&gt; 。若是我們在註冊信箱使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmFiYysxQGdtYWlsLmNvbQ==&#34;&gt;abc+1@gmail.com&lt;/span&gt;, &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmFiYysyQGdtYWlsLmNvbQ==&#34;&gt;abc+2@gmail.com&lt;/span&gt; 甚至是 &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmFiYythbnl0aGluZ0BnbWFpbC5jb20=&#34;&gt;abc+anything@gmail.com&lt;/span&gt; ，其信件都會寄送到 &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmFiY0BnYW1pbC5jb20=&#34;&gt;abc@gamil.com&lt;/span&gt; 這個信箱。而大部分網站針對這些信箱都會視為是不同的信箱位置。如此我們便可以使用同一個信箱註冊大量的帳號了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;![[image-20230108111759969.png]]&lt;/p&gt;
&lt;p&gt;這是 Gmail 一個獨有的信箱服務。&lt;/p&gt;
&lt;p&gt;這也很好的幫助使用者能夠管理我們的信箱收發服務。&lt;/p&gt;
&lt;p&gt;例如我們就能夠使用  &lt;code&gt;+地區&lt;/code&gt;  來作為分區的帳號管理，或是使用  &lt;code&gt;+部門&lt;/code&gt;  來幫助自己達到業務範圍的分別管理。&lt;/p&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Others" scheme="https://z20240.github.io/categories/Tech/Others/" />
        <category term="gmail" scheme="https://z20240.github.io/tags/gmail/" />
        <updated>2023-01-08T02:34:10.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Aws%20Architecture/Aws-architecture-IAM/</id>
        <title>Aws 架構學習 - IAM</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Aws%20Architecture/Aws-architecture-IAM/"/>
        <content type="html">&lt;h1 id=&#34;aws-架構學習-iam&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aws-架構學習-iam&#34;&gt;#&lt;/a&gt; Aws 架構學習 - IAM&lt;/h1&gt;
&lt;p&gt;Aws 是現非常受歡迎的雲端架構。不論是 backend user 或是 devOpts ，僅需要在 aws 上作一些點選或是撰寫相應的 yaml 設定檔，即可快速地&lt;/p&gt;
&lt;h3 id=&#34;申請-aws-帳號&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#申請-aws-帳號&#34;&gt;#&lt;/a&gt; 申請 Aws 帳號&lt;/h3&gt;
&lt;p&gt;Aws 帳號申請是免費的，我們只要登入 Aws 網站照著步驟填寫即可獲得一自己的 Aws 帳號。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230108104318658.png&#34; alt=&#34;image-20230108104318658.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;比較要注意的一點是在帳號申請當下，我們必須綁定一張信用卡，因為 Aws 的許多服務是需要付費的。但是我們也不用太過擔心，因為大多數服務都有免費額度，我們只要在 practice 完之後有完整關閉服務，都不用擔心會有費用產生。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230108105326254.png&#34; alt=&#34;image-20230108105326254.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230108105919211.png&#34; alt=&#34;image-20230108105919211.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果不幸免費額度用完了，想要重新申辦帳號。僅需重新註冊即可。這邊有個「&lt;a href=&#34;https://z20240.github.io/Tech/Others/%E4%BD%BF%E7%94%A8%20gmail%20%E7%84%A1%E9%99%90%E7%94%B3%E8%BE%A6%E5%B8%B3%E8%99%9F/&#34;&gt;使用 gmail 無限申辦帳號&lt;/a&gt;」的方法，有興趣可以來這邊看看。&lt;/p&gt;
&lt;h3 id=&#34;iam-設定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iam-設定&#34;&gt;#&lt;/a&gt; IAM 設定&lt;/h3&gt;
&lt;p&gt;IAM 是 aws 的帳號管理中心。所有有關 aws 的帳號管理相關業務都都需要來 iam 進行設定。&lt;/p&gt;
&lt;h4 id=&#34;使用-root-account-新增一名使用者&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-root-account-新增一名使用者&#34;&gt;#&lt;/a&gt; 使用 root account 新增一名使用者&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230108113854062.png&#34; alt=&#34;image-20230108113854062.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;新建一名使用者&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新建一名使用者&#34;&gt;#&lt;/a&gt; 新建一名使用者&lt;/h4&gt;
&lt;p&gt;選取到 IAM 之後，點擊 sidebar 的  &lt;code&gt;Users&lt;/code&gt;  &amp;gt;  &lt;code&gt;Add users&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;image-20230108114033352.png&#34; alt=&#34;image-20230108114033352.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;這邊帳號可以自己取，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access key - 用於我們程式開發時使用，因此需要勾選&lt;/li&gt;
&lt;li&gt;Password - 這邊是問你這個帳號是否需要使用 Web 的 Aws console dashboard. 如果這個帳號不需要 dashboard 操作，可以不創。(通常還是建立一下比較方便)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;設置權限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#設置權限&#34;&gt;#&lt;/a&gt; 設置權限&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230108115828306.png&#34; alt=&#34;image-20230108115828306.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;這邊我們可以依照需求選擇要給予這個 user 的權限。若是要讓此 user 作為類似 admin 使用的話，我們可以直接選擇  &lt;code&gt;AdminstratorAccess&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230108120035484.png&#34; alt=&#34;image-20230108120035484.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;這邊是額外可選設定，Tag 可以做一些客製化標記，作為往後 filter 使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230108120359228.png&#34; alt=&#34;image-20230108120359228.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果我們設定得差不多了，這邊 review 好就可以創建了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230108120532329.png&#34; alt=&#34;image-20230108120532329.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下來我們可以將這組  &lt;code&gt;access key ID&lt;/code&gt;  與  &lt;code&gt;secret access key&lt;/code&gt;  設定在我們的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L2NsaS9sYXRlc3QvdXNlcmd1aWRlL2NsaS1jb25maWd1cmUtZW52dmFycy5odG1s&#34;&gt;環境變數&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;![[image-20230108122050789.png]]&lt;/p&gt;
&lt;p&gt;至此，基本的 IAM 設定就差不多完成了。&lt;/p&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Aws Architecture" scheme="https://z20240.github.io/categories/Tech/Aws-Architecture/" />
        <category term="aws" scheme="https://z20240.github.io/tags/aws/" />
        <category term="iam" scheme="https://z20240.github.io/tags/iam/" />
        <updated>2023-01-08T02:34:10.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Hexo/fix-mermaid-parser-issue/</id>
        <title>解決 Mermaid 無法正確在 shoka 主題顯示的問題</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Hexo/fix-mermaid-parser-issue/"/>
        <content type="html">&lt;p&gt;&lt;code&gt;Mermaid&lt;/code&gt;  作為 markdown 的流程圖繪製解決方案大大增加了 markdown 的實用性。對於繪圖苦手的我來說 Mermaid 簡直是一大救星。因此在開始自己搭建 hexo 部落格之後，我第一件事也是確認 Mermaid 是否可用。&lt;/p&gt;
&lt;p&gt;後來選上 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYw==&#34;&gt;shoka&lt;/span&gt; 這套主題不單是它漂亮的佈景，還有豐富的內建 markdwon 語法支援。其中當然包括了今天的主角  &lt;code&gt;Mermaid&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在一切搭建都接近完成後，我依依確認功能是否完備時發現 Mermaid 無法正確顯示流程圖。無論怎麼修改  &lt;code&gt;_config.yml&lt;/code&gt;  的配置，其永遠都是死死地顯示純文字的格式。&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#96;&amp;#96;&amp;#96;mermaid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;graph LR&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    A[Square Rect] -- Link text --&amp;gt; B((Circle))&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    A --&amp;gt; C(Round Rect)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    B --&amp;gt; D&amp;#123;Rhombus&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    C --&amp;gt; D&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#96;&amp;#96;&amp;#96;mermaid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sequenceDiagram&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    loop Daily query&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you?&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        alt is sick&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            Bob-&amp;gt;&amp;gt;Alice: Not so good :(&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        else is well&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        end&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        opt Extra response&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            Bob-&amp;gt;&amp;gt;Alice: Thanks for asking&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        end&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    end&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;爬了很久的文，找了很多文章。&lt;/p&gt;
&lt;p&gt;一開始以為應該是 dependency 不正確，或是 css style 沒有載入之類的。&lt;br /&gt;
嘗試了諸多方法依然無解。偏偏官方文檔完全沒有多加說明。&lt;/p&gt;
&lt;p&gt;就在窮盡所有方法之後，決定去爬  &lt;code&gt;mode_modules&lt;/code&gt;  中的 source code。&lt;br /&gt;
(就乖乖的 console.log 看看吧！)&lt;/p&gt;
&lt;p&gt;幸好這個 Plugin 的 code 不長，很快就定位到了實際運作的位置&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;span&gt;hexo-renderer-multi-markdown-it/lib/renderer/markdown-it-mermaid&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;md&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;renderer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rules&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;fence&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;tokens&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; env&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tokens&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;info &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mermaid&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; code&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;firstLine&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;^graph (?:TB|BT|RL|LR|TD);?$&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; graph&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mermaidChart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;code&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; firstLine&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defaultRenderer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tokens&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; env&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;經過各種的  &lt;code&gt;console.log&lt;/code&gt;  之後，終於發現原因！&lt;/p&gt;
&lt;p&gt;原因在於  &lt;code&gt;markdown-it&lt;/code&gt;  在針對文章 parse token 時，將 marmaid 的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rva2VuLmluZm8=&#34;&gt;token.info&lt;/span&gt; 定義為 &lt;strong&gt; &lt;code&gt;mermaid2&lt;/code&gt; &lt;/strong&gt;。因此 if condition 一定比對失敗。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;知道了問題點就好辦了，接下來我只需要決定如何修理即可。&lt;/p&gt;
&lt;p&gt;有兩種我比較喜歡的修改方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將  &lt;code&gt;if (token.info === &#39;mermaid&#39;)&lt;/code&gt;  改成  &lt;code&gt;if (token.info === &#39;mermaid2&#39;)&lt;/code&gt;  ，未來在用的時候統一使用  &lt;code&gt;mermaid2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;將  &lt;code&gt;if (token.info === &#39;mermaid&#39;)&lt;/code&gt;  改成  &lt;code&gt;if (token.info.includes(&#39;mermaid&#39;))&lt;/code&gt; ，未來只要 type 有關鍵字 mermaid 即可自動 parse 出 graph。 我也不用管是  &lt;code&gt;mermaid&lt;/code&gt;  還是  &lt;code&gt;mermaid2&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;最終我選擇了第二種方案。&lt;/p&gt;
&lt;p&gt;這兩種方案其實殊途同歸，唯一的問題在於未來在重新佈局時一定要記得手動修改  &lt;code&gt;node_modules&lt;/code&gt;  裡的這段 code.&lt;/p&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Hexo" scheme="https://z20240.github.io/categories/Tech/Hexo/" />
        <category term="hexo" scheme="https://z20240.github.io/tags/hexo/" />
        <updated>2023-01-06T15:08:53.977Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/Cambly-Lession4/</id>
        <title>Cambly-Lession4</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/Cambly-Lession4/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;broadly 寬廣&lt;/li&gt;
&lt;li&gt;to enroll (v.) 編入
&lt;ul&gt;
&lt;li&gt;enrollment (n.) = sign up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;subject specialist = professor in specific subject.&lt;/li&gt;
&lt;li&gt;take gap year. = 升學階段的休學一年 ex. 高中到大學。大學到研究所中間休息一段時間&lt;/li&gt;
&lt;li&gt;take a (week/month/year) off. = 休息一段時間&lt;/li&gt;
&lt;li&gt;to work sb way through colledge = 半工半讀&lt;/li&gt;
&lt;li&gt;teacher&#39;s pet (貶義) 老師的寵兒
&lt;ul&gt;
&lt;li&gt;brown noser 馬屁精&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to keep up with anythings = don&#39;t fall behind.
&lt;ul&gt;
&lt;li&gt;ex. are you keeping up with me.&lt;/li&gt;
&lt;li&gt;He could not keep up with the conversation. (He didn&#39;t understand.).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
        <updated>2023-01-04T16:28:40.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/Combly-Lession6/</id>
        <title>Cambly-Lession6</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/Combly-Lession6/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;The country is mostly rural areas.&lt;/li&gt;
&lt;li&gt;I used to live in the country.&lt;/li&gt;
&lt;li&gt;farm fishing&lt;/li&gt;
&lt;li&gt;wild caught&lt;/li&gt;
&lt;li&gt;car pooling: 搭便車&lt;/li&gt;
&lt;li&gt;car sharing program = pay to share a car&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
        <updated>2023-01-04T16:28:40.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/Cambly-Lession5/</id>
        <title>Cambly-Lession4</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/Cambly-Lession5/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;have foot in the door （ idioms )
&lt;ul&gt;
&lt;li&gt;to make the first step toward a goal by gaining entry into an organization, a career, etc. He took a job as a secretary to get his foot in the door.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;frequently &amp;gt; often &amp;gt; usually (1 / week).&lt;/li&gt;
&lt;li&gt;I don&#39;t know if i have a cold&lt;/li&gt;
&lt;li&gt;coherence = understanding.&lt;/li&gt;
&lt;li&gt;stand on the same topic&lt;/li&gt;
&lt;li&gt;&amp;quot;synonyms&amp;quot; is the difference word in the same meaning.&lt;/li&gt;
&lt;li&gt;standardized = cause (something) to conform to a standard.
&lt;ul&gt;
&lt;li&gt;&amp;quot;we could standardize on U.S. equipment&amp;quot;.&lt;/li&gt;
&lt;li&gt;&amp;quot;the editors failed to standardize the spelling of geographic names&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;proficiency = ranking = level&lt;/li&gt;
&lt;li&gt;authorities people or organization in charge of / to take charge of ...&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
        <updated>2023-01-04T16:28:40.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/Cambly-Lession3/</id>
        <title>Cambly-Lession3</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/Cambly-Lession3/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;hold back  拖後腿
&lt;ul&gt;
&lt;li&gt;I am holding my friends back from winning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;motivated = you really want to do something be cause of th.&lt;/li&gt;
&lt;li&gt;motivation (n.)&lt;/li&gt;
&lt;li&gt;stimulate 刺激
&lt;ul&gt;
&lt;li&gt;(someone&#39;s) interest in or enthusiasm for doing something.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;passionate (adj) = have some belive in th.
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;ate (adj.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;enthusiasm (n.) / enthusiastic (adj.) + about&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
        <updated>2023-01-02T16:28:40.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/IELS%20%E5%AD%97%E5%BD%99/</id>
        <title>IELS 字彙</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/IELS%20%E5%AD%97%E5%BD%99/"/>
        <content type="html">&lt;h2 id=&#34;單字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#單字&#34;&gt;#&lt;/a&gt; 單字&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;prairie (n.) 大草原
&lt;ul&gt;
&lt;li&gt;pasturage&lt;/li&gt;
&lt;li&gt;savanna&lt;/li&gt;
&lt;li&gt;grassland  (小) 草原&lt;/li&gt;
&lt;li&gt;pasture
&lt;ul&gt;
&lt;li&gt;(v.) 放牧；= graze&lt;/li&gt;
&lt;li&gt;(n.) 牧地&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;enclosure (en|clos|ure) 圈地飼養&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;disverse (adj.) = different = discrepant = various = disparate
&lt;ul&gt;
&lt;li&gt;di = two&lt;/li&gt;
&lt;li&gt;verse = turn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fertile (adj.) 肥沃的 = arable&lt;/li&gt;
&lt;li&gt;cropland 耕地
&lt;ul&gt;
&lt;li&gt;crop (n.) = produce (n.)&lt;/li&gt;
&lt;li&gt;cash crop = 經濟作物&lt;/li&gt;
&lt;li&gt;crop 裁切&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;landform 地形 = terran&lt;/li&gt;
&lt;li&gt;Medi|terran|ean 地中海的 (adj.)
&lt;ul&gt;
&lt;li&gt;Medi = middle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字根&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字根&#34;&gt;#&lt;/a&gt; 字根&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;verse / verg = turn
&lt;ul&gt;
&lt;li&gt;averse (adj.) = 不喜歡；厭惡的
&lt;ul&gt;
&lt;li&gt;a = without&lt;/li&gt;
&lt;li&gt;verse = turn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;adverse (adj.) = 不利的；逆向的 + to N
&lt;ul&gt;
&lt;li&gt;ad = toward = 朝著&lt;/li&gt;
&lt;li&gt;verse = turn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;converse (v.) = (conversation) =  交談 + with N&lt;/li&gt;
&lt;li&gt;inverse (adj.) = 顛倒的；相反地&lt;/li&gt;
&lt;li&gt;reverse (v.) = 逆轉&lt;/li&gt;
&lt;li&gt;traverse (adj.)(v.) = 橫跨的&lt;/li&gt;
&lt;li&gt;divergency (n.) = 歧異 = discrepancy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fertile (adj.)
&lt;ul&gt;
&lt;li&gt;= rich&lt;/li&gt;
&lt;li&gt;= productive&lt;/li&gt;
&lt;li&gt;= fecund&lt;/li&gt;
&lt;li&gt;&amp;lt;=&amp;gt; infertile (adj.)
&lt;ul&gt;
&lt;li&gt;= barren 不孕的&lt;/li&gt;
&lt;li&gt;= sterile&lt;/li&gt;
&lt;li&gt;= topography&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ephemeral (adj.) 暫時的；短暫的
&lt;ul&gt;
&lt;li&gt;= temporary&lt;/li&gt;
&lt;li&gt;= transient&lt;/li&gt;
&lt;li&gt;= momentary&lt;/li&gt;
&lt;li&gt;= evanescent 短暫的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="iels" scheme="https://z20240.github.io/tags/iels/" />
        <updated>2023-01-02T16:28:40.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/Cambly-Lession2/</id>
        <title>Cambly-Lession2</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/Cambly-Lession2/"/>
        <content type="html">&lt;h2 id=&#34;vocabulary&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vocabulary&#34;&gt;#&lt;/a&gt; Vocabulary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;scenery = 風景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;view 比較偏向眼中看出去的事物&lt;/li&gt;
&lt;li&gt;scenery 是平常描述中的「風景」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coherence 連貫性 (n.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accuracy 準確性 (n.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intonation 語調 (n.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flawless = perfect 完美的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to unwind (v.) = to relax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to gather (v.) = gathering (n.) 聚集 =/= together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to go sightseeing 觀光&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to get together  聚聚&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex. Shall we get together on Friday and go for a drink or something?
&lt;ul&gt;
&lt;li&gt;我們星期五聚聚喝點東西，如何？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to catch-up 聯絡感情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How about let&#39;s catch-up next week?
&lt;ul&gt;
&lt;li&gt;我們下週來聚聚聯絡感情如何？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to contemplate 沉思&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to cost an arm and leg = expensive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to change of senary = 轉換心情&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to broaden wider = 打開眼界&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;here and there = to describe uns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;as often as = every time 每次&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;As&lt;/strong&gt; &lt;strong&gt;often&lt;/strong&gt; &lt;strong&gt;as&lt;/strong&gt; I tried to phone him the line was engaged.&lt;/li&gt;
&lt;li&gt;每次我給他打電話都佔線。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indeed 的確&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not to mention = 更不必說&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There were three of us there, &lt;strong&gt;not&lt;/strong&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;strong&gt;mention&lt;/strong&gt; the children.
&lt;ul&gt;
&lt;li&gt;不算孩子在內，我們中有三個人在那裡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I enjoyed the meal, &lt;strong&gt;not&lt;/strong&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;strong&gt;mention&lt;/strong&gt; the conversation.
&lt;ul&gt;
&lt;li&gt;我很喜歡那一頓飯，至於席上的談話更是不必說了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accurately (adv.) 準確地.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accurate (adj.) 準確的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accuracy (n.) 準確性 /precision 精確性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;glitter 閃光&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字根字尾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字根字尾&#34;&gt;#&lt;/a&gt; 字根字尾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ex 外面&lt;/li&gt;
&lt;li&gt;er 反覆 / 比較級 / 能做某用途的人或物，東西；能做... 用途的東西。&lt;/li&gt;
&lt;li&gt;cise = cut 切割&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exercise = (外出反覆批砍) = 運動
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ac / ad = to&lt;/li&gt;
&lt;li&gt;cur = cure = take care&lt;/li&gt;
&lt;li&gt;rate = 變成...; 充當... = cause to become.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;accurate = (to become more care) = 精確
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pre 預先&lt;br /&gt;
 ex.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;precise = 精確的
(pre cut the ambiguous part, then leave the things are sure.)
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
        <updated>2022-12-30T16:28:40.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Life/EnglishLearn/Cambly-Lession1/</id>
        <title>EnglishLearn/Cambly-Lession1</title>
        <link rel="alternate" href="https://z20240.github.io/Life/EnglishLearn/Cambly-Lession1/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;convenient = easier = handily (seldom used)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;cheaper&lt;/em&gt; may means low quality, don&#39;t used it all the time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;cheaper = low quality&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If we want to describe  &lt;code&gt;High quality and low price&lt;/code&gt; , we can use  &lt;code&gt;more affordable&lt;/code&gt; ,  &lt;code&gt;less expensive&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No American use &lt;strong&gt;CP (price–performance ratio)&lt;/strong&gt;, only Taiwanese use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we want to describe space are not in one place, we can use  &lt;code&gt;separator place&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;closet = a place to make people change their clothes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
        <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
        <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
        <category term="english" scheme="https://z20240.github.io/tags/english/" />
        <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
        <updated>2022-12-27T19:26:44.000Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Data%20Storage/2022-10-08-sql-postgres-%E9%81%87%E5%88%B0-out-of-shared-memory-%E5%95%8F%E9%A1%8C/</id>
        <title>SQL Postgres 遇到 out of shared memory 問題</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Data%20Storage/2022-10-08-sql-postgres-%E9%81%87%E5%88%B0-out-of-shared-memory-%E5%95%8F%E9%A1%8C/"/>
        <content type="html">&lt;h3 id=&#34;sql-postgres-遇到-out-of-shared-memory-問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-postgres-遇到-out-of-shared-memory-問題&#34;&gt;#&lt;/a&gt; [SQL] Postgres 遇到 out of shared memory 問題&lt;/h3&gt;
&lt;p&gt;由於工作需要，我在 Postgresql 中創建了 20000 張 20 columns x 1000 entries 的 tables，約莫了 18G 的大小。&lt;/p&gt;
&lt;p&gt;由於要一次性創建如此海量的資料，因此我寫了段小 Script 來協助完成。&lt;/p&gt;
&lt;p&gt;期間在大約 2000 筆衣料左右的時候程式就會碰到  &lt;code&gt;out of shared memory&lt;/code&gt;  的問題，困擾我一段時間。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*4K08BRP-ucCyW_t2PddHdw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查詢了很多網站都沒有找到良好的解釋或是解決方案。&lt;/p&gt;
&lt;p&gt;直到後來查到 stackoverflow 上一個沒什麼人回應的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzY4OTEwMjM4&#34;&gt;解決方案&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A quick fix for  &lt;code&gt;PSQLException error out of shared memory&lt;/code&gt;  is to set the&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;max_locks_per_transaction&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;parameter in PostgreSQL config file, which specifies number of object locks allocated for each transaction (if there are statements/routines that work on large number of tables to finish.&lt;/p&gt;
&lt;p&gt;其實主要就是 PostgresSQL 在 transaction lock 有其上限。當 default 上限用完了，就會 out of shared memory.&lt;/p&gt;
&lt;p&gt;要解決的方法也不難，我們可以去 postgresql 的 config 中找到  &lt;code&gt;max_locks_per_transaction&lt;/code&gt;  將 default 的 64 加大。&lt;/p&gt;
&lt;p&gt;至於 postgresql config 是放在哪裡？&lt;/p&gt;
&lt;p&gt;這部分我們可以使用  &lt;code&gt;SHOW config_file;&lt;/code&gt;  這行 sql 查看。&lt;/p&gt;
&lt;p&gt;Default 應該都是在  &lt;code&gt;/var/lib/postgresql/data/postgresql.conf&lt;/code&gt;  的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*XoswqaeN0ZhTSGGzHSzrCA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY3liZXJ0ZWMtcG9zdGdyZXNxbC5jb20vZW4vcG9zdGdyZXNxbC15b3UtbWlnaHQtbmVlZC10by1pbmNyZWFzZS1tYXhfbG9ja3NfcGVyX3RyYW5zYWN0aW9uLw==&#34;&gt;POSTGRESQL: YOU MIGHT NEED TO INCREASE MAX_LOCKS_PER_TRANSACTION&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY0OTA2NjQvZXJyb3Itb3V0LW9mLXNoYXJlZC1tZW1vcnk=&#34;&gt;ERROR: out of shared memory&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Data Storage" scheme="https://z20240.github.io/categories/Tech/Data-Storage/" />
        <category term="postgres" scheme="https://z20240.github.io/tags/postgres/" />
        <category term="database" scheme="https://z20240.github.io/tags/database/" />
        <updated>2022-10-08T04:42:30.706Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Frontend/vue/2022-07-04-vue-nuxt-eslint-prettier-vscode-%E8%A8%AD%E5%AE%9A-%E8%AE%93-eslint-%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88-nuxt-%E5%B0%88%E6%A1%88/</id>
        <title>Vue Nuxt + Eslint + Prettier +Vscode 設定 — 讓 Eslint 自動排版 Nuxt 專案</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Frontend/vue/2022-07-04-vue-nuxt-eslint-prettier-vscode-%E8%A8%AD%E5%AE%9A-%E8%AE%93-eslint-%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88-nuxt-%E5%B0%88%E6%A1%88/"/>
        <content type="html">&lt;h3 id=&#34;vue-nuxt3-eslint-prettier-vscode-設定-讓-eslint-自動排版-nuxt-專案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue-nuxt3-eslint-prettier-vscode-設定-讓-eslint-自動排版-nuxt-專案&#34;&gt;#&lt;/a&gt; [Vue] Nuxt3 + Eslint + Prettier +Vscode 設定 — 讓 Eslint 自動排版 Nuxt 專案&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ET9CfH7oh7cubkTpNch7Xw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最近因為接案需要，決定使用 Nuxt 作為快速開發的框架。發現一段時間沒觀注，前端環境真是日新月異。 Nuxt 竟然也迎來第三版了。&lt;/p&gt;
&lt;p&gt;因此這次在設定環境時順便記錄了一下如何在專案中結合 Eslint + Prettier 與 Vscode 的自動風格檢查兼排版。&lt;/p&gt;
&lt;h3 id=&#34;nuxt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nuxt&#34;&gt;#&lt;/a&gt; Nuxt&lt;/h3&gt;
&lt;h4 id=&#34;安裝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝&#34;&gt;#&lt;/a&gt; 安裝&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;使用  &lt;code&gt;npx&lt;/code&gt;  直接安裝&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npx nuxi init &amp;lt;nuxt-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打開你的  &lt;code&gt;nuxt-app&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ code nuxt-app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中如果我們不希望我們的 .nuxt 相依專案以  &lt;code&gt;.shim&lt;/code&gt;  的形式產生，我們先在  &lt;code&gt;nuxt.config.ts&lt;/code&gt;  內將 shim 設成  &lt;code&gt;false&lt;/code&gt;  .&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export default defineNuxtConfig(&amp;#123;
 typescript: &amp;#123;
 shim: false
 &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;安裝相依套件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ yarn install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到這邊這些前置作業完成之後，我們先啟動一次 nuxt 讓他生成自己的  &lt;code&gt;.nuxt&lt;/code&gt;  專案。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ yarn dev -o
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;vscode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vscode&#34;&gt;#&lt;/a&gt; Vscode&lt;/h3&gt;
&lt;h4 id=&#34;prettier-eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prettier-eslint&#34;&gt;#&lt;/a&gt; Prettier Eslint&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ovYVQpQEWiy2JY0l267wjw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eslint&#34;&gt;#&lt;/a&gt; Eslint&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;1*t-XiqWLBCtF_pu_VKsp3XQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;eslint-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eslint-2&#34;&gt;#&lt;/a&gt; Eslint&lt;/h3&gt;
&lt;h4 id=&#34;init&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#init&#34;&gt;#&lt;/a&gt; Init&lt;/h4&gt;
&lt;p&gt;執行  &lt;code&gt;npx eslint — init&lt;/code&gt;  初始化  &lt;code&gt;.eslintrc.js&lt;/code&gt;  並自動安裝相關的 dependency，他會問你一些問題來據此產生相關的設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You can also run this command directly using ‘npm init @eslint/config’.
npx: 40 安裝成功，花費 3.812 秒
✔ How would you like to use ESLint? · style
✔ What type of modules does your project use? · esm
✔ Which framework does your project use? · vue
✔ Does your project use TypeScript? · No / Yes
✔ Where does your code run? · browser
✔ How would you like to define a style for your project? · prompt
✔ What format do you want your config file to be in? · JavaScript
✔ What style of indentation do you use? · 4
✔ What quotes do you use for strings? · single
✔ What line endings do you use? · unix
✔ Do you require semicolons? · No / Yes
The config that you’ve selected requires the following dependencies:
eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest
✔ Would you like to install them now? · No / Yes
✔ Which package manager do you want to use? · yarn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;產生出來的 .eslintrc.js 會像是這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module.exports = &amp;#123;
 “env”: &amp;#123;
 “browser”: true,
 “es2021”: true
 &amp;#125;,
 “extends”: [
 “eslint:recommended”,
 “plugin:vue/essential”,
 “plugin:@typescript-eslint/recommended”
 ],
 “parserOptions”: &amp;#123;
 “ecmaVersion”: “latest”,
 “parser”: “@typescript-eslint/parser”,
 “sourceType”: “module”
 &amp;#125;,
 “plugins”: [
 “vue”,
 “@typescript-eslint”
 ],
 “rules”: &amp;#123;
 &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;install-dependency&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#install-dependency&#34;&gt;#&lt;/a&gt; Install Dependency&lt;/h4&gt;
&lt;p&gt;安裝相關的 dependency&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ yarn add -D eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest eslint@latest typescript eslint-plugin-nuxt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在  &lt;code&gt;package.json&lt;/code&gt;  的  &lt;code&gt;scripts&lt;/code&gt;  中加上  &lt;code&gt;“lint”: “eslint . — ext .ts,.vue”&lt;/code&gt;  然後使用  &lt;code&gt;yarn lint&lt;/code&gt;  來測試 eslint 是否有生效.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Mvfr8nd_T3OVC6U693GQVA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;! [ [image-20220704162435221.png] ]&lt;/p&gt;
&lt;h4 id=&#34;修改-eslintrc-加入-nuxt-與-eslint-的相關套件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改-eslintrc-加入-nuxt-與-eslint-的相關套件&#34;&gt;#&lt;/a&gt; 修改  &lt;code&gt;.eslintrc&lt;/code&gt;  加入 nuxt 與 eslint 的相關套件&lt;/h4&gt;
&lt;p&gt;把配置文件中 `extends` 做如下的修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;”plugin:vue/essential”&lt;/code&gt;  改成  &lt;code&gt;”plugin:vue/vue3-recommended”&lt;/code&gt;  (前者是 vue2 的設定，後者為 vue3)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;”eslint:recommended”&lt;/code&gt;  改成  &lt;code&gt;”plugin:nuxt/recommended”&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;刪除  &lt;code&gt;plugins&lt;/code&gt;  內的  &lt;code&gt;”vue”&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果檔案內出現 &lt;strong&gt;Component name should always be multi-word&lt;/strong&gt; 的錯誤，這是因為 nuxt 提倡 vue 文件的 Component 應該要用 multi-word snack case 進行命名。我們可以在 rules 中增加  &lt;code&gt;”vue/multi-word-component-names”: 0&lt;/code&gt;  來關閉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*DTodaOdB7g7Y3j-35PopQg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;prettier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prettier&#34;&gt;#&lt;/a&gt; Prettier&lt;/h3&gt;
&lt;h4 id=&#34;install-dependency-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#install-dependency-2&#34;&gt;#&lt;/a&gt; Install Dependency&lt;/h4&gt;
&lt;p&gt;安裝 &lt;strong&gt;prettier, eslint-plugin-prettier, eslint-config-prettier&lt;/strong&gt; 等相關套件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ yarn add -D prettier eslint-plugin-prettier eslint-config-prettier
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eslint-plugin-prettier&lt;/code&gt;  : 讓我們可以在  &lt;code&gt;.eslintrc.js&lt;/code&gt;  中直接在  &lt;code&gt;rules&lt;/code&gt;  內使用  &lt;code&gt;prettier/prettier&lt;/code&gt;  屬性設定  &lt;code&gt;.prettierrc&lt;/code&gt;  ，省去多增加這個 file 的 maintainance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eslint-config-prettier&lt;/code&gt;  : 會自動關掉所有不必要且可能會跟 Prettier 相衝的設定，讓我們可以在 eslint 中設定自己要的 rule。舉例來說如果 eslint 的 rule 和 prettier 的 rule conflict 的時候 （例如 eslint 限制了必须單引號，prettier 也限制了必须單引號，那麼如果用 eslint 驅動 prettier 來做檢查的話就會提示兩種 error 儘管他們都指向同一種錯誤。）此時這個 Plugin 就可以關閉額外的 error 顯示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之後，一樣修改  &lt;code&gt;.eslintrc&lt;/code&gt;  中的  &lt;code&gt;extends&lt;/code&gt;  內容：增加  &lt;code&gt;’plugin:prettier/recommended’&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extends: [
  ...,
  &amp;quot;plugin:prettier/recommended&amp;quot;,
  ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此時可能會出現紅線佈滿每個檔案，這是因為 prettier 在偵測 rule 時，若是沒有發現  &lt;code&gt;.prettierrc&lt;/code&gt;  在專案中的話，就會去往更 root 的地方找，有可能 root 的 prettier 設定與專案所需不符。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*jt_CPBruvGdfc6I_svByEw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我們這時可以在  &lt;code&gt;.eslintrc.js&lt;/code&gt;  中的  &lt;code&gt;rules&lt;/code&gt;  中增加  &lt;code&gt;prettier/prettier&lt;/code&gt;  的來告訴 prettier 我們的 eslint 要怎樣的規則，如此可以取代掉在專案中建立  &lt;code&gt;.prettirerc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;完整的 .eslintrc.js 最終會如下&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module.exports = &amp;#123;
 env: &amp;#123;
   browser: true,
   es2021: true,
   node: true,
 &amp;#125;,
 extends: [
   ‘plugin:vue/vue3-recommended’,
   ‘plugin:@typescript-eslint/recommended’,
   ‘plugin:nuxt/recommended’,
   ‘plugin:prettier/recommended’,
 ],
 parserOptions: &amp;#123;
   ecmaVersion: ‘latest’,
   parser: ‘@typescript-eslint/parser’,
   sourceType: ‘module’,
 &amp;#125;,
 plugins: [
   // “vue”,
   ‘@typescript-eslint’,
 ],
 rules: &amp;#123;
   indent: [‘error’, 2],
   ‘linebreak-style’: [‘error’, ‘unix’],
   quotes: [‘error’, ‘single’],
   semi: [‘error’, ‘always’],
   ‘vue/multi-word-component-names’: 0,
   ‘comma-dangle’: [
     ‘error’,
     &amp;#123;
         arrays: ‘always-multiline’,
         objects: ‘always-multiline’,
         imports: ‘never’,
         exports: ‘never’,
         functions: ‘never’,
     &amp;#125;,
   ],
   ‘vue/html-self-closing’: [
     ‘error’,
     &amp;#123;
         html: &amp;#123;
           void: ‘always’,
           normal: ‘always’,
           component: ‘always’,
         &amp;#125;,
         svg: ‘always’,
         math: ‘always’,
     &amp;#125;,
   ],
   ‘prettier/prettier’: [
      ‘error’,
      &amp;#123;
         printWidth: 120, // 最大長度
         tabWidth: 2, // tab 縮排 2 空格
         useTabs: false, // 使用空格縮排
         singleQuote: true, // js 單引號
         semi: true, // 要有分號
         trailingComma: ‘es5’, // 使用 es5 規則規範結尾的逗號
         arrowParens: ‘avoid’,
      &amp;#125;,
   ],
 &amp;#125;,
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此時我們再使用  &lt;code&gt;ctrl+s&lt;/code&gt;  保存，應該就會發現可以自動格式化檔案了。&lt;/p&gt;
&lt;h4 id=&#34;trouble-shooting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#trouble-shooting&#34;&gt;#&lt;/a&gt; Trouble shooting&lt;/h4&gt;
&lt;p&gt;若是發現存檔後沒有如預期中自動格式化，可以檢查是否自己的 Vscode 預設格式化工具是  &lt;code&gt;prettier-eslint&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用  &lt;code&gt;cmd + p (ctrl + p)&lt;/code&gt;  ，輸入  &lt;code&gt;&amp;gt; Format Document&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*WT4Zgzex60odGfhRIgpXxw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選擇 Prettier ESLint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*CvCOrh9Ylw2-AlkWrb9A4g.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;之後再嘗試一次看看，基本上應該就要有反應了～&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pY29kZS5iZXN0L2kvNzA0MDU1NDYyMjY3NTk=&#34;&gt;nuxt3 项目中使用 eslint 和 prettier+commitlint 附常用规则配置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wcmV0dGllci5pby9kb2NzL2VuL2luc3RhbGwuaHRtbA==&#34;&gt;Prettier&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LXBsdWdpbi1udXh0&#34;&gt;eslint-plugin-nuxt&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Frontend" scheme="https://z20240.github.io/categories/Tech/Frontend/" />
        <category term="Vue" scheme="https://z20240.github.io/categories/Tech/Frontend/Vue/" />
        <category term="javascript" scheme="https://z20240.github.io/tags/javascript/" />
        <category term="vscode" scheme="https://z20240.github.io/tags/vscode/" />
        <category term="nuxt-3" scheme="https://z20240.github.io/tags/nuxt-3/" />
        <category term="eslint" scheme="https://z20240.github.io/tags/eslint/" />
        <category term="prettier" scheme="https://z20240.github.io/tags/prettier/" />
        <updated>2022-07-04T10:52:32.887Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Others/2022-06-16-tech-skhd-%E5%A4%B1%E5%8E%BB%E5%8A%9F%E8%83%BD-not-working-%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/</id>
        <title>Tech skhd 失去功能 (Not working)的解決方法</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Others/2022-06-16-tech-skhd-%E5%A4%B1%E5%8E%BB%E5%8A%9F%E8%83%BD-not-working-%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/"/>
        <content type="html">&lt;h3 id=&#34;tech-skhd-失去功能-not-working的解決方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tech-skhd-失去功能-not-working的解決方法&#34;&gt;#&lt;/a&gt; [Tech] skhd 失去功能 (Not working) 的解決方法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;0*A5q6r3JS-zTQfZVk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=&#34;&gt;Skhd&lt;/span&gt; 是一個適用於 MacOS 的小實用軟件，它允許我們重新映射各種操作的快捷方式。然而在某次 Mac 升級之後就發生 skhd 時不時停止運作的狀況。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先我必須要停止 skhd 的 process. 使用 &lt;strong&gt;brew&lt;/strong&gt; 來做到。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew services stop skhd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之後，可以使用 skhd -V 來以詳細模式運行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ skhd -V
skhd: successfully created pid-file..
skhd: secure keyboard entry is enabled by (5530) &#39;iterm2&#39;! abort..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;1*-O6oGPKvPXPJx055gUTnJA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;訊息中顯示 mac 有一個  &lt;code&gt;secure keyboard entry&lt;/code&gt;  的模式不知道為什麼被打開了。&lt;/p&gt;
&lt;p&gt;通過進一步搜尋可以知道我們可以使用 iTerm2 的 menu 或是 Terminal 的 menu 來關閉這個模式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*FvKx68zuda255u3UiZds-w.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*dW3dMJS7WrqAj9NFzosk4Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到這邊理論上只要可以取消，之後再把 skhd 重啟就可以完成了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew services start skhd
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;更加複雜的-debug&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更加複雜的-debug&#34;&gt;#&lt;/a&gt; &lt;strong&gt;更加複雜的 Debug&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;事情如果到那邊就完結了，我也不用再寫這篇了。&lt;/p&gt;
&lt;p&gt;可惜問題就是發生在  &lt;code&gt;secure keyboard entry&lt;/code&gt;  無法被正確 disable&lt;/p&gt;
&lt;p&gt;因此我又繼續尋找資料，後來看到了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9maWcuaW8vZG9jcy9zdXBwb3J0L3NlY3VyZS1rZXlib2FyZC1pbnB1dCNmaWctYW5kLXNlY3VyZS1rZXlib2FyZC1pbnB1dA==&#34;&gt;這篇&lt;/span&gt; ，源自 Fig 一個新的 Termial plugin 有講到類似的除錯方法。我就一步一步整理過來。&lt;/p&gt;
&lt;p&gt;裡面有講到「如果無法取消選中該複選框，則 iTerm 檢測到安全輸入已啟用，但它不是負責的應用程序。要弄清楚如何禁用它，請繼續故障排除部分。」&lt;/p&gt;
&lt;p&gt;其羅列了以下幾種可能的原因&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、與密碼管理器衝突 (1Password, BitWarden)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;某些密碼管理器在輸入主密碼時會啟用  &lt;code&gt;Secure Keyboard Entry&lt;/code&gt;  ，但之後偶爾會無法禁用它。&lt;/p&gt;
&lt;p&gt;如果您使用 1Password、Bitwarden 或其他密碼管理器，請退出應用程序，然後檢查是否仍啟用  &lt;code&gt;Secure Keyboard Entry&lt;/code&gt;  。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果您要退出 1Password，請確保您完全退出它，而不僅僅是正常的 cmd+q 退出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;0*nlUF009uzQ11n5d5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果是密碼管理器負責，只需重新啟動它即可解決問題。否則，請繼續故障排除部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、其他未知的應用程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有時其他應用程序會啟用安全輸入，但在不再需要時無法將其關閉。&lt;/p&gt;
&lt;p&gt;我們可以使用以下指令顯示出需要使用此設定的應用程式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ioreg -l -w 0 |  tr &#39;,&#39; &#39;\n&#39; 2&amp;amp;&amp;gt; /dev/null | grep kCGSSessionSecureInputPID | cut -f 2 -d = | uniq | xargs ps -o command= -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ZhFCMO8tv_w42ZIjh8diHw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在我的例子中會發現是一個叫做  &lt;code&gt;loginWindow&lt;/code&gt;  的 process 暫用著。這似乎是 MacOS 的小 bug ，有時後 loginWindow 在 user login 之後不會 terminal (disable secure input entry) .&lt;/p&gt;
&lt;p&gt;這時候僅需要使用  &lt;code&gt;⌃ Control` + `⌘ Command` +`Q&lt;/code&gt;  將畫面進到上鎖之後重新登入，理論上就能夠解決這個問題。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不過，如果這樣的方式依然無法解決，也許「登出」、或「重開機」會是最後的解決方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2FtdW5kcmEuY29tLm5wL3NraGQtc3VkZGVubHktc3RvcHBlZC13b3JraW5nLWFmdGVyLXVwZ3JhZGUvMTczOA==&#34;&gt;SKHD SUDDENLY STOPPED WORKING AFTER UPGRADE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9maWcuaW8vZG9jcy9zdXBwb3J0L3NlY3VyZS1rZXlib2FyZC1pbnB1dCNmaWctYW5kLXNlY3VyZS1rZXlib2FyZC1pbnB1dA==&#34;&gt;Fig and Secure Keyboard Input&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Others" scheme="https://z20240.github.io/categories/Tech/Others/" />
        <category term="tiling-window-manager" scheme="https://z20240.github.io/tags/tiling-window-manager/" />
        <category term="yabai" scheme="https://z20240.github.io/tags/yabai/" />
        <category term="skhd" scheme="https://z20240.github.io/tags/skhd/" />
        <updated>2022-06-16T07:25:19.143Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Frontend/NodeJs/2022-05-16-node-%E5%A6%82%E4%BD%95%E6%AA%A2%E6%B8%AC-node-%E7%A8%8B%E5%BC%8F%E7%9A%84memory-leak-%E4%BB%A5%E5%8F%8A%E8%99%95%E7%90%86-out-of-memory-%E5%95%8F%E9%A1%8C/</id>
        <title>Node 如何檢測 Node 程式的Memory Leak 以及處理 out of memory 問題</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Frontend/NodeJs/2022-05-16-node-%E5%A6%82%E4%BD%95%E6%AA%A2%E6%B8%AC-node-%E7%A8%8B%E5%BC%8F%E7%9A%84memory-leak-%E4%BB%A5%E5%8F%8A%E8%99%95%E7%90%86-out-of-memory-%E5%95%8F%E9%A1%8C/"/>
        <content type="html">&lt;h3 id=&#34;node-如何檢測-node-程式的memory-leak-以及處理-out-of-memory-問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node-如何檢測-node-程式的memory-leak-以及處理-out-of-memory-問題&#34;&gt;#&lt;/a&gt; [Node] 如何檢測 Node 程式的 Memory Leak 以及處理 out of memory 問題&lt;/h3&gt;
&lt;p&gt;身為一個 NodeJs 工程師，在架構一個 NodeJs 應用程式的生涯中或多或少應該都有碰過  &lt;code&gt;Javascript heap out of memory&lt;/code&gt;  的狀況。&lt;/p&gt;
&lt;p&gt;畢竟 NodeJs 本身是跑在 V8 Engine 的 Script Language，本身在 main thread 中 default 僅有 1GB (In 64-bit system) 的 memory 配額。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*r2wJzxZlT7878dhsficsYA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;絕大多數時候其實都是單純 server 功能越來越多導致記憶體用量不夠，這個時候我們可以簡單地在執行程式時使用  &lt;code&gt;--max-old-space-size&lt;/code&gt;  來手動配額足夠的記憶體給 Node 使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 使用 8GB 的記憶體來執行 app.js (這邊的單位是 KB)
$ node --max-old-space-size=8192 app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然而若是當我們已經配置足夠大的記憶體，確還是發生了 &lt;strong&gt;out of memory&lt;/strong&gt; 的狀況呢？那應該十之八九是我們碰上了 memory leak 的問題了。&lt;/p&gt;
&lt;h4 id=&#34;監測-memory-heap-的使用量檢測是否-memory-leak&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#監測-memory-heap-的使用量檢測是否-memory-leak&#34;&gt;#&lt;/a&gt; 監測 memory heap 的使用量，檢測是否 memory leak&lt;/h4&gt;
&lt;p&gt;以往，我們要監測 memory heap 的使用需要利用諸如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGVhcGR1bXA=&#34;&gt;heapdump&lt;/span&gt; 這類的 heap snapshot 工具來建立快照。但是在 version 6 以上的版本我們可以使用  &lt;code&gt;--inspect&lt;/code&gt;  flag 來指示 node 執行 app.js 期間開啟監測模式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node --inspect index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;如果你今天的 app 是使用 ts-node，你也可以使用以下指令來進入 node 的 inspect （&lt;/em&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHMtbm9kZSN1c2VyLWNvbnRlbnQtcHJvZ3JhbW1hdGlj&#34;&gt;https://www.npmjs.com/package/ts-node#user-content-programmatic&lt;/span&gt; &lt;em&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node -r ts-node/register --inspect ./app.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;node 會另外開啟一個 9229 的 port 來提供 debugger 使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ot3-OLwkVSRw-ImSrXxhCw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;你也可以使用  &lt;code&gt;--inspect-brk&lt;/code&gt;  ，這個 flag 會讓 node 監測模式啟動後停在第一個 statement。效果就類似設置一個 break point 在程式的第一行。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;接下來，我們就可以開啟 Google Chrome 的 &lt;strong&gt;DevTools&lt;/strong&gt; attach 到 debugger 來進行實時監控跟 debug 了。&lt;/p&gt;
&lt;p&gt;在 google chrome 網址列輸入  &lt;code&gt;about:inspect&lt;/code&gt;  可以進入到 Chrome 遠端開發工具畫面。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*vE4cxtjQLFRgYckFNgX2eQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果 prot 9229 已經開啟且被監聽，chrome 會自動找到相對應的 app 。之後我們可以點擊 &lt;strong&gt;inspect&lt;/strong&gt; 進入監控畫面。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*TnS_yRzEnIKV74ireuA50Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下來點到 「記憶體」的選項，我們可以錄製記憶體的快照。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*G7HH9z3wGJhG1mLZK-cvoQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DevTools 會分析出 app 中各個變數結構的使用大小、對比 root 的深度、物件本身佔用的記憶體總量… 等等，一目瞭然。甚至連變數名稱都列出來給你了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*y7HVRS0fXUw_u3Ypr-VCNg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下來我們要監測哪個變數導致記憶體增加就易如反掌了。&lt;/p&gt;
&lt;p&gt;以我們專案自身為例，在程式執行起來時 Array 所佔的記憶體容量還沒有到很多&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*hjkYvj6TLmxY9YM16b8Rsw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是隨著某個 API 的呼叫，大大地增加了 Array 在記憶體中的使用量。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*wZXni_hZC3GxrpjuOegfcA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此我們就可以據針對這個部分進行細部分析。來快速定位 memory leak 的原因。&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL0BwYXVsX2lyaXNoL2RlYnVnZ2luZy1ub2RlLWpzLW5pZ2h0bGllcy13aXRoLWNocm9tZS1kZXZ0b29scy03YzRhMWI5NWFlMjcjLnBtcWVqcm44cQ==&#34;&gt;Debugging Node.js with Chrome DevTools&lt;/span&gt; (這是一個國外的工程師的筆記，簡述了 google DevTools 針對 node inspect 的使用方式)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92b2N1cy5jYy9hcnRpY2xlLzYxMTc2YzE3ZmQ4OTc4MDAwMTk0MmYxYw==&#34;&gt;從你的 Node.js 專案裡找出 Memory leak，及早發現、及早治療！&lt;/span&gt; (這篇講得很詳細，另外還講到如何做壓力測試，值得一讀)&lt;/li&gt;
&lt;li&gt;其他有關 node Memory 相關的資訊：「 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQxNTM5OTYvaXMtdGhlcmUtYS1saW1pdC1vbi10aGUtc2l6ZS1vZi1hLXN0cmluZy1pbi1qc29uLXdpdGgtbm9kZS1qcw==&#34;&gt;Is there a limit on the size of a string in JSON with Node.js?&lt;/span&gt; 」、「 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjAwMTg1ODgvaG93LXRvLW1vbml0b3ItdGhlLW1lbW9yeS11c2FnZS1vZi1ub2RlLWpz&#34;&gt;How to monitor the memory usage of Node.js?&lt;/span&gt; 」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Frontend" scheme="https://z20240.github.io/categories/Tech/Frontend/" />
        <category term="NodeJs" scheme="https://z20240.github.io/categories/Tech/Frontend/NodeJs/" />
        <category term="javascript" scheme="https://z20240.github.io/tags/javascript/" />
        <category term="nodejs" scheme="https://z20240.github.io/tags/nodejs/" />
        <category term="memory-leak" scheme="https://z20240.github.io/tags/memory-leak/" />
        <updated>2022-05-16T10:10:49.465Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Others/2021-08-14-tiling-window-management-%E5%B9%B3%E9%8B%AA%E5%BC%8F%E8%A6%96%E7%AA%97%E7%AE%A1%E7%90%86-amethyst-yabai/</id>
        <title>Tiling Window Management - 平鋪式視窗管理 (Amethyst &amp; Yabai)</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Others/2021-08-14-tiling-window-management-%E5%B9%B3%E9%8B%AA%E5%BC%8F%E8%A6%96%E7%AA%97%E7%AE%A1%E7%90%86-amethyst-yabai/"/>
        <content type="html">&lt;h3 id=&#34;tiling-window-management-平鋪式視窗管理-amethyst-yabai&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tiling-window-management-平鋪式視窗管理-amethyst-yabai&#34;&gt;#&lt;/a&gt; Tiling Window Management - 平鋪式視窗管理 (Amethyst &amp;amp; Yabai)&lt;/h3&gt;
&lt;h4 id=&#34;借鑑linux另一種視窗管理的思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#借鑑linux另一種視窗管理的思路&#34;&gt;#&lt;/a&gt; 借鑑 Linux，另一種視窗管理的思路&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;1*VrezmQ_2bsHHCUSFxNm2kQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 macOS 中，要做視窗管理不是依靠手動拖曳視窗邊角調整大小及位置，就是依靠其他視窗管理工具諸如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90dy9hcHAvbWFnbmV0L2lkNDQxMjU4NzY2P210PTEy&#34;&gt;Magnet&lt;/span&gt; 或是 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90dy9hcHAvbW9vbS9pZDQxOTMzMDE3MD9tdD0xMg==&#34;&gt;Moom&lt;/span&gt; 這類快速調整視窗的小工具作為輔助。&lt;/p&gt;
&lt;p&gt;然而在每次開啟新的視窗的時候通常仍需要自己手動定位是窗的位置及大小，還是不太方便。&lt;/p&gt;
&lt;p&gt;另外當視窗一多起來，依然免除不了需要通過手勢「展開」來從茫茫視窗海中找尋所需要視窗的痛苦。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MacOS 本身的視窗管理能力是有目共睹的混亂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;1*9swWR0x1rBw6aDOhFwLACQ.gif&#34; alt=&#34;通常視窗一多就會擠在一起，macOS 用戶就必須通過「展開」來從茫茫程式海中找尋&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通常視窗一多就會擠在一起，macOS 用戶就必須通過「展開」來從茫茫程式海中找尋&lt;/p&gt;
&lt;p&gt;今天要介紹的「平鋪式視窗管理」不同於 macOS 一般預設的視窗管理機制，其特色則是：「 &lt;em&gt;盡可能地將所有視窗依照設定好的規則展開，&lt;/em&gt; 並且 &lt;strong&gt;避免視窗重疊&lt;/strong&gt; 在一起。」&lt;/p&gt;
&lt;p&gt;如此更能讓人一目瞭然現在桌面上有哪些視窗。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*TXuDJEdkIjdJll5Xs2wZ2w.png&#34; alt=&#34;所有視窗都展開來&#34; /&gt;&lt;/p&gt;
&lt;p&gt;所有視窗都展開來&lt;/p&gt;
&lt;p&gt;當開啟新的視窗的時候視窗管理工具就會自動依照規則做好佈局，免除了視窗蓋來蓋去的問題。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*5NPkQIS5TR09HiaxkU6Bwg.gif&#34; alt=&#34;通常當視窗只有一個的時候會預設展開到最大，之後以二分法的方式分隔空間&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通常當視窗只有一個的時候會預設展開到最大，之後以二分法的方式分隔空間&lt;/p&gt;
&lt;p&gt;Tiling Window Management 中最為人熟知的就是 Linux 下 i3 的視窗管理了。其自動排列視窗、平鋪視窗的特性讓許多人即使離開了 Linux 也念念不忘。&lt;/p&gt;
&lt;p&gt;因此身為 Unix Like 的 MacOS 當然也一定會有人想要移植這樣一套方便的視窗管理工具。&lt;/p&gt;
&lt;p&gt;今天就主要介紹兩款網路上比較常見的 Tiling Window Management 套件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0&#34;&gt;Amethyst&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFp&#34;&gt;Yabai&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這兩個套件都是 Open Source 的，因此都可以在 Github 上找到。&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0&#34;&gt;Amethyst&lt;/span&gt; 是比較簡單容易上手的；而 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFp&#34;&gt;Yabai&lt;/span&gt; 更適合進階使用者使用。&lt;/p&gt;
&lt;p&gt;為了簡單講解，接下來都會以 TWM 作為 Tiling Window Management 的縮寫。&lt;/p&gt;
&lt;h3 id=&#34;amethyst&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#amethyst&#34;&gt;#&lt;/a&gt; Amethyst&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;1*qFXBBoqP39Bv_aTtmSmOUw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Amethyst 是一個非常容易入門的 TWM， 並且提供了非常多樣的視窗佈局可供選擇。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*zzg2M4dVZZYvVsgFEPC_Yg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基本上安裝好 Amethyst 之後我們不需要做其他額外的設定即可開始使用。&lt;/p&gt;
&lt;p&gt;Amethyst 擁有非常多樣的快捷鍵可以設定。通過簡單的快捷鍵我們可以很容易地操控各個視窗。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*inR_OfCObjnbxZIX-srkaA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;非常適合想要開箱即用的使用者。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*iES9yQoVnwQGxsKoHhE2uQ.gif&#34; alt=&#34;利用設定好的快捷鍵，可以很容易地操控佈局中的視窗&#34; /&gt;&lt;/p&gt;
&lt;p&gt;利用設定好的快捷鍵，可以很容易地操控佈局中的視窗&lt;/p&gt;
&lt;p&gt;但是缺點也很明顯，我列舉了幾個觀察到的缺點如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沒有辦法客製化自己的佈局&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這其實並不是什麼大問題， Amethyst 提供了許許多多的佈局種類，基本上可以滿足絕大多數使用者的需求。然而若是對佈局方式比較有自己想法的人，Amethyst 這部分可能就無法滿足。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;視窗只能水平縮放、不能垂直縮放&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Amethyst 採用「主要視窗」與「次要視窗」的概念。&lt;/p&gt;
&lt;p&gt;其中僅有「主要視窗」可以進行水平縮放 (依然無法垂直縮放)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*HKWfSFdae-qERrku4XnJKA.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上面的 gif 為例，右側的 Terminal 就會顯得非常的狹小，其實並不利於使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;能夠使用的功能已經被 Amethyst 定死，僅能使用熱鍵提供綁定的功能，無法另外設定其他功能。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這是所有開箱即用的小工具都一定會有的軟肋。畢竟要讓人簡單上手，一定就是要設定越少越好。這應該算是一種妥協吧～。&lt;/p&gt;
&lt;h4 id=&#34;安裝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝&#34;&gt;#&lt;/a&gt; 安裝&lt;/h4&gt;
&lt;p&gt;Amethyst 的安裝非常簡單，僅需要使用 brew ，一行指令即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install --cask amethyst
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安裝完後，會在 Application Perference 中出現一個 app ，開啟後即可開始使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*i_uezLMOZqgIPNsnrzKkmQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;yabai&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yabai&#34;&gt;#&lt;/a&gt; Yabai&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Ciz6Od9ySfrVtkiEs72l_w.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;相較於 Amethyst 開箱即用， Yabai 走在另一個極端。&lt;/p&gt;
&lt;p&gt;Yabai 僅僅提供了一套完整 TWM 的指令集框架來操控視窗。使用者需要自行撰寫熱鍵設定、功能腳本來達到想要的結果。但也因為如此 Yabai 給予了極高的可設定彈性。&lt;/p&gt;
&lt;p&gt;舉個例子，若是想要將視窗延展到最大，Yabai 需要使用以下指令完成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yabai -m window --toggle zoom-fullscreen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然而若是每次要執行一個動作就必須使用一次指令，這是極度不切實際的。&lt;/p&gt;
&lt;p&gt;因此通常使用者會搭配一套叫做 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=&#34;&gt;skhd&lt;/span&gt; 的快捷鍵管理程式，設定自己的快捷鍵映射到 Yabai 的指令。&lt;/p&gt;
&lt;p&gt;還好網路上充斥著各路高手自行設定的 TWM 腳本設定，對於剛接觸的新手而言也大大了降低了入門的難度。&lt;/p&gt;
&lt;p&gt;網路上有人說使用 Yabai 需要關閉 MacOS 的 System Integrity Protection 功能，但是其實這只是 Optional 。除非我們需要「更加進階的用法」不然一般的情況下依然可以很良好的使用。&lt;/p&gt;
&lt;p&gt;我個人很推薦先從這個 Youtuber 的 Yabai 介紹開始下手，他不僅展示了他自己的 Yabai ，還丟出了自己的設定檔跟設定教學。算是非常完整的簡易入門。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JL1lz77YbUE&#34;&gt;&lt;img data-src=&#34;702b_hqdefault.jpg&#34; alt=&#34;Yabai - Tiling Window Manager for Mac [ Tutorial ]&#34; title=&#34;Yabai - Tiling Window Manager for Mac [ Tutorial ]&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;安裝-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝-2&#34;&gt;#&lt;/a&gt; 安裝&lt;/h4&gt;
&lt;p&gt;為了良好的 Yabai 體驗，需要安裝 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFpL3dpa2k=&#34;&gt;yabai&lt;/span&gt; 與 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=&#34;&gt;skhd&lt;/span&gt; 兩個 cli 套件。&lt;/p&gt;
&lt;p&gt;由於我本人並不想關閉 MacOS 的 System Integrity Protection ，因此以下的安裝流程會是以不關閉 MacOS 的 System Integrity Protection 為主。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 Yabai&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;brew install koekeishiya/formulae/yabai
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;安裝 jq （這是一個 Json 的可視化 cli ，讓我們可以在 terminal 中容易的操控 JSON 物件）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;brew install jq
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;安裝 skhd (快捷鍵的設定套件)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;brew install koekeishiya/formulae/skhd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;三個都安裝完之後，你需要設定  &lt;code&gt;.yabairc&lt;/code&gt;  以及  &lt;code&gt;.skhdrc&lt;/code&gt;  檔案。&lt;/p&gt;
&lt;p&gt;其中  &lt;code&gt;.yabairc&lt;/code&gt;  是 yabai 的設定檔；而  &lt;code&gt;.skhdrc&lt;/code&gt;  則是 skhd 設定快捷鍵的設定檔。&lt;/p&gt;
&lt;p&gt;你可以將 .yabairc 與 .skhdrc 放置在家目錄 $HOME 中，或是在 .config 中建立各自的 config folder 都可以。&lt;/p&gt;
&lt;p&gt;我自己是將設定檔都 git 包成一包，放在 .config 中，並且使用  &lt;code&gt;ln -s&lt;/code&gt;  軟連結到家目錄了。&lt;/p&gt;
&lt;p&gt;如果不嫌棄，也可以使用我的設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// git 下載我的 yabai 設定到 .config/yabai
$ git clone https://github.com/z20240/yabai.git &amp;quot;$&amp;#123;HOME&amp;#125;&amp;quot;/.config/yabai
// 軟連結 .config/yabai 中的 yabairc 設定到家目錄
$ ln -s &amp;quot;$&amp;#123;HOME&amp;#125;/.config/yabai/yabai/yabairc&amp;quot; &amp;quot;$&amp;#123;HOME&amp;#125;/.yabairc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要實現功能有以下這些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增的視窗依照目前的關注位置分割&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ieNyG9uhzw66lGXrjyxNKQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用快捷鍵水平 / 垂直縮放視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*5ZVbxolpIuH9BY8FK4PBIg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑鼠拖動即可調整視窗大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*3B9-BHm02eQC4mlV_Uh7dg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑鼠拖動到視窗的邊側，可置換視窗到其位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*vOsem0TohjoiQyRwj__IYA.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑鼠拖動可以到視窗中央，可以堆疊這兩個視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*0-vM8MdNwqYIa38cHmDIqw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速變換焦點視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*PiIo2aasyB15nf1zbMWO9w.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速對換視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*TZbmWNgQkEmsZmol6fSdnw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵放大 / 縮小視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*uA-p4IlvU3hOKYDsQFy8qg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵將視窗丟到其他工作區&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*k770qOtVklQZxhr0j7aCew.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵將視窗脫離 TWM，並且在這樣的狀況下依然可以快速排列視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*rf5sUpiqjZXPuJFW_-TiXQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵將視窗與其他視窗堆疊，以堆疊的形式整理視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*--6z5M0BwxkCgclrwDuYsQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵旋轉目前的佈局樣式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*RHb6p3zEYN6GIVtXhQvtUg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;另外，關於 stack 堆疊的效果，我額外使用了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0FkYW1XYWduZXIvc3RhY2tsaW5l&#34;&gt;stackline&lt;/span&gt; 的小圖示特效。&lt;/p&gt;
&lt;p&gt;他可以更好地將目前有堆疊狀態的視窗給顯示出來，有效的降低了忘記視窗存在的狀況。&lt;/p&gt;
&lt;p&gt;目前我主要就是使用這些功能，未來如果有想到什麼需要的功能會繼續更新在設定檔中。&lt;/p&gt;
&lt;h3 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h3&gt;
&lt;p&gt;TWM 的使用體驗是真的優於以往的視窗管理方法。&lt;/p&gt;
&lt;p&gt;他更有效率地整理雜亂無章的視窗佈局，大大提高了我們在視窗之間游移速度，並且減少了許多記憶視窗位置的心智負擔。&lt;/p&gt;
&lt;p&gt;至於對於到底該使用 Amethyst 或是 Yabai？&lt;/p&gt;
&lt;p&gt;我認為這完全是個人喜好問題。&lt;/p&gt;
&lt;p&gt;真要給點意見的話，我個人認為從 Amethyst 開始入門是一個不錯的起手式。&lt;/p&gt;
&lt;p&gt;畢竟我就是在 Amethyst 玩一段時間後開始發現 Amethyst 的不足並且決定跳槽到 Yabai。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就像是發現了新大陸一般，著實被 Yabai 的強大給折服。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通過 skhd 搭配 Yabai 的設定，我們幾乎可以做到任何想得到的快捷鍵用法設定。剩下的只有「想不想得到」而沒有「做不做得到」的問題了。&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0&#34;&gt;Amethyst&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZA==&#34;&gt;Yabai&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k&#34;&gt;skhd&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubm90aW9uLnNvL1lhYmFpLThkYTNiODI5ODcyZDQzMmZhYzQzMTgxYjdmZjYyOGZj&#34;&gt;Yabai-note&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0FkYW1XYWduZXIvc3RhY2tsaW5l&#34;&gt;stackline&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibGFuYm9vbS5vcmcvMjAxOS95YWJhaS8=&#34;&gt;用于 macOS 平铺式窗口管理器 — yabai&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Others" scheme="https://z20240.github.io/categories/Tech/Others/" />
        <category term="tiling-window-manager" scheme="https://z20240.github.io/tags/tiling-window-manager/" />
        <category term="yabai" scheme="https://z20240.github.io/tags/yabai/" />
        <updated>2021-08-14T21:05:43.754Z</updated>
    </entry>
    <entry>
        <id>https://z20240.github.io/Tech/Linux/2021-06-07-%E9%97%9C%E6%96%BC-selinux-policy/</id>
        <title>關於 SELinux Policy</title>
        <link rel="alternate" href="https://z20240.github.io/Tech/Linux/2021-06-07-%E9%97%9C%E6%96%BC-selinux-policy/"/>
        <content type="html">&lt;h3 id=&#34;關於-selinux-policy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#關於-selinux-policy&#34;&gt;#&lt;/a&gt; 關於 SELinux Policy&lt;/h3&gt;
&lt;p&gt;最近工作上需要研究一下 Red Hat 這款 Linux，在其上進行 k8s 安裝時，發現其對於 service 的檔案存取跟 Ubuntu, Debian 這類的 Linux 有些許不同。其中多了一層叫做 SELinux 的 Policy 作為權限存取的保護，因此花了一些時間好好的來了解一下這個 SELinux Policy 是什麼東西。&lt;/p&gt;
&lt;h4 id=&#34;簡介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#簡介&#34;&gt;#&lt;/a&gt; 簡介&lt;/h4&gt;
&lt;p&gt;SELinux 全稱 (Security-Enhanced Linux) 是一個 Linux core 的 module ，算是一個 Linux 的安全子系統，主要存在 fedora base 的 Linux 中。現在以 CentOS, Red Hat 這幾款 Linux 比較常見。&lt;/p&gt;
&lt;p&gt;SELinux 主要作用是「最大限度地減小系統中可訪問的資源」、能不開放的就不開放（最小權限原則）。&lt;/p&gt;
&lt;p&gt;為什麼會需要 SELinux 呢？主要是基礎的 Linux 在檔案存取的權限控管上總有一些不足之處。&lt;/p&gt;
&lt;h4 id=&#34;一般-linux-權限管理的問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一般-linux-權限管理的問題&#34;&gt;#&lt;/a&gt; 一般 Linux 權限管理的問題&lt;/h4&gt;
&lt;p&gt;一般 Linux 權限管理通常只有兩個級別：  &lt;code&gt;root&lt;/code&gt;  與  &lt;code&gt;user&lt;/code&gt;  ，當中難以實現更小的權限管理概念。但是這兩個級別的權限又常常會互相賦予。&lt;/p&gt;
&lt;p&gt;例如 Linux 允許用戶或程式將不安全的檔案權限賦予他人，或反過來存取系統正在正常運作下「無須存取的部分」。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;root 無法控制 user ： user 可以把「誰都可以讀取的權限」給予敏感的檔案 ex. ssh 金鑰常放置在～/.ssh 目錄。&lt;/li&gt;
&lt;li&gt;process 可以更改安全性的屬性：每位 user 的郵件應該只供此用戶讀取，但是客戶端的 application 有能力將其改為誰都能讀取。&lt;/li&gt;
&lt;li&gt;process 可以繼承用戶的權限：我們假設某個 service 被木馬程式所佔用，他可能存取 user 的 ssh key 或是其他不該擁有權限存取的檔案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡言之，傳統的 Linux 無法簡易地實施最小權限的理念。很多由 root 啟動的 process 最終都會使用「受限制的用戶身份」來運行、存取用戶的檔案；有些則會在 chroot 的情況下執行。&lt;/p&gt;
&lt;h4 id=&#34;selinux-解決方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selinux-解決方案&#34;&gt;#&lt;/a&gt; SELinux 解決方案&lt;/h4&gt;
&lt;p&gt;SELinux 預設使用 &lt;strong&gt;enforcing&lt;/strong&gt; 情況下，一切的存取要求都會先被拒絕。&lt;/p&gt;
&lt;p&gt;接下來使用一系列的「例外政策」來允許系統的每個元素 (service, process, user, …etc) 運作所需要的存取權。 &lt;strong&gt;當一個元素嘗試存取或修改他不須用的檔案或資源的時候，她的請求就會被拒絕。&lt;/strong&gt; 並且這個行為會被記錄下來 (預設放置在  &lt;code&gt;/var/log/audit/audit.log&lt;/code&gt;  )。&lt;/p&gt;
&lt;h4 id=&#34;selinux-的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selinux-的工作原理&#34;&gt;#&lt;/a&gt; SELinux 的工作原理&lt;/h4&gt;
&lt;p&gt;SELinux 主要有三大部分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enforcing：強制模式，依據設定來限制檔案資源存取。&lt;/li&gt;
&lt;li&gt;Permissive：寬容模式，不限制檔案資源存取，但仍會依據設定檢查並記錄相關訊息。&lt;/li&gt;
&lt;li&gt;Disabled：停用 SELinux。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作類型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strict：每個 process 都受到限制&lt;/li&gt;
&lt;li&gt;targeted：限制大部分網路的服務 (Red Hat 7 default 是這個)&lt;/li&gt;
&lt;li&gt;minimum：限制部分的網路服務 (CentOS 7 default 是這個)&lt;/li&gt;
&lt;li&gt;mls：多級安全限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;安全上下文 (Security context)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 SELinux 中，我們可以使用  &lt;code&gt;ls -Z&lt;/code&gt;  或  &lt;code&gt;ps -eZ&lt;/code&gt;  查看到檔案目錄或是 process 的 security context.&lt;/p&gt;
&lt;p&gt;process 或 檔案目錄的 security context 必須對應才能存取。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*o4gpFTbf0gWP-KWY-CnxZQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我們可使用  &lt;code&gt;sestatus&lt;/code&gt;  查看目前 SELinux 的工作狀態&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*sm2kXbOKHi7OHowp5KQfAg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SELinux 會依照「工作模式」、「工作類型」制定不同的策略，並且去比對 process 或是目錄檔案的 security context ，如果對應才會去比對 Linux 的 RWX 權限，否則就 reject。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*4JcEry75wMdLTp2wkWOSEQ.png&#34; alt=&#34;[www.Linuxidc.com](http://www.Linuxidc.com)&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一般來說，我們該隨意地去更動「工作類型」或「工作模式」。&lt;/p&gt;
&lt;p&gt;因此主要都是修改目錄檔案或是 process 的 &lt;strong&gt;security context&lt;/strong&gt; 來符合 SELinux 規範。&lt;/p&gt;
&lt;p&gt;security context 主要以以下 5 個字段利用「：」做為分隔符號構成。&lt;/p&gt;
&lt;p&gt;分別代表的涵意如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user：身份識別；「undefined_u：不受限的用戶或文件」、「system_u：受限的 process 或文件」&lt;/li&gt;
&lt;li&gt;role：角色 ；「object_r：文件」、「sytsme_r：process 或 user」&lt;/li&gt;
&lt;li&gt;type：代表數據類型，決定何種類型的 process 可以訪問何種的文件&lt;/li&gt;
&lt;li&gt;sensitivity：安全級別，s0 最低級別 （只有在 mls 類型下會用到）&lt;/li&gt;
&lt;li&gt;category：劃分的不同分類&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，我們可以藉由安裝  &lt;code&gt;setools-console.x86_64&lt;/code&gt;  來獲得操控 selinux 的指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seinfo&lt;/li&gt;
&lt;li&gt;sesearch&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install setools-console.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;藉由以下幾個指令，我們可以得知 SELinux 有哪些種類的字段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;seinfo -u # 查詢所有的 user 字段 (8個)
seinfo -r # 查詢所有的 role 字段 (14個)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外我們可以使用 sesearch -A 查詢什麼類型的 process 可以什麼 type 的 file。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sesearch -A -s [type] # 查詢 type 的 process 能夠讀取的文件類型
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;1*-S0VPmREwFR2J6GZrnWu3A.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;修改當前的-context&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改當前的-context&#34;&gt;#&lt;/a&gt; 修改當前的 context&lt;/h4&gt;
&lt;p&gt;可以使用  &lt;code&gt;chcon&lt;/code&gt;  手動修改 &lt;strong&gt;security context&lt;/strong&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chcon [option] target

chcon -t # 修改 context 的 type
chcon -u # 修改 context 的 user
chcon -r # 修改 context 的 role
chcon -l # 修改 context 的 sensitivity level
chcon -R # Recirsive target 下所有目錄結構修改
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h4&gt;
&lt;p&gt;SELinux Policy 是一個增強 Linux 安全性的措施。&lt;/p&gt;
&lt;p&gt;我們應該盡量確保一個 process 僅能存取其所需要的檔案與目錄結構。&lt;/p&gt;
&lt;p&gt;另外，我們若要開放存取也應該使用 chcon -t 修改標籤的方式去將目標檔案對 process 類型做匹配，而非直接暴力修改 chmod 或是 chroot 開放資源的權限。&lt;/p&gt;
&lt;p&gt;這篇文章只是很基礎的 SELinux 介紹，以下的參考資料會更加完整與詳細，有興趣可以就這幾篇文章查看，相信會有更完整的認識。&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmNlbnRvcy5vcmcvemgtdHcvSG93VG9zL1NFTGludXg=&#34;&gt;CentOS Wiki — SELinux&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGludXhpZGMuY29tL0xpbnV4LzIwMTgtMDgvMTUzNDU0Lmh0bQ==&#34;&gt;Linux 公社 — SELinux&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ra25ld3MuY2MvemgtdHcvY29kZS9qbW4zbDU2Lmh0bWw=&#34;&gt;每日頭條 — 一文徹底明白 SELinux&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eF9hdG9taWNfaG9zdC83L2h0bWwvZ2V0dGluZ19zdGFydGVkX3dpdGhfa3ViZXJuZXRlcy9nZXRfc3RhcnRlZF9wcm92aXNpb25pbmdfc3RvcmFnZV9pbl9rdWJlcm5ldGVz&#34;&gt;Red Hat — CHAPTER 2. GET STARTED PROVISIONING STORAGE IN KUBERNETES&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eF9hdG9taWNfaG9zdC83L2h0bWwvY29udGFpbmVyX3NlY3VyaXR5X2d1aWRlL2RvY2tlcl9zZWxpbnV4X3NlY3VyaXR5X3BvbGljeQ==&#34;&gt;Red Hat — CHAPTER 6. DOCKER SELINUX SECURITY POLICY&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
        <category term="Linux" scheme="https://z20240.github.io/categories/Tech/Linux/" />
        <category term="linux" scheme="https://z20240.github.io/tags/linux/" />
        <category term="rhel" scheme="https://z20240.github.io/tags/rhel/" />
        <category term="selinux" scheme="https://z20240.github.io/tags/selinux/" />
        <category term="tech" scheme="https://z20240.github.io/tags/tech/" />
        <updated>2021-06-07T11:22:50.189Z</updated>
    </entry>
</feed>
