{
    "version": "https://jsonfeed.org/version/1",
    "title": "Let's Life",
    "subtitle": "Les's Blog",
    "icon": "https://z20240.github.io/images/favicon.ico",
    "description": "記錄生活、工作、大小事",
    "home_page_url": "https://z20240.github.io",
    "items": [
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Combly-Lession7/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Combly-Lession7/",
            "title": "Cambly-Lession7",
            "date_published": "2023-01-24T16:28:40.000Z",
            "content_html": "<ul>\n<li>Got something different with your hair.</li>\n<li>You dye hair.</li>\n<li>you curl your hair.</li>\n<li>wavey 波浪捲 /curly 大卷髮</li>\n<li>fossil 化石</li>\n<li>rainbow moonstone</li>\n<li>Encyclopedia</li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Aws%20Architecture/Aws-architecture-IAM/",
            "url": "https://z20240.github.io/Tech/Aws%20Architecture/Aws-architecture-IAM/",
            "title": "Aws 架構學習 - IAM",
            "date_published": "2023-01-08T02:34:10.000Z",
            "content_html": "<h1 id=\"aws-架構學習-iam\"><a class=\"anchor\" href=\"#aws-架構學習-iam\">#</a> Aws 架構學習 - IAM</h1>\n<p>Aws 是現非常受歡迎的雲端架構。不論是 backend user 或是 devOpts ，僅需要在 aws 上作一些點選或是撰寫相應的 yaml 設定檔，即可快速地</p>\n<h3 id=\"申請-aws-帳號\"><a class=\"anchor\" href=\"#申請-aws-帳號\">#</a> 申請 Aws 帳號</h3>\n<p>Aws 帳號申請是免費的，我們只要登入 Aws 網站照著步驟填寫即可獲得一自己的 Aws 帳號。</p>\n<p><img data-src=\"image-20230108104318658.png\" alt=\"image-20230108104318658.png\" /></p>\n<p>比較要注意的一點是在帳號申請當下，我們必須綁定一張信用卡，因為 Aws 的許多服務是需要付費的。但是我們也不用太過擔心，因為大多數服務都有免費額度，我們只要在 practice 完之後有完整關閉服務，都不用擔心會有費用產生。</p>\n<p><img data-src=\"image-20230108105326254.png\" alt=\"image-20230108105326254.png\" /></p>\n<p><img data-src=\"image-20230108105919211.png\" alt=\"image-20230108105919211.png\" /></p>\n<p>如果不幸免費額度用完了，想要重新申辦帳號。僅需重新註冊即可。這邊有個「<a href=\"https://z20240.github.io/Tech/Others/%E4%BD%BF%E7%94%A8%20gmail%20%E7%84%A1%E9%99%90%E7%94%B3%E8%BE%A6%E5%B8%B3%E8%99%9F/\">使用 gmail 無限申辦帳號</a>」的方法，有興趣可以來這邊看看。</p>\n<h3 id=\"iam-設定\"><a class=\"anchor\" href=\"#iam-設定\">#</a> IAM 設定</h3>\n<p>IAM 是 aws 的帳號管理中心。所有有關 aws 的帳號管理相關業務都都需要來 iam 進行設定。</p>\n<h4 id=\"使用-root-account-新增一名使用者\"><a class=\"anchor\" href=\"#使用-root-account-新增一名使用者\">#</a> 使用 root account 新增一名使用者</h4>\n<p><img data-src=\"image-20230108113854062.png\" alt=\"image-20230108113854062.png\" /></p>\n<h4 id=\"新建一名使用者\"><a class=\"anchor\" href=\"#新建一名使用者\">#</a> 新建一名使用者</h4>\n<p>選取到 IAM 之後，點擊 sidebar 的  <code>Users</code>  &gt;  <code>Add users</code> <br />\n<img data-src=\"image-20230108114033352.png\" alt=\"image-20230108114033352.png\" /></p>\n<p>這邊帳號可以自己取，其中</p>\n<ul>\n<li>Access key - 用於我們程式開發時使用，因此需要勾選</li>\n<li>Password - 這邊是問你這個帳號是否需要使用 Web 的 Aws console dashboard. 如果這個帳號不需要 dashboard 操作，可以不創。(通常還是建立一下比較方便)</li>\n</ul>\n<h4 id=\"設置權限\"><a class=\"anchor\" href=\"#設置權限\">#</a> 設置權限</h4>\n<p><img data-src=\"image-20230108115828306.png\" alt=\"image-20230108115828306.png\" /></p>\n<p>這邊我們可以依照需求選擇要給予這個 user 的權限。若是要讓此 user 作為類似 admin 使用的話，我們可以直接選擇  <code>AdminstratorAccess</code></p>\n<p><img data-src=\"image-20230108120035484.png\" alt=\"image-20230108120035484.png\" /></p>\n<p>這邊是額外可選設定，Tag 可以做一些客製化標記，作為往後 filter 使用。</p>\n<p><img data-src=\"image-20230108120359228.png\" alt=\"image-20230108120359228.png\" /></p>\n<p>如果我們設定得差不多了，這邊 review 好就可以創建了。</p>\n<p><img data-src=\"image-20230108120532329.png\" alt=\"image-20230108120532329.png\" /></p>\n<p>接下來我們可以將這組  <code>access key ID</code>  與  <code>secret access key</code>  設定在我們的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L2NsaS9sYXRlc3QvdXNlcmd1aWRlL2NsaS1jb25maWd1cmUtZW52dmFycy5odG1s\">環境變數</span></p>\n<p>![[image-20230108122050789.png]]</p>\n<p>至此，基本的 IAM 設定就差不多完成了。</p>\n",
            "tags": [
                "Tech",
                "Aws Architecture",
                "aws",
                "iam"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Others/%E4%BD%BF%E7%94%A8%20gmail%20%E7%84%A1%E9%99%90%E7%94%B3%E8%BE%A6%E5%B8%B3%E8%99%9F/",
            "url": "https://z20240.github.io/Tech/Others/%E4%BD%BF%E7%94%A8%20gmail%20%E7%84%A1%E9%99%90%E7%94%B3%E8%BE%A6%E5%B8%B3%E8%99%9F/",
            "title": "如何使用 gmail 無限申辦帳號",
            "date_published": "2023-01-08T02:34:10.000Z",
            "content_html": "<p>很多線上服務都需要 email 進行帳號申辦。但是很多時候一個帳號僅能綁定一個信箱。而我們想要多的帳號，但是沒有這麼多信箱時該怎麼辦呢？</p>\n<p>Gmail 有一個特殊功能。如果你在自己的 gmail 信箱帳號後面使用  <code>+[number|letters]</code>  ，gmail 會認得，並且統一寄送到你真正的信箱。</p>\n<p>例如有一個帳號是 <span class=\"exturl\" data-url=\"bWFpbHRvOmFiY0BnbWFpbC5jb20=\">abc@gmail.com</span> 。若是我們在註冊信箱使用</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"bWFpbHRvOmFiYysxQGdtYWlsLmNvbQ==\">abc+1@gmail.com</span>, <span class=\"exturl\" data-url=\"bWFpbHRvOmFiYysyQGdtYWlsLmNvbQ==\">abc+2@gmail.com</span> 甚至是 <span class=\"exturl\" data-url=\"bWFpbHRvOmFiYythbnl0aGluZ0BnbWFpbC5jb20=\">abc+anything@gmail.com</span> ，其信件都會寄送到 <span class=\"exturl\" data-url=\"bWFpbHRvOmFiY0BnYW1pbC5jb20=\">abc@gamil.com</span> 這個信箱。而大部分網站針對這些信箱都會視為是不同的信箱位置。如此我們便可以使用同一個信箱註冊大量的帳號了。</li>\n</ul>\n<p>![[image-20230108111759969.png]]</p>\n<p>這是 Gmail 一個獨有的信箱服務。</p>\n<p>這也很好的幫助使用者能夠管理我們的信箱收發服務。</p>\n<p>例如我們就能夠使用  <code>+地區</code>  來作為分區的帳號管理，或是使用  <code>+部門</code>  來幫助自己達到業務範圍的分別管理。</p>\n",
            "tags": [
                "Tech",
                "Others",
                "gmail"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Hexo/fix-mermaid-parser-issue/",
            "url": "https://z20240.github.io/Tech/Hexo/fix-mermaid-parser-issue/",
            "title": "解決 Mermaid 無法正確在 shoka 主題顯示的問題",
            "date_published": "2023-01-06T15:08:53.977Z",
            "content_html": "<p><code>Mermaid</code>  作為 markdown 的流程圖繪製解決方案大大增加了 markdown 的實用性。對於繪圖苦手的我來說 Mermaid 簡直是一大救星。因此在開始自己搭建 hexo 部落格之後，我第一件事也是確認 Mermaid 是否可用。</p>\n<p>後來選上 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYw==\">shoka</span> 這套主題不單是它漂亮的佈景，還有豐富的內建 markdwon 語法支援。其中當然包括了今天的主角  <code>Mermaid</code> 。</p>\n<p>在一切搭建都接近完成後，我依依確認功能是否完備時發現 Mermaid 無法正確顯示流程圖。無論怎麼修改  <code>_config.yml</code>  的配置，其永遠都是死死地顯示純文字的格式。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#96;&#96;&#96;mermaid</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>graph LR</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    A[Square Rect] -- Link text --&gt; B((Circle))</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    A --&gt; C(Round Rect)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    B --&gt; D&#123;Rhombus&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    C --&gt; D</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#96;&#96;&#96;mermaid</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sequenceDiagram</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    loop Daily query</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        Alice-&gt;&gt;Bob: Hello Bob, how are you?</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        alt is sick</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Bob-&gt;&gt;Alice: Not so good :(</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        else is well</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            Bob-&gt;&gt;Alice: Feeling fresh like a daisy</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        end</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        opt Extra response</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Bob-&gt;&gt;Alice: Thanks for asking</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        end</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    end</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><p>爬了很久的文，找了很多文章。</p>\n<p>一開始以為應該是 dependency 不正確，或是 css style 沒有載入之類的。<br />\n嘗試了諸多方法依然無解。偏偏官方文檔完全沒有多加說明。</p>\n<p>就在窮盡所有方法之後，決定去爬  <code>mode_modules</code>  中的 source code。<br />\n(就乖乖的 console.log 看看吧！)</p>\n<p>幸好這個 Plugin 的 code 不長，很快就定位到了實際運作的位置</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>hexo-renderer-multi-markdown-it/lib/renderer/markdown-it-mermaid</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>md<span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fence</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tokens<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">,</span> self</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>info <span class=\"token operator\">===</span> <span class=\"token string\">'mermaid'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">var</span> firstLine <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\n</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstLine<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^graph (?:TB|BT|RL|LR|TD);?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            firstLine <span class=\"token operator\">=</span> <span class=\"token string\">' graph'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            firstLine <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">mermaidChart</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> firstLine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">defaultRenderer</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>經過各種的  <code>console.log</code>  之後，終於發現原因！</p>\n<p>原因在於  <code>markdown-it</code>  在針對文章 parse token 時，將 marmaid 的 <span class=\"exturl\" data-url=\"aHR0cDovL3Rva2VuLmluZm8=\">token.info</span> 定義為 <strong> <code>mermaid2</code> </strong>。因此 if condition 一定比對失敗。</p>\n<hr />\n<p>知道了問題點就好辦了，接下來我只需要決定如何修理即可。</p>\n<p>有兩種我比較喜歡的修改方式：</p>\n<ol>\n<li>將  <code>if (token.info === 'mermaid')</code>  改成  <code>if (token.info === 'mermaid2')</code>  ，未來在用的時候統一使用  <code>mermaid2</code></li>\n<li>將  <code>if (token.info === 'mermaid')</code>  改成  <code>if (token.info.includes('mermaid'))</code> ，未來只要 type 有關鍵字 mermaid 即可自動 parse 出 graph。 我也不用管是  <code>mermaid</code>  還是  <code>mermaid2</code> 。</li>\n</ol>\n<hr />\n<p>最終我選擇了第二種方案。</p>\n<p>這兩種方案其實殊途同歸，唯一的問題在於未來在重新佈局時一定要記得手動修改  <code>node_modules</code>  裡的這段 code.</p>\n",
            "tags": [
                "Tech",
                "Hexo",
                "hexo"
            ]
        },
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Combly-Lession6/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Combly-Lession6/",
            "title": "Cambly-Lession6",
            "date_published": "2023-01-04T16:28:40.000Z",
            "content_html": "<ul>\n<li>The country is mostly rural areas.</li>\n<li>I used to live in the country.</li>\n<li>farm fishing</li>\n<li>wild caught</li>\n<li>car pooling: 搭便車</li>\n<li>car sharing program = pay to share a car</li>\n<li></li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession4/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession4/",
            "title": "Cambly-Lession4",
            "date_published": "2023-01-04T16:28:40.000Z",
            "content_html": "<ul>\n<li>broadly 寬廣</li>\n<li>to enroll (v.) 編入\n<ul>\n<li>enrollment (n.) = sign up</li>\n</ul>\n</li>\n<li>subject specialist = professor in specific subject.</li>\n<li>take gap year. = 升學階段的休學一年 ex. 高中到大學。大學到研究所中間休息一段時間</li>\n<li>take a (week/month/year) off. = 休息一段時間</li>\n<li>to work sb way through colledge = 半工半讀</li>\n<li>teacher's pet (貶義) 老師的寵兒\n<ul>\n<li>brown noser 馬屁精</li>\n</ul>\n</li>\n<li>to keep up with anythings = don't fall behind.\n<ul>\n<li>ex. are you keeping up with me.</li>\n<li>He could not keep up with the conversation. (He didn't understand.).</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession5/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession5/",
            "title": "Cambly-Lession4",
            "date_published": "2023-01-04T16:28:40.000Z",
            "content_html": "<ul>\n<li>have foot in the door （ idioms )\n<ul>\n<li>to make the first step toward a goal by gaining entry into an organization, a career, etc. He took a job as a secretary to get his foot in the door.</li>\n</ul>\n</li>\n<li>frequently &gt; often &gt; usually (1 / week).</li>\n<li>I don't know if i have a cold</li>\n<li>coherence = understanding.</li>\n<li>stand on the same topic</li>\n<li>&quot;synonyms&quot; is the difference word in the same meaning.</li>\n<li>standardized = cause (something) to conform to a standard.\n<ul>\n<li>&quot;we could standardize on U.S. equipment&quot;.</li>\n<li>&quot;the editors failed to standardize the spelling of geographic names&quot;</li>\n</ul>\n</li>\n<li>proficiency = ranking = level</li>\n<li>authorities people or organization in charge of / to take charge of ...</li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession3/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession3/",
            "title": "Cambly-Lession3",
            "date_published": "2023-01-02T16:28:40.000Z",
            "content_html": "<ul>\n<li>hold back  拖後腿\n<ul>\n<li>I am holding my friends back from winning.</li>\n</ul>\n</li>\n<li>motivated = you really want to do something be cause of th.</li>\n<li>motivation (n.)</li>\n<li>stimulate 刺激\n<ul>\n<li>(someone's) interest in or enthusiasm for doing something.</li>\n</ul>\n</li>\n<li>passionate (adj) = have some belive in th.\n<ul>\n<li>\n<ul>\n<li>ate (adj.)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>enthusiasm (n.) / enthusiastic (adj.) + about</li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/IELS%20%E5%AD%97%E5%BD%99/",
            "url": "https://z20240.github.io/Life/EnglishLearn/IELS%20%E5%AD%97%E5%BD%99/",
            "title": "IELS 字彙",
            "date_published": "2023-01-02T16:28:40.000Z",
            "content_html": "<h2 id=\"單字\"><a class=\"anchor\" href=\"#單字\">#</a> 單字</h2>\n<ul>\n<li>prairie (n.) 大草原\n<ul>\n<li>pasturage</li>\n<li>savanna</li>\n<li>grassland  (小) 草原</li>\n<li>pasture\n<ul>\n<li>(v.) 放牧；= graze</li>\n<li>(n.) 牧地</li>\n</ul>\n</li>\n<li>enclosure (en|clos|ure) 圈地飼養</li>\n</ul>\n</li>\n<li>disverse (adj.) = different = discrepant = various = disparate\n<ul>\n<li>di = two</li>\n<li>verse = turn</li>\n</ul>\n</li>\n<li>fertile (adj.) 肥沃的 = arable</li>\n<li>cropland 耕地\n<ul>\n<li>crop (n.) = produce (n.)</li>\n<li>cash crop = 經濟作物</li>\n<li>crop 裁切</li>\n</ul>\n</li>\n<li>landform 地形 = terran</li>\n<li>Medi|terran|ean 地中海的 (adj.)\n<ul>\n<li>Medi = middle</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字根\"><a class=\"anchor\" href=\"#字根\">#</a> 字根</h3>\n<ul>\n<li>verse / verg = turn\n<ul>\n<li>averse (adj.) = 不喜歡；厭惡的\n<ul>\n<li>a = without</li>\n<li>verse = turn</li>\n</ul>\n</li>\n<li>adverse (adj.) = 不利的；逆向的 + to N\n<ul>\n<li>ad = toward = 朝著</li>\n<li>verse = turn</li>\n</ul>\n</li>\n<li>converse (v.) = (conversation) =  交談 + with N</li>\n<li>inverse (adj.) = 顛倒的；相反地</li>\n<li>reverse (v.) = 逆轉</li>\n<li>traverse (adj.)(v.) = 橫跨的</li>\n<li>divergency (n.) = 歧異 = discrepancy</li>\n</ul>\n</li>\n<li>fertile (adj.)\n<ul>\n<li>= rich</li>\n<li>= productive</li>\n<li>= fecund</li>\n<li>&lt;=&gt; infertile (adj.)\n<ul>\n<li>= barren 不孕的</li>\n<li>= sterile</li>\n<li>= topography</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ephemeral (adj.) 暫時的；短暫的\n<ul>\n<li>= temporary</li>\n<li>= transient</li>\n<li>= momentary</li>\n<li>= evanescent 短暫的</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "english",
                "iels"
            ]
        },
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession2/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession2/",
            "title": "Cambly-Lession2",
            "date_published": "2022-12-30T16:28:40.000Z",
            "content_html": "<h2 id=\"vocabulary\"><a class=\"anchor\" href=\"#vocabulary\">#</a> Vocabulary</h2>\n<ul>\n<li>\n<p>scenery = 風景</p>\n<ul>\n<li>view 比較偏向眼中看出去的事物</li>\n<li>scenery 是平常描述中的「風景」</li>\n</ul>\n</li>\n<li>\n<p>coherence 連貫性 (n.)</p>\n</li>\n<li>\n<p>accuracy 準確性 (n.)</p>\n</li>\n<li>\n<p>intonation 語調 (n.)</p>\n</li>\n<li>\n<p>flawless = perfect 完美的</p>\n</li>\n<li>\n<p>to unwind (v.) = to relax.</p>\n</li>\n<li>\n<p>to gather (v.) = gathering (n.) 聚集 =/= together.</p>\n</li>\n<li>\n<p>to go sightseeing 觀光</p>\n</li>\n<li>\n<p>to get together  聚聚</p>\n<ul>\n<li>ex. Shall we get together on Friday and go for a drink or something?\n<ul>\n<li>我們星期五聚聚喝點東西，如何？</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>to catch-up 聯絡感情</p>\n<ul>\n<li>How about let's catch-up next week?\n<ul>\n<li>我們下週來聚聚聯絡感情如何？</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>to contemplate 沉思</p>\n</li>\n<li>\n<p>to cost an arm and leg = expensive.</p>\n</li>\n<li>\n<p>to change of senary = 轉換心情</p>\n</li>\n<li>\n<p>to broaden wider = 打開眼界</p>\n</li>\n<li>\n<p>here and there = to describe uns</p>\n</li>\n<li>\n<p>as often as = every time 每次</p>\n<ul>\n<li><strong>As</strong> <strong>often</strong> <strong>as</strong> I tried to phone him the line was engaged.</li>\n<li>每次我給他打電話都佔線。</li>\n</ul>\n</li>\n<li>\n<p>indeed 的確</p>\n</li>\n<li>\n<p>not to mention = 更不必說</p>\n<ul>\n<li>There were three of us there, <strong>not</strong> <strong>to</strong> <strong>mention</strong> the children.\n<ul>\n<li>不算孩子在內，我們中有三個人在那裡。</li>\n</ul>\n</li>\n<li>I enjoyed the meal, <strong>not</strong> <strong>to</strong> <strong>mention</strong> the conversation.\n<ul>\n<li>我很喜歡那一頓飯，至於席上的談話更是不必說了。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>accurately (adv.) 準確地.</p>\n</li>\n<li>\n<p>accurate (adj.) 準確的</p>\n</li>\n<li>\n<p>accuracy (n.) 準確性 /precision 精確性</p>\n</li>\n<li>\n<p>glitter 閃光</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"字根字尾\"><a class=\"anchor\" href=\"#字根字尾\">#</a> 字根字尾</h2>\n<ul>\n<li>ex 外面</li>\n<li>er 反覆 / 比較級 / 能做某用途的人或物，東西；能做... 用途的東西。</li>\n<li>cise = cut 切割</li>\n</ul>\n<p>ex.</p>\n<pre><code>exercise = (外出反覆批砍) = 運動\n</code></pre>\n<ul>\n<li>ac / ad = to</li>\n<li>cur = cure = take care</li>\n<li>rate = 變成...; 充當... = cause to become.</li>\n</ul>\n<p>ex.</p>\n<pre><code>accurate = (to become more care) = 精確\n</code></pre>\n<ul>\n<li>pre 預先<br />\n ex.</li>\n</ul>\n<pre><code>precise = 精確的\n(pre cut the ambiguous part, then leave the things are sure.)\n</code></pre>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession1/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession1/",
            "title": "EnglishLearn/Cambly-Lession1",
            "date_published": "2022-12-27T19:26:44.000Z",
            "content_html": "<ul>\n<li>\n<p>convenient = easier = handily (seldom used)</p>\n</li>\n<li>\n<p><em>cheaper</em> may means low quality, don't used it all the time.</p>\n</li>\n</ul>\n<blockquote>\n<p>cheaper = low quality</p>\n</blockquote>\n<ul>\n<li>\n<p>If we want to describe  <code>High quality and low price</code> , we can use  <code>more affordable</code> ,  <code>less expensive</code></p>\n</li>\n<li>\n<p>No American use <strong>CP (price–performance ratio)</strong>, only Taiwanese use it.</p>\n</li>\n<li>\n<p>If we want to describe space are not in one place, we can use  <code>separator place</code> .</p>\n</li>\n<li>\n<p>closet = a place to make people change their clothes.</p>\n</li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Data%20Storage/2022-10-08-sql-postgres-%E9%81%87%E5%88%B0-out-of-shared-memory-%E5%95%8F%E9%A1%8C/",
            "url": "https://z20240.github.io/Tech/Data%20Storage/2022-10-08-sql-postgres-%E9%81%87%E5%88%B0-out-of-shared-memory-%E5%95%8F%E9%A1%8C/",
            "title": "SQL Postgres 遇到 out of shared memory 問題",
            "date_published": "2022-10-08T04:42:30.706Z",
            "content_html": "<h3 id=\"sql-postgres-遇到-out-of-shared-memory-問題\"><a class=\"anchor\" href=\"#sql-postgres-遇到-out-of-shared-memory-問題\">#</a> [SQL] Postgres 遇到 out of shared memory 問題</h3>\n<p>由於工作需要，我在 Postgresql 中創建了 20000 張 20 columns x 1000 entries 的 tables，約莫了 18G 的大小。</p>\n<p>由於要一次性創建如此海量的資料，因此我寫了段小 Script 來協助完成。</p>\n<p>期間在大約 2000 筆衣料左右的時候程式就會碰到  <code>out of shared memory</code>  的問題，困擾我一段時間。</p>\n<p><img data-src=\"1*4K08BRP-ucCyW_t2PddHdw.png\" alt=\"\" /></p>\n<p>查詢了很多網站都沒有找到良好的解釋或是解決方案。</p>\n<p>直到後來查到 stackoverflow 上一個沒什麼人回應的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzY4OTEwMjM4\">解決方案</span></p>\n<p>A quick fix for  <code>PSQLException error out of shared memory</code>  is to set the</p>\n<blockquote>\n<p>max_locks_per_transaction</p>\n</blockquote>\n<p>parameter in PostgreSQL config file, which specifies number of object locks allocated for each transaction (if there are statements/routines that work on large number of tables to finish.</p>\n<p>其實主要就是 PostgresSQL 在 transaction lock 有其上限。當 default 上限用完了，就會 out of shared memory.</p>\n<p>要解決的方法也不難，我們可以去 postgresql 的 config 中找到  <code>max_locks_per_transaction</code>  將 default 的 64 加大。</p>\n<p>至於 postgresql config 是放在哪裡？</p>\n<p>這部分我們可以使用  <code>SHOW config_file;</code>  這行 sql 查看。</p>\n<p>Default 應該都是在  <code>/var/lib/postgresql/data/postgresql.conf</code>  的。</p>\n<p><img data-src=\"1*XoswqaeN0ZhTSGGzHSzrCA.png\" alt=\"\" /></p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3liZXJ0ZWMtcG9zdGdyZXNxbC5jb20vZW4vcG9zdGdyZXNxbC15b3UtbWlnaHQtbmVlZC10by1pbmNyZWFzZS1tYXhfbG9ja3NfcGVyX3RyYW5zYWN0aW9uLw==\">POSTGRESQL: YOU MIGHT NEED TO INCREASE MAX_LOCKS_PER_TRANSACTION</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY0OTA2NjQvZXJyb3Itb3V0LW9mLXNoYXJlZC1tZW1vcnk=\">ERROR: out of shared memory</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Data Storage",
                "postgres",
                "database"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/vue/2022-07-04-vue-nuxt-eslint-prettier-vscode-%E8%A8%AD%E5%AE%9A-%E8%AE%93-eslint-%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88-nuxt-%E5%B0%88%E6%A1%88/",
            "url": "https://z20240.github.io/Tech/Frontend/vue/2022-07-04-vue-nuxt-eslint-prettier-vscode-%E8%A8%AD%E5%AE%9A-%E8%AE%93-eslint-%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88-nuxt-%E5%B0%88%E6%A1%88/",
            "title": "Vue Nuxt + Eslint + Prettier +Vscode 設定 — 讓 Eslint 自動排版 Nuxt 專案",
            "date_published": "2022-07-04T10:52:32.887Z",
            "content_html": "<h3 id=\"vue-nuxt3-eslint-prettier-vscode-設定-讓-eslint-自動排版-nuxt-專案\"><a class=\"anchor\" href=\"#vue-nuxt3-eslint-prettier-vscode-設定-讓-eslint-自動排版-nuxt-專案\">#</a> [Vue] Nuxt3 + Eslint + Prettier +Vscode 設定 — 讓 Eslint 自動排版 Nuxt 專案</h3>\n<p><img data-src=\"1*ET9CfH7oh7cubkTpNch7Xw.png\" alt=\"\" /></p>\n<p>最近因為接案需要，決定使用 Nuxt 作為快速開發的框架。發現一段時間沒觀注，前端環境真是日新月異。 Nuxt 竟然也迎來第三版了。</p>\n<p>因此這次在設定環境時順便記錄了一下如何在專案中結合 Eslint + Prettier 與 Vscode 的自動風格檢查兼排版。</p>\n<h3 id=\"nuxt\"><a class=\"anchor\" href=\"#nuxt\">#</a> Nuxt</h3>\n<h4 id=\"安裝\"><a class=\"anchor\" href=\"#安裝\">#</a> 安裝</h4>\n<p><strong>使用  <code>npx</code>  直接安裝</strong></p>\n<pre><code>$ npx nuxi init &lt;nuxt-app&gt;\n</code></pre>\n<p>打開你的  <code>nuxt-app</code></p>\n<pre><code>$ code nuxt-app\n</code></pre>\n<p>其中如果我們不希望我們的 .nuxt 相依專案以  <code>.shim</code>  的形式產生，我們先在  <code>nuxt.config.ts</code>  內將 shim 設成  <code>false</code>  .</p>\n<pre><code>export default defineNuxtConfig(&#123;\n typescript: &#123;\n shim: false\n &#125;\n&#125;)\n</code></pre>\n<p><strong>安裝相依套件</strong></p>\n<pre><code>$ yarn install\n</code></pre>\n<p>到這邊這些前置作業完成之後，我們先啟動一次 nuxt 讓他生成自己的  <code>.nuxt</code>  專案。</p>\n<pre><code>$ yarn dev -o\n</code></pre>\n<h3 id=\"vscode\"><a class=\"anchor\" href=\"#vscode\">#</a> Vscode</h3>\n<h4 id=\"prettier-eslint\"><a class=\"anchor\" href=\"#prettier-eslint\">#</a> Prettier Eslint</h4>\n<p><img data-src=\"1*ovYVQpQEWiy2JY0l267wjw.png\" alt=\"\" /></p>\n<h4 id=\"eslint\"><a class=\"anchor\" href=\"#eslint\">#</a> Eslint</h4>\n<p><img data-src=\"1*t-XiqWLBCtF_pu_VKsp3XQ.png\" alt=\"\" /></p>\n<h3 id=\"eslint-2\"><a class=\"anchor\" href=\"#eslint-2\">#</a> Eslint</h3>\n<h4 id=\"init\"><a class=\"anchor\" href=\"#init\">#</a> Init</h4>\n<p>執行  <code>npx eslint — init</code>  初始化  <code>.eslintrc.js</code>  並自動安裝相關的 dependency，他會問你一些問題來據此產生相關的設定</p>\n<pre><code>You can also run this command directly using ‘npm init @eslint/config’.\nnpx: 40 安裝成功，花費 3.812 秒\n✔ How would you like to use ESLint? · style\n✔ What type of modules does your project use? · esm\n✔ Which framework does your project use? · vue\n✔ Does your project use TypeScript? · No / Yes\n✔ Where does your code run? · browser\n✔ How would you like to define a style for your project? · prompt\n✔ What format do you want your config file to be in? · JavaScript\n✔ What style of indentation do you use? · 4\n✔ What quotes do you use for strings? · single\n✔ What line endings do you use? · unix\n✔ Do you require semicolons? · No / Yes\nThe config that you’ve selected requires the following dependencies:\neslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest\n✔ Would you like to install them now? · No / Yes\n✔ Which package manager do you want to use? · yarn\n</code></pre>\n<p>產生出來的 .eslintrc.js 會像是這樣</p>\n<pre><code>module.exports = &#123;\n “env”: &#123;\n “browser”: true,\n “es2021”: true\n &#125;,\n “extends”: [\n “eslint:recommended”,\n “plugin:vue/essential”,\n “plugin:@typescript-eslint/recommended”\n ],\n “parserOptions”: &#123;\n “ecmaVersion”: “latest”,\n “parser”: “@typescript-eslint/parser”,\n “sourceType”: “module”\n &#125;,\n “plugins”: [\n “vue”,\n “@typescript-eslint”\n ],\n “rules”: &#123;\n &#125;\n&#125;\n</code></pre>\n<h4 id=\"install-dependency\"><a class=\"anchor\" href=\"#install-dependency\">#</a> Install Dependency</h4>\n<p>安裝相關的 dependency</p>\n<pre><code>$ yarn add -D eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest eslint@latest typescript eslint-plugin-nuxt\n</code></pre>\n<p>在  <code>package.json</code>  的  <code>scripts</code>  中加上  <code>“lint”: “eslint . — ext .ts,.vue”</code>  然後使用  <code>yarn lint</code>  來測試 eslint 是否有生效.</p>\n<p><img data-src=\"1*Mvfr8nd_T3OVC6U693GQVA.png\" alt=\"\" /></p>\n<p>! [ [image-20220704162435221.png] ]</p>\n<h4 id=\"修改-eslintrc-加入-nuxt-與-eslint-的相關套件\"><a class=\"anchor\" href=\"#修改-eslintrc-加入-nuxt-與-eslint-的相關套件\">#</a> 修改  <code>.eslintrc</code>  加入 nuxt 與 eslint 的相關套件</h4>\n<p>把配置文件中 `extends` 做如下的修改：</p>\n<ul>\n<li><code>”plugin:vue/essential”</code>  改成  <code>”plugin:vue/vue3-recommended”</code>  (前者是 vue2 的設定，後者為 vue3)</li>\n<li><code>”eslint:recommended”</code>  改成  <code>”plugin:nuxt/recommended”</code></li>\n<li>刪除  <code>plugins</code>  內的  <code>”vue”</code></li>\n<li>如果檔案內出現 <strong>Component name should always be multi-word</strong> 的錯誤，這是因為 nuxt 提倡 vue 文件的 Component 應該要用 multi-word snack case 進行命名。我們可以在 rules 中增加  <code>”vue/multi-word-component-names”: 0</code>  來關閉。</li>\n</ul>\n<p><img data-src=\"1*DTodaOdB7g7Y3j-35PopQg.png\" alt=\"\" /></p>\n<h3 id=\"prettier\"><a class=\"anchor\" href=\"#prettier\">#</a> Prettier</h3>\n<h4 id=\"install-dependency-2\"><a class=\"anchor\" href=\"#install-dependency-2\">#</a> Install Dependency</h4>\n<p>安裝 <strong>prettier, eslint-plugin-prettier, eslint-config-prettier</strong> 等相關套件</p>\n<pre><code>$ yarn add -D prettier eslint-plugin-prettier eslint-config-prettier\n</code></pre>\n<ul>\n<li><code>eslint-plugin-prettier</code>  : 讓我們可以在  <code>.eslintrc.js</code>  中直接在  <code>rules</code>  內使用  <code>prettier/prettier</code>  屬性設定  <code>.prettierrc</code>  ，省去多增加這個 file 的 maintainance.</li>\n<li><code>eslint-config-prettier</code>  : 會自動關掉所有不必要且可能會跟 Prettier 相衝的設定，讓我們可以在 eslint 中設定自己要的 rule。舉例來說如果 eslint 的 rule 和 prettier 的 rule conflict 的時候 （例如 eslint 限制了必须單引號，prettier 也限制了必须單引號，那麼如果用 eslint 驅動 prettier 來做檢查的話就會提示兩種 error 儘管他們都指向同一種錯誤。）此時這個 Plugin 就可以關閉額外的 error 顯示。</li>\n</ul>\n<p>之後，一樣修改  <code>.eslintrc</code>  中的  <code>extends</code>  內容：增加  <code>’plugin:prettier/recommended’</code></p>\n<pre><code>extends: [\n  ...,\n  &quot;plugin:prettier/recommended&quot;,\n  ...\n]\n</code></pre>\n<p>此時可能會出現紅線佈滿每個檔案，這是因為 prettier 在偵測 rule 時，若是沒有發現  <code>.prettierrc</code>  在專案中的話，就會去往更 root 的地方找，有可能 root 的 prettier 設定與專案所需不符。</p>\n<p><img data-src=\"1*jt_CPBruvGdfc6I_svByEw.png\" alt=\"\" /></p>\n<p>我們這時可以在  <code>.eslintrc.js</code>  中的  <code>rules</code>  中增加  <code>prettier/prettier</code>  的來告訴 prettier 我們的 eslint 要怎樣的規則，如此可以取代掉在專案中建立  <code>.prettirerc</code></p>\n<p><strong>完整的 .eslintrc.js 最終會如下</strong></p>\n<pre><code>module.exports = &#123;\n env: &#123;\n   browser: true,\n   es2021: true,\n   node: true,\n &#125;,\n extends: [\n   ‘plugin:vue/vue3-recommended’,\n   ‘plugin:@typescript-eslint/recommended’,\n   ‘plugin:nuxt/recommended’,\n   ‘plugin:prettier/recommended’,\n ],\n parserOptions: &#123;\n   ecmaVersion: ‘latest’,\n   parser: ‘@typescript-eslint/parser’,\n   sourceType: ‘module’,\n &#125;,\n plugins: [\n   // “vue”,\n   ‘@typescript-eslint’,\n ],\n rules: &#123;\n   indent: [‘error’, 2],\n   ‘linebreak-style’: [‘error’, ‘unix’],\n   quotes: [‘error’, ‘single’],\n   semi: [‘error’, ‘always’],\n   ‘vue/multi-word-component-names’: 0,\n   ‘comma-dangle’: [\n     ‘error’,\n     &#123;\n         arrays: ‘always-multiline’,\n         objects: ‘always-multiline’,\n         imports: ‘never’,\n         exports: ‘never’,\n         functions: ‘never’,\n     &#125;,\n   ],\n   ‘vue/html-self-closing’: [\n     ‘error’,\n     &#123;\n         html: &#123;\n           void: ‘always’,\n           normal: ‘always’,\n           component: ‘always’,\n         &#125;,\n         svg: ‘always’,\n         math: ‘always’,\n     &#125;,\n   ],\n   ‘prettier/prettier’: [\n      ‘error’,\n      &#123;\n         printWidth: 120, // 最大長度\n         tabWidth: 2, // tab 縮排 2 空格\n         useTabs: false, // 使用空格縮排\n         singleQuote: true, // js 單引號\n         semi: true, // 要有分號\n         trailingComma: ‘es5’, // 使用 es5 規則規範結尾的逗號\n         arrowParens: ‘avoid’,\n      &#125;,\n   ],\n &#125;,\n&#125;;\n</code></pre>\n<p>此時我們再使用  <code>ctrl+s</code>  保存，應該就會發現可以自動格式化檔案了。</p>\n<h4 id=\"trouble-shooting\"><a class=\"anchor\" href=\"#trouble-shooting\">#</a> Trouble shooting</h4>\n<p>若是發現存檔後沒有如預期中自動格式化，可以檢查是否自己的 Vscode 預設格式化工具是  <code>prettier-eslint</code></p>\n<ul>\n<li>使用  <code>cmd + p (ctrl + p)</code>  ，輸入  <code>&gt; Format Document</code></li>\n</ul>\n<p><img data-src=\"1*WT4Zgzex60odGfhRIgpXxw.png\" alt=\"\" /></p>\n<ul>\n<li>選擇 Prettier ESLint</li>\n</ul>\n<p><img data-src=\"1*CvCOrh9Ylw2-AlkWrb9A4g.png\" alt=\"\" /></p>\n<p>之後再嘗試一次看看，基本上應該就要有反應了～</p>\n<h3 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pY29kZS5iZXN0L2kvNzA0MDU1NDYyMjY3NTk=\">nuxt3 项目中使用 eslint 和 prettier+commitlint 附常用规则配置</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmV0dGllci5pby9kb2NzL2VuL2luc3RhbGwuaHRtbA==\">Prettier</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LXBsdWdpbi1udXh0\">eslint-plugin-nuxt</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Frontend",
                "Vue",
                "javascript",
                "vscode",
                "nuxt-3",
                "eslint",
                "prettier"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Others/2022-06-16-tech-skhd-%E5%A4%B1%E5%8E%BB%E5%8A%9F%E8%83%BD-not-working-%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/",
            "url": "https://z20240.github.io/Tech/Others/2022-06-16-tech-skhd-%E5%A4%B1%E5%8E%BB%E5%8A%9F%E8%83%BD-not-working-%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/",
            "title": "Tech skhd 失去功能 (Not working)的解決方法",
            "date_published": "2022-06-16T07:25:19.143Z",
            "content_html": "<h3 id=\"tech-skhd-失去功能-not-working的解決方法\"><a class=\"anchor\" href=\"#tech-skhd-失去功能-not-working的解決方法\">#</a> [Tech] skhd 失去功能 (Not working) 的解決方法</h3>\n<p><img data-src=\"0*A5q6r3JS-zTQfZVk.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=\">Skhd</span> 是一個適用於 MacOS 的小實用軟件，它允許我們重新映射各種操作的快捷方式。然而在某次 Mac 升級之後就發生 skhd 時不時停止運作的狀況。</p>\n<p><strong>Debug</strong></p>\n<p>首先我必須要停止 skhd 的 process. 使用 <strong>brew</strong> 來做到。</p>\n<pre><code>$ brew services stop skhd\n</code></pre>\n<p>之後，可以使用 skhd -V 來以詳細模式運行</p>\n<pre><code>$ skhd -V\nskhd: successfully created pid-file..\nskhd: secure keyboard entry is enabled by (5530) 'iterm2'! abort..\n</code></pre>\n<p><img data-src=\"1*-O6oGPKvPXPJx055gUTnJA.png\" alt=\"\" /></p>\n<p>訊息中顯示 mac 有一個  <code>secure keyboard entry</code>  的模式不知道為什麼被打開了。</p>\n<p>通過進一步搜尋可以知道我們可以使用 iTerm2 的 menu 或是 Terminal 的 menu 來關閉這個模式。</p>\n<p><img data-src=\"1*FvKx68zuda255u3UiZds-w.png\" alt=\"\" /></p>\n<p><img data-src=\"1*dW3dMJS7WrqAj9NFzosk4Q.png\" alt=\"\" /></p>\n<p>到這邊理論上只要可以取消，之後再把 skhd 重啟就可以完成了。</p>\n<pre><code>$ brew services start skhd\n</code></pre>\n<h4 id=\"更加複雜的-debug\"><a class=\"anchor\" href=\"#更加複雜的-debug\">#</a> <strong>更加複雜的 Debug</strong></h4>\n<p>事情如果到那邊就完結了，我也不用再寫這篇了。</p>\n<p>可惜問題就是發生在  <code>secure keyboard entry</code>  無法被正確 disable</p>\n<p>因此我又繼續尋找資料，後來看到了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWcuaW8vZG9jcy9zdXBwb3J0L3NlY3VyZS1rZXlib2FyZC1pbnB1dCNmaWctYW5kLXNlY3VyZS1rZXlib2FyZC1pbnB1dA==\">這篇</span> ，源自 Fig 一個新的 Termial plugin 有講到類似的除錯方法。我就一步一步整理過來。</p>\n<p>裡面有講到「如果無法取消選中該複選框，則 iTerm 檢測到安全輸入已啟用，但它不是負責的應用程序。要弄清楚如何禁用它，請繼續故障排除部分。」</p>\n<p>其羅列了以下幾種可能的原因</p>\n<p><strong>一、與密碼管理器衝突 (1Password, BitWarden)</strong></p>\n<p>某些密碼管理器在輸入主密碼時會啟用  <code>Secure Keyboard Entry</code>  ，但之後偶爾會無法禁用它。</p>\n<p>如果您使用 1Password、Bitwarden 或其他密碼管理器，請退出應用程序，然後檢查是否仍啟用  <code>Secure Keyboard Entry</code>  。</p>\n<blockquote>\n<p>注意：如果您要退出 1Password，請確保您完全退出它，而不僅僅是正常的 cmd+q 退出</p>\n</blockquote>\n<p><img data-src=\"0*nlUF009uzQ11n5d5.png\" alt=\"\" /></p>\n<p>如果是密碼管理器負責，只需重新啟動它即可解決問題。否則，請繼續故障排除部分。</p>\n<p><strong>二、其他未知的應用程序</strong></p>\n<p>有時其他應用程序會啟用安全輸入，但在不再需要時無法將其關閉。</p>\n<p>我們可以使用以下指令顯示出需要使用此設定的應用程式。</p>\n<pre><code>$ ioreg -l -w 0 |  tr ',' '\\n' 2&amp;&gt; /dev/null | grep kCGSSessionSecureInputPID | cut -f 2 -d = | uniq | xargs ps -o command= -p\n</code></pre>\n<p><img data-src=\"1*ZhFCMO8tv_w42ZIjh8diHw.png\" alt=\"\" /></p>\n<p>在我的例子中會發現是一個叫做  <code>loginWindow</code>  的 process 暫用著。這似乎是 MacOS 的小 bug ，有時後 loginWindow 在 user login 之後不會 terminal (disable secure input entry) .</p>\n<p>這時候僅需要使用  <code>⌃ Control` + `⌘ Command` +`Q</code>  將畫面進到上鎖之後重新登入，理論上就能夠解決這個問題。</p>\n<blockquote>\n<p>不過，如果這樣的方式依然無法解決，也許「登出」、或「重開機」會是最後的解決方法。</p>\n</blockquote>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2FtdW5kcmEuY29tLm5wL3NraGQtc3VkZGVubHktc3RvcHBlZC13b3JraW5nLWFmdGVyLXVwZ3JhZGUvMTczOA==\">SKHD SUDDENLY STOPPED WORKING AFTER UPGRADE</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWcuaW8vZG9jcy9zdXBwb3J0L3NlY3VyZS1rZXlib2FyZC1pbnB1dCNmaWctYW5kLXNlY3VyZS1rZXlib2FyZC1pbnB1dA==\">Fig and Secure Keyboard Input</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Others",
                "tiling-window-manager",
                "yabai",
                "skhd"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/NodeJs/2022-05-16-node-%E5%A6%82%E4%BD%95%E6%AA%A2%E6%B8%AC-node-%E7%A8%8B%E5%BC%8F%E7%9A%84memory-leak-%E4%BB%A5%E5%8F%8A%E8%99%95%E7%90%86-out-of-memory-%E5%95%8F%E9%A1%8C/",
            "url": "https://z20240.github.io/Tech/Frontend/NodeJs/2022-05-16-node-%E5%A6%82%E4%BD%95%E6%AA%A2%E6%B8%AC-node-%E7%A8%8B%E5%BC%8F%E7%9A%84memory-leak-%E4%BB%A5%E5%8F%8A%E8%99%95%E7%90%86-out-of-memory-%E5%95%8F%E9%A1%8C/",
            "title": "Node 如何檢測 Node 程式的Memory Leak 以及處理 out of memory 問題",
            "date_published": "2022-05-16T10:10:49.465Z",
            "content_html": "<h3 id=\"node-如何檢測-node-程式的memory-leak-以及處理-out-of-memory-問題\"><a class=\"anchor\" href=\"#node-如何檢測-node-程式的memory-leak-以及處理-out-of-memory-問題\">#</a> [Node] 如何檢測 Node 程式的 Memory Leak 以及處理 out of memory 問題</h3>\n<p>身為一個 NodeJs 工程師，在架構一個 NodeJs 應用程式的生涯中或多或少應該都有碰過  <code>Javascript heap out of memory</code>  的狀況。</p>\n<p>畢竟 NodeJs 本身是跑在 V8 Engine 的 Script Language，本身在 main thread 中 default 僅有 1GB (In 64-bit system) 的 memory 配額。</p>\n<p><img data-src=\"1*r2wJzxZlT7878dhsficsYA.png\" alt=\"\" /></p>\n<p>絕大多數時候其實都是單純 server 功能越來越多導致記憶體用量不夠，這個時候我們可以簡單地在執行程式時使用  <code>--max-old-space-size</code>  來手動配額足夠的記憶體給 Node 使用。</p>\n<pre><code>// 使用 8GB 的記憶體來執行 app.js (這邊的單位是 KB)\n$ node --max-old-space-size=8192 app.js\n</code></pre>\n<p>然而若是當我們已經配置足夠大的記憶體，確還是發生了 <strong>out of memory</strong> 的狀況呢？那應該十之八九是我們碰上了 memory leak 的問題了。</p>\n<h4 id=\"監測-memory-heap-的使用量檢測是否-memory-leak\"><a class=\"anchor\" href=\"#監測-memory-heap-的使用量檢測是否-memory-leak\">#</a> 監測 memory heap 的使用量，檢測是否 memory leak</h4>\n<p>以往，我們要監測 memory heap 的使用需要利用諸如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGVhcGR1bXA=\">heapdump</span> 這類的 heap snapshot 工具來建立快照。但是在 version 6 以上的版本我們可以使用  <code>--inspect</code>  flag 來指示 node 執行 app.js 期間開啟監測模式。</p>\n<pre><code>$ node --inspect index.js\n</code></pre>\n<p><em>如果你今天的 app 是使用 ts-node，你也可以使用以下指令來進入 node 的 inspect （</em> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHMtbm9kZSN1c2VyLWNvbnRlbnQtcHJvZ3JhbW1hdGlj\">https://www.npmjs.com/package/ts-node#user-content-programmatic</span> <em>）</em></p>\n<pre><code>$ node -r ts-node/register --inspect ./app.ts\n</code></pre>\n<p>node 會另外開啟一個 9229 的 port 來提供 debugger 使用。</p>\n<p><img data-src=\"1*ot3-OLwkVSRw-ImSrXxhCw.png\" alt=\"\" /></p>\n<p><em>你也可以使用  <code>--inspect-brk</code>  ，這個 flag 會讓 node 監測模式啟動後停在第一個 statement。效果就類似設置一個 break point 在程式的第一行。</em></p>\n<p>接下來，我們就可以開啟 Google Chrome 的 <strong>DevTools</strong> attach 到 debugger 來進行實時監控跟 debug 了。</p>\n<p>在 google chrome 網址列輸入  <code>about:inspect</code>  可以進入到 Chrome 遠端開發工具畫面。</p>\n<p><img data-src=\"1*vE4cxtjQLFRgYckFNgX2eQ.png\" alt=\"\" /></p>\n<p>如果 prot 9229 已經開啟且被監聽，chrome 會自動找到相對應的 app 。之後我們可以點擊 <strong>inspect</strong> 進入監控畫面。</p>\n<p><img data-src=\"1*TnS_yRzEnIKV74ireuA50Q.png\" alt=\"\" /></p>\n<p>接下來點到 「記憶體」的選項，我們可以錄製記憶體的快照。</p>\n<p><img data-src=\"1*G7HH9z3wGJhG1mLZK-cvoQ.png\" alt=\"\" /></p>\n<p>DevTools 會分析出 app 中各個變數結構的使用大小、對比 root 的深度、物件本身佔用的記憶體總量… 等等，一目瞭然。甚至連變數名稱都列出來給你了。</p>\n<p><img data-src=\"1*y7HVRS0fXUw_u3Ypr-VCNg.png\" alt=\"\" /></p>\n<p>接下來我們要監測哪個變數導致記憶體增加就易如反掌了。</p>\n<p>以我們專案自身為例，在程式執行起來時 Array 所佔的記憶體容量還沒有到很多</p>\n<p><img data-src=\"1*hjkYvj6TLmxY9YM16b8Rsw.png\" alt=\"\" /></p>\n<p>但是隨著某個 API 的呼叫，大大地增加了 Array 在記憶體中的使用量。</p>\n<p><img data-src=\"1*wZXni_hZC3GxrpjuOegfcA.png\" alt=\"\" /></p>\n<p>因此我們就可以據針對這個部分進行細部分析。來快速定位 memory leak 的原因。</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0BwYXVsX2lyaXNoL2RlYnVnZ2luZy1ub2RlLWpzLW5pZ2h0bGllcy13aXRoLWNocm9tZS1kZXZ0b29scy03YzRhMWI5NWFlMjcjLnBtcWVqcm44cQ==\">Debugging Node.js with Chrome DevTools</span> (這是一個國外的工程師的筆記，簡述了 google DevTools 針對 node inspect 的使用方式)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92b2N1cy5jYy9hcnRpY2xlLzYxMTc2YzE3ZmQ4OTc4MDAwMTk0MmYxYw==\">從你的 Node.js 專案裡找出 Memory leak，及早發現、及早治療！</span> (這篇講得很詳細，另外還講到如何做壓力測試，值得一讀)</li>\n<li>其他有關 node Memory 相關的資訊：「 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQxNTM5OTYvaXMtdGhlcmUtYS1saW1pdC1vbi10aGUtc2l6ZS1vZi1hLXN0cmluZy1pbi1qc29uLXdpdGgtbm9kZS1qcw==\">Is there a limit on the size of a string in JSON with Node.js?</span> 」、「 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjAwMTg1ODgvaG93LXRvLW1vbml0b3ItdGhlLW1lbW9yeS11c2FnZS1vZi1ub2RlLWpz\">How to monitor the memory usage of Node.js?</span> 」</li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Frontend",
                "NodeJs",
                "javascript",
                "nodejs",
                "memory-leak"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Others/2021-08-14-tiling-window-management-%E5%B9%B3%E9%8B%AA%E5%BC%8F%E8%A6%96%E7%AA%97%E7%AE%A1%E7%90%86-amethyst-yabai/",
            "url": "https://z20240.github.io/Tech/Others/2021-08-14-tiling-window-management-%E5%B9%B3%E9%8B%AA%E5%BC%8F%E8%A6%96%E7%AA%97%E7%AE%A1%E7%90%86-amethyst-yabai/",
            "title": "Tiling Window Management - 平鋪式視窗管理 (Amethyst & Yabai)",
            "date_published": "2021-08-14T21:05:43.754Z",
            "content_html": "<h3 id=\"tiling-window-management-平鋪式視窗管理-amethyst-yabai\"><a class=\"anchor\" href=\"#tiling-window-management-平鋪式視窗管理-amethyst-yabai\">#</a> Tiling Window Management - 平鋪式視窗管理 (Amethyst &amp; Yabai)</h3>\n<h4 id=\"借鑑linux另一種視窗管理的思路\"><a class=\"anchor\" href=\"#借鑑linux另一種視窗管理的思路\">#</a> 借鑑 Linux，另一種視窗管理的思路</h4>\n<p><img data-src=\"1*VrezmQ_2bsHHCUSFxNm2kQ.png\" alt=\"\" /></p>\n<p>在 macOS 中，要做視窗管理不是依靠手動拖曳視窗邊角調整大小及位置，就是依靠其他視窗管理工具諸如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90dy9hcHAvbWFnbmV0L2lkNDQxMjU4NzY2P210PTEy\">Magnet</span> 或是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90dy9hcHAvbW9vbS9pZDQxOTMzMDE3MD9tdD0xMg==\">Moom</span> 這類快速調整視窗的小工具作為輔助。</p>\n<p>然而在每次開啟新的視窗的時候通常仍需要自己手動定位是窗的位置及大小，還是不太方便。</p>\n<p>另外當視窗一多起來，依然免除不了需要通過手勢「展開」來從茫茫視窗海中找尋所需要視窗的痛苦。</p>\n<blockquote>\n<p>MacOS 本身的視窗管理能力是有目共睹的混亂。</p>\n</blockquote>\n<p><img data-src=\"1*9swWR0x1rBw6aDOhFwLACQ.gif\" alt=\"通常視窗一多就會擠在一起，macOS 用戶就必須通過「展開」來從茫茫程式海中找尋\" /></p>\n<p>通常視窗一多就會擠在一起，macOS 用戶就必須通過「展開」來從茫茫程式海中找尋</p>\n<p>今天要介紹的「平鋪式視窗管理」不同於 macOS 一般預設的視窗管理機制，其特色則是：「 <em>盡可能地將所有視窗依照設定好的規則展開，</em> 並且 <strong>避免視窗重疊</strong> 在一起。」</p>\n<p>如此更能讓人一目瞭然現在桌面上有哪些視窗。</p>\n<p><img data-src=\"1*TXuDJEdkIjdJll5Xs2wZ2w.png\" alt=\"所有視窗都展開來\" /></p>\n<p>所有視窗都展開來</p>\n<p>當開啟新的視窗的時候視窗管理工具就會自動依照規則做好佈局，免除了視窗蓋來蓋去的問題。</p>\n<p><img data-src=\"1*5NPkQIS5TR09HiaxkU6Bwg.gif\" alt=\"通常當視窗只有一個的時候會預設展開到最大，之後以二分法的方式分隔空間\" /></p>\n<p>通常當視窗只有一個的時候會預設展開到最大，之後以二分法的方式分隔空間</p>\n<p>Tiling Window Management 中最為人熟知的就是 Linux 下 i3 的視窗管理了。其自動排列視窗、平鋪視窗的特性讓許多人即使離開了 Linux 也念念不忘。</p>\n<p>因此身為 Unix Like 的 MacOS 當然也一定會有人想要移植這樣一套方便的視窗管理工具。</p>\n<p>今天就主要介紹兩款網路上比較常見的 Tiling Window Management 套件。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0\">Amethyst</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFp\">Yabai</span></li>\n</ul>\n<p>這兩個套件都是 Open Source 的，因此都可以在 Github 上找到。</p>\n<p>其中 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0\">Amethyst</span> 是比較簡單容易上手的；而 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFp\">Yabai</span> 更適合進階使用者使用。</p>\n<p>為了簡單講解，接下來都會以 TWM 作為 Tiling Window Management 的縮寫。</p>\n<h3 id=\"amethyst\"><a class=\"anchor\" href=\"#amethyst\">#</a> Amethyst</h3>\n<p><img data-src=\"1*qFXBBoqP39Bv_aTtmSmOUw.png\" alt=\"\" /></p>\n<p>Amethyst 是一個非常容易入門的 TWM， 並且提供了非常多樣的視窗佈局可供選擇。</p>\n<p><img data-src=\"1*zzg2M4dVZZYvVsgFEPC_Yg.png\" alt=\"\" /></p>\n<p>基本上安裝好 Amethyst 之後我們不需要做其他額外的設定即可開始使用。</p>\n<p>Amethyst 擁有非常多樣的快捷鍵可以設定。通過簡單的快捷鍵我們可以很容易地操控各個視窗。</p>\n<p><img data-src=\"1*inR_OfCObjnbxZIX-srkaA.png\" alt=\"\" /></p>\n<p>非常適合想要開箱即用的使用者。</p>\n<p><img data-src=\"1*iES9yQoVnwQGxsKoHhE2uQ.gif\" alt=\"利用設定好的快捷鍵，可以很容易地操控佈局中的視窗\" /></p>\n<p>利用設定好的快捷鍵，可以很容易地操控佈局中的視窗</p>\n<p>但是缺點也很明顯，我列舉了幾個觀察到的缺點如下：</p>\n<ul>\n<li><strong>沒有辦法客製化自己的佈局</strong></li>\n</ul>\n<p>這其實並不是什麼大問題， Amethyst 提供了許許多多的佈局種類，基本上可以滿足絕大多數使用者的需求。然而若是對佈局方式比較有自己想法的人，Amethyst 這部分可能就無法滿足。</p>\n<ul>\n<li><strong>視窗只能水平縮放、不能垂直縮放</strong></li>\n</ul>\n<p>Amethyst 採用「主要視窗」與「次要視窗」的概念。</p>\n<p>其中僅有「主要視窗」可以進行水平縮放 (依然無法垂直縮放)</p>\n<p><img data-src=\"1*HKWfSFdae-qERrku4XnJKA.gif\" alt=\"\" /></p>\n<p>以上面的 gif 為例，右側的 Terminal 就會顯得非常的狹小，其實並不利於使用。</p>\n<ul>\n<li><strong>能夠使用的功能已經被 Amethyst 定死，僅能使用熱鍵提供綁定的功能，無法另外設定其他功能。</strong></li>\n</ul>\n<p>這是所有開箱即用的小工具都一定會有的軟肋。畢竟要讓人簡單上手，一定就是要設定越少越好。這應該算是一種妥協吧～。</p>\n<h4 id=\"安裝\"><a class=\"anchor\" href=\"#安裝\">#</a> 安裝</h4>\n<p>Amethyst 的安裝非常簡單，僅需要使用 brew ，一行指令即可。</p>\n<pre><code>brew install --cask amethyst\n</code></pre>\n<p>安裝完後，會在 Application Perference 中出現一個 app ，開啟後即可開始使用。</p>\n<p><img data-src=\"1*i_uezLMOZqgIPNsnrzKkmQ.png\" alt=\"\" /></p>\n<h3 id=\"yabai\"><a class=\"anchor\" href=\"#yabai\">#</a> Yabai</h3>\n<p><img data-src=\"1*Ciz6Od9ySfrVtkiEs72l_w.png\" alt=\"\" /></p>\n<p>相較於 Amethyst 開箱即用， Yabai 走在另一個極端。</p>\n<p>Yabai 僅僅提供了一套完整 TWM 的指令集框架來操控視窗。使用者需要自行撰寫熱鍵設定、功能腳本來達到想要的結果。但也因為如此 Yabai 給予了極高的可設定彈性。</p>\n<p>舉個例子，若是想要將視窗延展到最大，Yabai 需要使用以下指令完成。</p>\n<pre><code>yabai -m window --toggle zoom-fullscreen\n</code></pre>\n<p>然而若是每次要執行一個動作就必須使用一次指令，這是極度不切實際的。</p>\n<p>因此通常使用者會搭配一套叫做 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=\">skhd</span> 的快捷鍵管理程式，設定自己的快捷鍵映射到 Yabai 的指令。</p>\n<p>還好網路上充斥著各路高手自行設定的 TWM 腳本設定，對於剛接觸的新手而言也大大了降低了入門的難度。</p>\n<p>網路上有人說使用 Yabai 需要關閉 MacOS 的 System Integrity Protection 功能，但是其實這只是 Optional 。除非我們需要「更加進階的用法」不然一般的情況下依然可以很良好的使用。</p>\n<p>我個人很推薦先從這個 Youtuber 的 Yabai 介紹開始下手，他不僅展示了他自己的 Yabai ，還丟出了自己的設定檔跟設定教學。算是非常完整的簡易入門。</p>\n<p><a href=\"https://www.youtube.com/watch?v=JL1lz77YbUE\"><img data-src=\"702b_hqdefault.jpg\" alt=\"Yabai - Tiling Window Manager for Mac [ Tutorial ]\" title=\"Yabai - Tiling Window Manager for Mac [ Tutorial ]\" /></a></p>\n<h4 id=\"安裝-2\"><a class=\"anchor\" href=\"#安裝-2\">#</a> 安裝</h4>\n<p>為了良好的 Yabai 體驗，需要安裝 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFpL3dpa2k=\">yabai</span> 與 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=\">skhd</span> 兩個 cli 套件。</p>\n<p>由於我本人並不想關閉 MacOS 的 System Integrity Protection ，因此以下的安裝流程會是以不關閉 MacOS 的 System Integrity Protection 為主。</p>\n<ul>\n<li>安裝 Yabai</li>\n</ul>\n<pre><code>brew install koekeishiya/formulae/yabai\n</code></pre>\n<ul>\n<li>安裝 jq （這是一個 Json 的可視化 cli ，讓我們可以在 terminal 中容易的操控 JSON 物件）</li>\n</ul>\n<pre><code>brew install jq\n</code></pre>\n<ul>\n<li>安裝 skhd (快捷鍵的設定套件)</li>\n</ul>\n<pre><code>brew install koekeishiya/formulae/skhd\n</code></pre>\n<p>三個都安裝完之後，你需要設定  <code>.yabairc</code>  以及  <code>.skhdrc</code>  檔案。</p>\n<p>其中  <code>.yabairc</code>  是 yabai 的設定檔；而  <code>.skhdrc</code>  則是 skhd 設定快捷鍵的設定檔。</p>\n<p>你可以將 .yabairc 與 .skhdrc 放置在家目錄 $HOME 中，或是在 .config 中建立各自的 config folder 都可以。</p>\n<p>我自己是將設定檔都 git 包成一包，放在 .config 中，並且使用  <code>ln -s</code>  軟連結到家目錄了。</p>\n<p>如果不嫌棄，也可以使用我的設定</p>\n<pre><code>// git 下載我的 yabai 設定到 .config/yabai\n$ git clone https://github.com/z20240/yabai.git &quot;$&#123;HOME&#125;&quot;/.config/yabai\n// 軟連結 .config/yabai 中的 yabairc 設定到家目錄\n$ ln -s &quot;$&#123;HOME&#125;/.config/yabai/yabai/yabairc&quot; &quot;$&#123;HOME&#125;/.yabairc&quot;\n</code></pre>\n<p>主要實現功能有以下這些</p>\n<ul>\n<li>新增的視窗依照目前的關注位置分割</li>\n</ul>\n<p><img data-src=\"1*ieNyG9uhzw66lGXrjyxNKQ.gif\" alt=\"\" /></p>\n<ul>\n<li>使用快捷鍵水平 / 垂直縮放視窗</li>\n</ul>\n<p><img data-src=\"1*5ZVbxolpIuH9BY8FK4PBIg.gif\" alt=\"\" /></p>\n<ul>\n<li>滑鼠拖動即可調整視窗大小</li>\n</ul>\n<p><img data-src=\"1*3B9-BHm02eQC4mlV_Uh7dg.gif\" alt=\"\" /></p>\n<ul>\n<li>滑鼠拖動到視窗的邊側，可置換視窗到其位置</li>\n</ul>\n<p><img data-src=\"1*vOsem0TohjoiQyRwj__IYA.gif\" alt=\"\" /></p>\n<ul>\n<li>滑鼠拖動可以到視窗中央，可以堆疊這兩個視窗</li>\n</ul>\n<p><img data-src=\"1*0-vM8MdNwqYIa38cHmDIqw.gif\" alt=\"\" /></p>\n<ul>\n<li>快速變換焦點視窗</li>\n</ul>\n<p><img data-src=\"1*PiIo2aasyB15nf1zbMWO9w.gif\" alt=\"\" /></p>\n<ul>\n<li>快速對換視窗</li>\n</ul>\n<p><img data-src=\"1*TZbmWNgQkEmsZmol6fSdnw.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵放大 / 縮小視窗</li>\n</ul>\n<p><img data-src=\"1*uA-p4IlvU3hOKYDsQFy8qg.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵將視窗丟到其他工作區</li>\n</ul>\n<p><img data-src=\"1*k770qOtVklQZxhr0j7aCew.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵將視窗脫離 TWM，並且在這樣的狀況下依然可以快速排列視窗</li>\n</ul>\n<p><img data-src=\"1*rf5sUpiqjZXPuJFW_-TiXQ.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵將視窗與其他視窗堆疊，以堆疊的形式整理視窗</li>\n</ul>\n<p><img data-src=\"1*--6z5M0BwxkCgclrwDuYsQ.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵旋轉目前的佈局樣式</li>\n</ul>\n<p><img data-src=\"1*RHb6p3zEYN6GIVtXhQvtUg.gif\" alt=\"\" /></p>\n<p>另外，關於 stack 堆疊的效果，我額外使用了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FkYW1XYWduZXIvc3RhY2tsaW5l\">stackline</span> 的小圖示特效。</p>\n<p>他可以更好地將目前有堆疊狀態的視窗給顯示出來，有效的降低了忘記視窗存在的狀況。</p>\n<p>目前我主要就是使用這些功能，未來如果有想到什麼需要的功能會繼續更新在設定檔中。</p>\n<h3 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h3>\n<p>TWM 的使用體驗是真的優於以往的視窗管理方法。</p>\n<p>他更有效率地整理雜亂無章的視窗佈局，大大提高了我們在視窗之間游移速度，並且減少了許多記憶視窗位置的心智負擔。</p>\n<p>至於對於到底該使用 Amethyst 或是 Yabai？</p>\n<p>我認為這完全是個人喜好問題。</p>\n<p>真要給點意見的話，我個人認為從 Amethyst 開始入門是一個不錯的起手式。</p>\n<p>畢竟我就是在 Amethyst 玩一段時間後開始發現 Amethyst 的不足並且決定跳槽到 Yabai。</p>\n<blockquote>\n<p>就像是發現了新大陸一般，著實被 Yabai 的強大給折服。</p>\n</blockquote>\n<p>通過 skhd 搭配 Yabai 的設定，我們幾乎可以做到任何想得到的快捷鍵用法設定。剩下的只有「想不想得到」而沒有「做不做得到」的問題了。</p>\n<h3 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0\">Amethyst</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZA==\">Yabai</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k\">skhd</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubm90aW9uLnNvL1lhYmFpLThkYTNiODI5ODcyZDQzMmZhYzQzMTgxYjdmZjYyOGZj\">Yabai-note</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FkYW1XYWduZXIvc3RhY2tsaW5l\">stackline</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibGFuYm9vbS5vcmcvMjAxOS95YWJhaS8=\">用于 macOS 平铺式窗口管理器 — yabai</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Others",
                "tiling-window-manager",
                "yabai"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Linux/2021-06-07-%E9%97%9C%E6%96%BC-selinux-policy/",
            "url": "https://z20240.github.io/Tech/Linux/2021-06-07-%E9%97%9C%E6%96%BC-selinux-policy/",
            "title": "關於 SELinux Policy",
            "date_published": "2021-06-07T11:22:50.189Z",
            "content_html": "<h3 id=\"關於-selinux-policy\"><a class=\"anchor\" href=\"#關於-selinux-policy\">#</a> 關於 SELinux Policy</h3>\n<p>最近工作上需要研究一下 Red Hat 這款 Linux，在其上進行 k8s 安裝時，發現其對於 service 的檔案存取跟 Ubuntu, Debian 這類的 Linux 有些許不同。其中多了一層叫做 SELinux 的 Policy 作為權限存取的保護，因此花了一些時間好好的來了解一下這個 SELinux Policy 是什麼東西。</p>\n<h4 id=\"簡介\"><a class=\"anchor\" href=\"#簡介\">#</a> 簡介</h4>\n<p>SELinux 全稱 (Security-Enhanced Linux) 是一個 Linux core 的 module ，算是一個 Linux 的安全子系統，主要存在 fedora base 的 Linux 中。現在以 CentOS, Red Hat 這幾款 Linux 比較常見。</p>\n<p>SELinux 主要作用是「最大限度地減小系統中可訪問的資源」、能不開放的就不開放（最小權限原則）。</p>\n<p>為什麼會需要 SELinux 呢？主要是基礎的 Linux 在檔案存取的權限控管上總有一些不足之處。</p>\n<h4 id=\"一般-linux-權限管理的問題\"><a class=\"anchor\" href=\"#一般-linux-權限管理的問題\">#</a> 一般 Linux 權限管理的問題</h4>\n<p>一般 Linux 權限管理通常只有兩個級別：  <code>root</code>  與  <code>user</code>  ，當中難以實現更小的權限管理概念。但是這兩個級別的權限又常常會互相賦予。</p>\n<p>例如 Linux 允許用戶或程式將不安全的檔案權限賦予他人，或反過來存取系統正在正常運作下「無須存取的部分」。</p>\n<ul>\n<li>root 無法控制 user ： user 可以把「誰都可以讀取的權限」給予敏感的檔案 ex. ssh 金鑰常放置在～/.ssh 目錄。</li>\n<li>process 可以更改安全性的屬性：每位 user 的郵件應該只供此用戶讀取，但是客戶端的 application 有能力將其改為誰都能讀取。</li>\n<li>process 可以繼承用戶的權限：我們假設某個 service 被木馬程式所佔用，他可能存取 user 的 ssh key 或是其他不該擁有權限存取的檔案。</li>\n</ul>\n<p>簡言之，傳統的 Linux 無法簡易地實施最小權限的理念。很多由 root 啟動的 process 最終都會使用「受限制的用戶身份」來運行、存取用戶的檔案；有些則會在 chroot 的情況下執行。</p>\n<h4 id=\"selinux-解決方案\"><a class=\"anchor\" href=\"#selinux-解決方案\">#</a> SELinux 解決方案</h4>\n<p>SELinux 預設使用 <strong>enforcing</strong> 情況下，一切的存取要求都會先被拒絕。</p>\n<p>接下來使用一系列的「例外政策」來允許系統的每個元素 (service, process, user, …etc) 運作所需要的存取權。 <strong>當一個元素嘗試存取或修改他不須用的檔案或資源的時候，她的請求就會被拒絕。</strong> 並且這個行為會被記錄下來 (預設放置在  <code>/var/log/audit/audit.log</code>  )。</p>\n<h4 id=\"selinux-的工作原理\"><a class=\"anchor\" href=\"#selinux-的工作原理\">#</a> SELinux 的工作原理</h4>\n<p>SELinux 主要有三大部分</p>\n<p><strong>工作模式</strong></p>\n<ul>\n<li>enforcing：強制模式，依據設定來限制檔案資源存取。</li>\n<li>Permissive：寬容模式，不限制檔案資源存取，但仍會依據設定檢查並記錄相關訊息。</li>\n<li>Disabled：停用 SELinux。</li>\n</ul>\n<p><strong>工作類型</strong></p>\n<ul>\n<li>strict：每個 process 都受到限制</li>\n<li>targeted：限制大部分網路的服務 (Red Hat 7 default 是這個)</li>\n<li>minimum：限制部分的網路服務 (CentOS 7 default 是這個)</li>\n<li>mls：多級安全限制</li>\n</ul>\n<p><strong>安全上下文 (Security context)</strong></p>\n<p>在 SELinux 中，我們可以使用  <code>ls -Z</code>  或  <code>ps -eZ</code>  查看到檔案目錄或是 process 的 security context.</p>\n<p>process 或 檔案目錄的 security context 必須對應才能存取。</p>\n<p><img data-src=\"1*o4gpFTbf0gWP-KWY-CnxZQ.png\" alt=\"\" /></p>\n<p>我們可使用  <code>sestatus</code>  查看目前 SELinux 的工作狀態</p>\n<p><img data-src=\"1*sm2kXbOKHi7OHowp5KQfAg.png\" alt=\"\" /></p>\n<p>SELinux 會依照「工作模式」、「工作類型」制定不同的策略，並且去比對 process 或是目錄檔案的 security context ，如果對應才會去比對 Linux 的 RWX 權限，否則就 reject。</p>\n<p><img data-src=\"1*4JcEry75wMdLTp2wkWOSEQ.png\" alt=\"[www.Linuxidc.com](http://www.Linuxidc.com)\" /></p>\n<p>一般來說，我們該隨意地去更動「工作類型」或「工作模式」。</p>\n<p>因此主要都是修改目錄檔案或是 process 的 <strong>security context</strong> 來符合 SELinux 規範。</p>\n<p>security context 主要以以下 5 個字段利用「：」做為分隔符號構成。</p>\n<p>分別代表的涵意如下：</p>\n<ul>\n<li>user：身份識別；「undefined_u：不受限的用戶或文件」、「system_u：受限的 process 或文件」</li>\n<li>role：角色 ；「object_r：文件」、「sytsme_r：process 或 user」</li>\n<li>type：代表數據類型，決定何種類型的 process 可以訪問何種的文件</li>\n<li>sensitivity：安全級別，s0 最低級別 （只有在 mls 類型下會用到）</li>\n<li>category：劃分的不同分類</li>\n</ul>\n<p>另外，我們可以藉由安裝  <code>setools-console.x86_64</code>  來獲得操控 selinux 的指令：</p>\n<ul>\n<li>seinfo</li>\n<li>sesearch</li>\n</ul>\n<pre><code>sudo yum install setools-console.x86_64\n</code></pre>\n<p>藉由以下幾個指令，我們可以得知 SELinux 有哪些種類的字段。</p>\n<pre><code>seinfo -u # 查詢所有的 user 字段 (8個)\nseinfo -r # 查詢所有的 role 字段 (14個)\n</code></pre>\n<p>另外我們可以使用 sesearch -A 查詢什麼類型的 process 可以什麼 type 的 file。</p>\n<pre><code>sesearch -A -s [type] # 查詢 type 的 process 能夠讀取的文件類型\n</code></pre>\n<p><img data-src=\"1*-S0VPmREwFR2J6GZrnWu3A.png\" alt=\"\" /></p>\n<h4 id=\"修改當前的-context\"><a class=\"anchor\" href=\"#修改當前的-context\">#</a> 修改當前的 context</h4>\n<p>可以使用  <code>chcon</code>  手動修改 <strong>security context</strong> 。</p>\n<pre><code>chcon [option] target\n\nchcon -t # 修改 context 的 type\nchcon -u # 修改 context 的 user\nchcon -r # 修改 context 的 role\nchcon -l # 修改 context 的 sensitivity level\nchcon -R # Recirsive target 下所有目錄結構修改\n</code></pre>\n<h4 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h4>\n<p>SELinux Policy 是一個增強 Linux 安全性的措施。</p>\n<p>我們應該盡量確保一個 process 僅能存取其所需要的檔案與目錄結構。</p>\n<p>另外，我們若要開放存取也應該使用 chcon -t 修改標籤的方式去將目標檔案對 process 類型做匹配，而非直接暴力修改 chmod 或是 chroot 開放資源的權限。</p>\n<p>這篇文章只是很基礎的 SELinux 介紹，以下的參考資料會更加完整與詳細，有興趣可以就這幾篇文章查看，相信會有更完整的認識。</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmNlbnRvcy5vcmcvemgtdHcvSG93VG9zL1NFTGludXg=\">CentOS Wiki — SELinux</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGludXhpZGMuY29tL0xpbnV4LzIwMTgtMDgvMTUzNDU0Lmh0bQ==\">Linux 公社 — SELinux</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ra25ld3MuY2MvemgtdHcvY29kZS9qbW4zbDU2Lmh0bWw=\">每日頭條 — 一文徹底明白 SELinux</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eF9hdG9taWNfaG9zdC83L2h0bWwvZ2V0dGluZ19zdGFydGVkX3dpdGhfa3ViZXJuZXRlcy9nZXRfc3RhcnRlZF9wcm92aXNpb25pbmdfc3RvcmFnZV9pbl9rdWJlcm5ldGVz\">Red Hat — CHAPTER 2. GET STARTED PROVISIONING STORAGE IN KUBERNETES</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eF9hdG9taWNfaG9zdC83L2h0bWwvY29udGFpbmVyX3NlY3VyaXR5X2d1aWRlL2RvY2tlcl9zZWxpbnV4X3NlY3VyaXR5X3BvbGljeQ==\">Red Hat — CHAPTER 6. DOCKER SELINUX SECURITY POLICY</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Linux",
                "linux",
                "rhel",
                "selinux",
                "tech"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Data%20Storage/2021-05-16-sql-mysql-postgresql-%E8%88%87-mongodb-%E5%A6%82%E4%BD%95%E5%A4%A7%E9%87%8F%E7%94%A2%E7%94%9F%E6%B8%AC%E8%A9%A6%E8%B3%87%E6%96%99/",
            "url": "https://z20240.github.io/Tech/Data%20Storage/2021-05-16-sql-mysql-postgresql-%E8%88%87-mongodb-%E5%A6%82%E4%BD%95%E5%A4%A7%E9%87%8F%E7%94%A2%E7%94%9F%E6%B8%AC%E8%A9%A6%E8%B3%87%E6%96%99/",
            "title": "SQL MySQL, PostgreSQL 與 MongoDB 如何大量產生測試資料",
            "date_published": "2021-05-16T11:02:14.778Z",
            "content_html": "<h3 id=\"sql-mysql-postgresql-與-mongodb-如何大量產生測試資料\"><a class=\"anchor\" href=\"#sql-mysql-postgresql-與-mongodb-如何大量產生測試資料\">#</a> [SQL] MySQL, PostgreSQL 與 MongoDB 如何大量產生測試資料</h3>\n<h4 id=\"dummy-data-test-data-mongo-mysql-postgresql\"><a class=\"anchor\" href=\"#dummy-data-test-data-mongo-mysql-postgresql\">#</a> Dummy data, Test data, mongo, mysql, postgresql.</h4>\n<p>在網頁前端的領域，工程師常常使用 <strong>lorem</strong> 這種「不具意義」的文字作為排版的測試。</p>\n<p>在後端領域，我們時常也需要資料庫中有「大量但並不需要具有真實意義的資料」也就是所謂的 dummy data，供我們的程式能夠進行測試。</p>\n<p>網路上有很多可以產生 dummy data 的網站，可以讓人很輕鬆的產生大量的資料供使用者測試跟使用。</p>\n<p>但是，其實我們可以直接使用簡單的 SQL 就達成這樣的目的，無需再去網路上找尋這種 dummy data generator.</p>\n<p>以下針對 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcv\">PostgreSQL</span> 、 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXlzcWwuY29tLw==\">MySQL</span> 跟 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vY2xvdWQvYXRsYXMvbHAvdHJ5Mg==\">MongoDB</span> 三種比較常見的 Database 提供 dummy data generate 的語法。</p>\n<h4 id=\"postgresql\"><a class=\"anchor\" href=\"#postgresql\">#</a> PostgreSQL</h4>\n<p>我們先 Create 一個空 table 作為講解使用。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- Create a table `users`</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> users  <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    id uuid <span class=\"token keyword\">DEFAULT</span> uuid_generate_v4 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    email <span class=\"token keyword\">VARCHAR</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>基本思路是，利用 PostgreSQL 內建的  <code>generate_series</code>  指令，產生大量的流水號，再利用流水號的數量塞入 random 的資料進資料庫。</p>\n<p>細節的指令可以查看以下的語法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- random 10,000 data.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> users <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">SELECT</span> md5<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> CONCAT<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@xxx.com'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">FROM</span> generate_series<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>檢查一下是否真的塞入了 10000 筆資料了。</p>\n<p><img data-src=\"1*5I9wbUun0tnHjHOiebc06Q.png\" alt=\"\" /></p>\n<h4 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> MySQL</h4>\n<p>MySQL 沒有像 PostgreSQL 的 generate_series 這樣方便的工具，因此我們要自己寫。</p>\n<p>假設我們一樣需要 10,000 筆的資料，基本思路如下：</p>\n<ol>\n<li>我們先建立一張擁有流水號 1 ~ 10,000 的臨時表，可以使用 in-memory table。</li>\n<li>基於 select 這個臨時表來 insert dummy data.</li>\n</ol>\n<p>那麼問題就簡化到，我們該怎麼建立這樣的臨時表呢？</p>\n<p>網路上有幾種方法。第一種是使用  <code>store procedure</code>  ；其二就是我今天想介紹的作法：直接使用 python, node 這種小程式 <strong>一行創建</strong> 。</p>\n<p><strong>創建臨時表 table</strong></p>\n<pre><code>CREATE TABLE tmp_table (id INT,  PRIMARY KEY (id)) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4;\n</code></pre>\n<p>幫臨時表 insert 10000 筆的流水號的文件，作為準備。</p>\n<p>Python Version:</p>\n<pre><code>python -c 'print(&quot;id&quot;)\nfor i in range(1, 1+10000): print(i)' &gt; base.csv\n</code></pre>\n<p>NodeJs Version:</p>\n<pre><code>node -e 'console.log(&quot;id&quot;); for(let i=1; i&lt;=10000; i++) console.log(i);' &gt; base.csv\n</code></pre>\n<p>從 base.txt 導入數據到剛剛的臨時表</p>\n<pre><code>mysql&gt; load data infile '/Your/file/path/base.txt' replace into table tmp_table;\n</code></pre>\n<p>確認一下是否有成功導入</p>\n<p><img data-src=\"1*u7tqvIP1aNErGnjuZjRcdg.png\" alt=\"\" /></p>\n<p>接下來我們就能利用這個流水表，創建隨機資料了。</p>\n<p>一樣使用剛剛 Create 資料表的語法創建一個 table 當作目標 table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- Create a table `users`</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>users<span class=\"token punctuation\">`</span></span>  <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">binary</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>email<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下來就可以使用  <code>tmp_table</code>  塞入大量的 random data.</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- random 10,000 data.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> users <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">SELECT</span> uuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> md5<span class=\"token punctuation\">(</span><span class=\"token keyword\">LEFT</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> CONCAT<span class=\"token punctuation\">(</span><span class=\"token keyword\">LEFT</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@xxx.com'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">FROM</span> tmp_table<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"mongodb\"><a class=\"anchor\" href=\"#mongodb\">#</a> MongoDB</h4>\n<p>mongodb 要產生 dummy data 很簡單。</p>\n<p>我們只需要使用 forloop 即可產生我們想要的數量。</p>\n<pre><code>mongo&gt; for (var i = 1; i &lt;= 10000; i++) db.users.insert( &#123; name : UUID(), email: UUID() + &quot;@mail.com&quot; &#125; );\n</code></pre>\n<p>接下來檢查看看，是否真的有 10000 筆資料。</p>\n<p><img data-src=\"1*TvJnGY8LvtvZok6MRDLg9g.png\" alt=\"\" /></p>\n<h4 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h4>\n<p>最近公司開始往大數據的開發方向靠攏，許許多多的程式開發都希望能夠擁有支持大數據處理的能力。</p>\n<p>因此在 local side 如果也能夠建立足夠的數據量，對於 local 的開發會更加單純方便。</p>\n<p>本文整理了幾個比較常見資料庫的產生 dummy data 的方式，除了作為紀錄，也希望能夠幫助到有需要的人。</p>\n<p>另外小小抱怨一下： <em>MySQL 產生 dummy data 的方式真的是有夠麻煩。</em></p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbmR5eW91LmdpdGh1Yi5pby8yMDE0LzAxLzI5L21vbmdvZGItbm90ZXMv\">MongoDB 快速入門筆記</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODQ3OTQ1NTg0NjQ3I2Zyb21IaXN0b3J5\">MySQL 快速创建千万级测试数据</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQ4NDExNDIvaG93LWNhbi1pLWdlbmVyYXRlLWJpZy1kYXRhLXNhbXBsZS1mb3ItcG9zdGdyZXNxbC11c2luZy1nZW5lcmF0ZS1zZXJpZXMtYW5kLXJhbmQ=\">How can I generate big data sample for Postgresql using generate_series and random?</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Data Storage",
                "mysql",
                "postgresql",
                "mongodb"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/2021-02-09-front-end-emmet-%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E9%96%8B%E7%99%BC%E7%9A%84%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/",
            "url": "https://z20240.github.io/Tech/Frontend/2021-02-09-front-end-emmet-%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E9%96%8B%E7%99%BC%E7%9A%84%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/",
            "title": "Front-end Emmet , 前端快速開發的神兵利器",
            "date_published": "2021-02-09T09:41:20.740Z",
            "content_html": "<h3 id=\"front-end-emmet-前端快速開發的神兵利器\"><a class=\"anchor\" href=\"#front-end-emmet-前端快速開發的神兵利器\">#</a> [Front-end] Emmet , 前端快速開發的神兵利器</h3>\n<h4 id=\"一個-snapchat-標準庫只需要少少的記憶就可以大大提升html-css-的撰寫效率\"><a class=\"anchor\" href=\"#一個-snapchat-標準庫只需要少少的記憶就可以大大提升html-css-的撰寫效率\">#</a> 一個 Snapchat 標準庫，只需要少少的記憶，就可以大大提升 HTML、CSS 的撰寫效率</h4>\n<p>VSCode 最近的更版對於 Emmet 的支持更加完整了，因此決定來寫一篇文章介紹 Emmet 。</p>\n<p><img data-src=\"0*4D_q0c3hxHQcjjYE.gif\" alt=\"[https://code.visualstudio.com/updates/v1_53](https://code.visualstudio.com/updates/v1_53)\" /></p>\n<p>身為 web engineer ，在寫 HTML 的時候總是要打那煩人的左右角括號，並且還要在每個標籤結尾寫上結尾標籤，著實麻煩。</p>\n<p>emmet 就是為了我們這種懶人發明的一鍵 HTML 產生器！</p>\n<p>我們只需要依照著 Emmet 的規則，編寫我們想要的 html 結構，之後按下 「Tab」，Emmet 就會自動幫我產生相對應的 HTML Code ！</p>\n<p>就像上面的那張 GIF 展示的那樣～</p>\n<p><a href=\"https://docs.emmet.io/\"><strong>Emmet Documentation</strong></a><br />\n<a href=\"https://docs.emmet.io/\"><em>Emmet is a web-developer's toolkit that can greatly improve your HTML &amp; CSS workflow: Basically, most text editors out…</em> docs.emmet.io</a></p>\n<p>Emmet 的語法很簡單也不多，且很多規則跟 CSS 的選擇器語法很相近。對於會寫 CSS 的人來說，幾乎是無痛學習。</p>\n<p>以下就來針對 Emmet 的語法介紹一下。</p>\n<p><strong>元素標籤 + Tab</strong></p>\n<p>emmet 的使用方法就是，打好一串表達語法之後，按下「Tab」，就會自動轉換成相對應的 HTML 了。</p>\n<p><img data-src=\"1*4l8SN32JJqXAjF-RKnexwg.gif\" alt=\"\" /></p>\n<p><strong>使用 &quot;!&quot; 一鍵生成 HTML 結構</strong></p>\n<p>emmet 可以使用 &quot;!&quot; 一鍵生成 HTML Template，我們不用再自己從  <code>&lt;!DOCTYPE html&gt;</code>  開始一個字一個字敲打了。</p>\n<p><img data-src=\"1*bpP5Wasjp58bz3SeU2dT1g.gif\" alt=\"\" /></p>\n<p><strong>使用 &gt; 表示結構的「下一層」</strong></p>\n<p>像是 CSS 選擇器中，我們想要表達階層結構的時候，可以使用 &gt; 來選取子元素。Emmet 也可以使用 「&gt;」 來表示這種巢狀結構。</p>\n<p>例如：</p>\n<pre><code>div&gt;ul&gt;li\n</code></pre>\n<p>會展開成這樣</p>\n<pre><code>&lt;div&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;div&gt;\n</code></pre>\n<p><img data-src=\"1*IutHuFaDKyL83MZuxHwXNA.gif\" alt=\"\" /></p>\n<p><strong>使用 *N 代表要重複 N 次</strong></p>\n<p>例如，我們可以使用  <code>li*5</code>  讓他自動重複 5 次，產生五個  <code>&lt;li&gt;&lt;/li&gt;</code></p>\n<p><img data-src=\"1*UyCQppxtpLwqyTFLijikdA.gif\" alt=\"\" /></p>\n<p><strong>使用 + 表示結構的「同一層」</strong></p>\n<p>通常一個標準的 html 頁面需要有 header, main, footer 。這時候就可以用 + 很簡單地產生。</p>\n<pre><code>header+main+footer\n</code></pre>\n<p>會展開成</p>\n<pre><code>&lt;header&gt;&lt;/header&gt;\n&lt;main&gt;&lt;/main&gt;\n&lt;footer&gt;&lt;/footer&gt;\n</code></pre>\n<p><img data-src=\"1*-JvloFLYjqUzfVfZjkCG5g.gif\" alt=\"\" /></p>\n<p><strong><em>綜合練習</em></strong></p>\n<p>如果我想要產生如下的結構，該怎麼寫呢？</p>\n<pre><code>&lt;header&gt;&lt;/header&gt;\n&lt;main&gt;\n    &lt;article&gt;&lt;/article&gt;\n</code></pre>\n<p><em>寫法：  <code>header+main&gt;article+section*6</code> </em></p>\n<p><strong>使用 ^ 跳回上一層</strong></p>\n<p>我們可以使用 ^ 跳回到上一層，例如剛剛的例子，如果我們想要在  <code>main</code>  後面繼續接著寫 HTML 結構，我們就可以使用 ^ 來回到與 main 同一層的地方繼續往下串接我們的語法。</p>\n<pre><code>header+main&gt;article+section*6^footer\n</code></pre>\n<p>會展開成</p>\n<pre><code>&lt;header&gt;&lt;/header&gt;\n&lt;main&gt;\n    &lt;article&gt;&lt;/article&gt;\n</code></pre>\n<p><img data-src=\"1*rz00s3Dj25n2wbqTPovThQ.gif\" alt=\"\" /></p>\n<p>當然，如果我們想要往外多跳幾層，我們只需要多重複幾次 ^ 即可。</p>\n<p><img data-src=\"1*sF0HVT8G5gfOwiCeToBNCg.gif\" alt=\"\" /></p>\n<p><strong>使用 ( ) 將結構分塊，增加可讀性</strong></p>\n<p>由於 Emmet 的語法轉換器，是一次 parse 這一連串的字串，因此不允許語法中存在空格，但這也讓在撰寫這表達式的時候可讀性不佳。此時我們可以使用 ( ) 來為結構分塊。</p>\n<p>以上方的例子來說，我們就可以改寫成下方這樣</p>\n<pre><code>header+(main&gt;nav&gt;ul&gt;li*4)+article+section*3+footer\n</code></pre>\n<p><img data-src=\"1*c2jZ3I4MSQQAv8S2lGwHqw.gif\" alt=\"\" /></p>\n<p><strong>使用。表示 class / # 表示 ID / [] 表示其他屬性 / {} 表示標籤之間的內容</strong></p>\n<p>Emmet 一樣支援標籤內的屬性描述。</p>\n<p>例如最常見的 &lt;a&gt; 標籤，我們就可以給他額外的屬性</p>\n<pre><code>a.link#customLink[src='test.png' alt='test']&#123;This is a test link&#125;\n</code></pre>\n<p>會自動展成這樣</p>\n<pre><code>&lt;a href=&quot;&quot; class=&quot;link&quot; id=&quot;customLink&quot; src=&quot;test.png&quot; alt=&quot;test&quot;&gt;This is a test link&lt;/a&gt;\n</code></pre>\n<p><img data-src=\"1*xYvBbURns_-f3w08g1zVLg.gif\" alt=\"\" /></p>\n<p><strong>使用 $ 可以自動記數</strong></p>\n<p>有些時候，我們希望 class 的名稱能夠照著數字順序給，這個時候，可以使用 $ 讓他 auto incremental</p>\n<pre><code>li.class$*5\n</code></pre>\n<p>會展開成</p>\n<pre><code>&lt;li class=&quot;class1&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class2&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class3&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class4&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class5&quot;&gt;&lt;/li&gt;\n</code></pre>\n<p>當然我們也可以多給幾個 $，來代表要「幾位數」</p>\n<p><img data-src=\"1*A_2TRu4IpBPa6kiqKd5gEA.gif\" alt=\"\" /></p>\n<p><strong>使用 @ 給予起始值</strong></p>\n<p>剛剛的例子中，我們也可以不要從 1 開始，使用 @ 可以指定一個起始數字。</p>\n<p><img data-src=\"1*zYGPsvtn0yFucRQvweP-Ug.gif\" alt=\"\" /></p>\n<p><strong>使用 - 來倒著數回去</strong></p>\n<p>這基本上很少使用到，但是還是說一下。我們除了順著數，也可以倒著屬回去。</p>\n<p>一樣以剛剛的 li 為例，我們如果在 @ 後面多增加一個 「-」，就可以讓數字由大到小排列。</p>\n<pre><code>li.class$@-10*30\n</code></pre>\n<p>會展開成</p>\n<pre><code>&lt;li class=&quot;class39&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class38&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class37&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class36&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class35&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class34&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class33&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class32&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class31&quot;&gt;&lt;/li&gt;\n&lt;li class=&quot;class30&quot;&gt;&lt;/li&gt;\n....\n</code></pre>\n<p><img data-src=\"1*ZVzYUKvGMGxVSMVBeFAM3Q.gif\" alt=\"\" /></p>\n<p>當然，我們也可以一般地使用 (不設定起始數字)</p>\n<p><img data-src=\"1*raTa4R7FKI8NlWqPNXw6Tg.gif\" alt=\"1*raTa4R7FKI8NlWqPNXw6Tg.gif\" /></p>\n<p>Emmet 的功能很強大，但是其實語法都是有邏輯可以依循的，學起來感覺並不會太困難。</p>\n<p>如果記不起來也沒關係，以下已經幫忙提供了一份小抄。</p>\n<p><a href=\"https://docs.emmet.io/cheat-sheet/\"><strong>Emmet Documentation</strong></a></p>\n<h4 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h4>\n<p>Emmet 真的是懶人工程師的一大利器，我個人認為以這學習成本極低的情況，多了解一項也並非壞事。</p>\n<p>而且也僅需要敲打少少的文字，就能產生好整份 HTML 結構。真的是用過就回不去了！</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmVtbWV0LmlvL2NoZWF0LXNoZWV0Lw==\">https://docs.emmet.io/cheat-sheet/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2Z1YmxvZy5jb20vMjAxNy8wOC9lbW1ldC1zdWJsaW1lLXRleHQuaHRtbA==\">https://www.wfublog.com/2017/08/emmet-sublime-text.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wamNoZW5kZXIuYmxvZ3Nwb3QuY29tLzIwMTYvMDcvZW1tZXQuaHRtbA==\">https://pjchender.blogspot.com/2016/07/emmet.html</span></li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Frontend",
                "html",
                "frontend",
                "emmet",
                "vscode"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Others/2021-02-09-windows-%E6%89%8B%E5%8B%95%E7%A7%BB%E9%99%A4-%E6%96%B0%E5%A2%9E-%E7%A7%BB%E9%99%A4%E7%A8%8B%E5%BC%8F-%E6%B8%85%E5%96%AE%E4%B8%AD%E7%84%A1%E6%B3%95%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%A8%8B%E5%BC%8F/",
            "url": "https://z20240.github.io/Tech/Others/2021-02-09-windows-%E6%89%8B%E5%8B%95%E7%A7%BB%E9%99%A4-%E6%96%B0%E5%A2%9E-%E7%A7%BB%E9%99%A4%E7%A8%8B%E5%BC%8F-%E6%B8%85%E5%96%AE%E4%B8%AD%E7%84%A1%E6%B3%95%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%A8%8B%E5%BC%8F/",
            "title": "Windows 手動移除「新增/移除程式」清單中無法被移除的程式",
            "date_published": "2021-02-09T04:35:41.491Z",
            "content_html": "<h3 id=\"windows-手動移除新增移除程式清單中無法被移除的程式\"><a class=\"anchor\" href=\"#windows-手動移除新增移除程式清單中無法被移除的程式\">#</a> [Windows] 手動移除「新增 / 移除程式」清單中無法被移除的程式</h3>\n<h4 id=\"相比於-macos-跟-linuxwindows-好多東西都是藏在機碼裡\"><a class=\"anchor\" href=\"#相比於-macos-跟-linuxwindows-好多東西都是藏在機碼裡\">#</a> 相比於 MacOS 跟 Linux，Windows 好多東西都是藏在機碼裡</h4>\n<p>最近會碰到這個問題的原因在於我更新 Docker desktop for windows 時出現了一些意外，導致 docker desktop 無法成功更新，因此卡在一個「裝不完全的狀況」。</p>\n<p>新增移除程式要刪除的話會跳出「 <em>找不到 &quot;C:\\path\\for\\docker\\install\\location&quot;</em> 」之類的錯誤訊息。偏偏想要重新安裝，docker installer 又認為你已經安裝過了，會直接跳 Install finished.</p>\n<p>真的令人欲哭無淚～～～😂😂😂😂😂😂😂</p>\n<p>為了讓 docker installer 能夠重新啟動安裝程序，勢必要先刪除掉 「新增 / 移除程式」列表中的 Zombie Docker。於是我上網找了一些資訊後，終於讓我找到了手動解除安裝的方法了！</p>\n<p>以下開始操作流程。</p>\n<p>首先，點選 [開始]，再按一下 [執行]，在 [開啟] 方塊中輸入 regedit，然後按 ENTER。呼叫出 Windows 的 regedit。這是紀錄 windows 機碼的地方。</p>\n<p><img data-src=\"1*KyjfFojRFu2tKRlqfPlrAA.png\" alt=\"\" /></p>\n<p>接下來從左側欄中逐項找出</p>\n<p><strong>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall</strong></p>\n<p><img data-src=\"1*_SqNf0EQ2vCvFsO5eM2zvg.png\" alt=\"\" /></p>\n<p>這邊的每個亂碼資料夾，都對應著你所安裝的一個程式。</p>\n<p>接下來就是，一個一個確認，找出哪一個是你要刪除的程式了。</p>\n<p>我們可以通過 <strong>DisplayName</strong> 查看這個資料夾代表的是哪個程式。</p>\n<p>例如，我有裝 AWS Command Line Interface ，所以在這邊就能看到我安裝的 AWS Command Line Interface。</p>\n<p><img data-src=\"1*hjrrM9Q7CVlkMtWVlcTkfw.png\" alt=\"\" /></p>\n<p>找到要移除的機碼之後，對他「滑鼠按右鍵 -&gt; 刪除」</p>\n<p><img data-src=\"1*kdfkj20bkBl5VtdXLnA3Zw.png\" alt=\"\" /></p>\n<p>之後再回到控制台中去檢查「新增 / 移除程式」列表，應該就會發現剛剛刪除的程式已經不在列表當中了！</p>\n<p>這個時候，再回來重新安裝 Docker ，終於可以正常安裝了！！</p>\n<p><strong>參考資料</strong></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vemgtdHcvdG9waWMvJUU1JUE2JTgyJUU0JUJEJTk1JUU2JTg5JThCJUU1JThCJTk1JUU3JUE3JUJCJUU5JTk5JUE0JUU2JTk2JUIwJUU1JUEyJTlFLSVFNyVBNyVCQiVFOSU5OSVBNCVFNyVBOCU4QiVFNSVCQyU4RiVFNiVCOCU4NSVFNSU5NiVBRSVFNCVCOCVBRCVFNyU5QSU4NCVFNyVBOCU4QiVFNSVCQyU4Ri00OTQ5NDE1OS1kMjE1LTA3YjItZTRjNy0wNTA0NTdiMzgzNTI=\">如何手動移除新增 / 移除程式清單中的程式</span></li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Others",
                "windows",
                "regedit"
            ]
        }
    ]
}