{
    "version": "https://jsonfeed.org/version/1",
    "title": "Les's Blog",
    "subtitle": "",
    "icon": "https://z20240.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://z20240.github.io",
    "items": [
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession2/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession2/",
            "title": "Cambly-Lession2",
            "date_published": "2022-12-30T16:28:40.000Z",
            "content_html": "<h2 id=\"vocabulary\"><a class=\"anchor\" href=\"#vocabulary\">#</a> Vocabulary</h2>\n<ul>\n<li>\n<p>scenery = 風景</p>\n<ul>\n<li>view 比較偏向眼中看出去的事物</li>\n<li>scenery 是平常描述中的「風景」</li>\n</ul>\n</li>\n<li>\n<p>coherence 連貫性 (n.)</p>\n</li>\n<li>\n<p>accuracy 準確性 (n.)</p>\n</li>\n<li>\n<p>intonation 語調 (n.)</p>\n</li>\n<li>\n<p>flawless = perfect 完美的</p>\n</li>\n<li>\n<p>to unwind (v.) = to relax.</p>\n</li>\n<li>\n<p>to gather (v.) = gathering (n.) 聚集 =/= together.</p>\n</li>\n<li>\n<p>to go sightseeing 觀光</p>\n</li>\n<li>\n<p>to get together  聚聚</p>\n<ul>\n<li>ex. Shall we get together on Friday and go for a drink or something?\n<ul>\n<li>我們星期五聚聚喝點東西，如何？</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>to catch-up 聯絡感情</p>\n<ul>\n<li>How about let's catch-up next week?\n<ul>\n<li>我們下週來聚聚聯絡感情如何？</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>to contemplate 沉思</p>\n</li>\n<li>\n<p>to cost an arm and leg = expensive.</p>\n</li>\n<li>\n<p>to change of senary = 轉換心情</p>\n</li>\n<li>\n<p>to broaden wider = 打開眼界</p>\n</li>\n<li>\n<p>here and there = to describe uns</p>\n</li>\n<li>\n<p>as often as = every time 每次</p>\n<ul>\n<li><strong>As</strong> <strong>often</strong> <strong>as</strong> I tried to phone him the line was engaged.</li>\n<li>每次我給他打電話都佔線。</li>\n</ul>\n</li>\n<li>\n<p>indeed 的確</p>\n</li>\n<li>\n<p>not to mention = 更不必說</p>\n<ul>\n<li>There were three of us there, <strong>not</strong> <strong>to</strong> <strong>mention</strong> the children.\n<ul>\n<li>不算孩子在內，我們中有三個人在那裡。</li>\n</ul>\n</li>\n<li>I enjoyed the meal, <strong>not</strong> <strong>to</strong> <strong>mention</strong> the conversation.\n<ul>\n<li>我很喜歡那一頓飯，至於席上的談話更是不必說了。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>accurately (adv.) 準確地.</p>\n</li>\n<li>\n<p>accurate (adj.) 準確的</p>\n</li>\n<li>\n<p>accuracy (n.) 準確性 /precision 精確性</p>\n</li>\n<li>\n<p>glitter 閃光</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"字根字尾\"><a class=\"anchor\" href=\"#字根字尾\">#</a> 字根字尾</h2>\n<ul>\n<li>ex 外面</li>\n<li>er 反覆 / 比較級 / 能做某用途的人或物，東西；能做... 用途的東西。</li>\n<li>cise = cut 切割</li>\n</ul>\n<p>ex.<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exercise = (外出反覆批砍) = 運動</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>ac / ad = to</li>\n<li>cur = cure = take care</li>\n<li>rate = 變成...; 充當... = cause to become.</li>\n</ul>\n<p>ex.<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accurate = (to become more care) = 精確</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>pre 預先<br />\n ex.<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">precise = 精確的</span><br><span class=\"line\">(pre cut the ambiguous part, then leave the things are sure.)</span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession1/",
            "url": "https://z20240.github.io/Life/EnglishLearn/Cambly-Lession1/",
            "title": "EnglishLearn/Cambly-Lession1",
            "date_published": "2022-12-27T19:26:44.000Z",
            "content_html": "<ul>\n<li>\n<p>convenient = easier = handily (seldom used)</p>\n</li>\n<li>\n<p><em>cheaper</em> may means low quality, don't used it all the time.</p>\n</li>\n</ul>\n<blockquote>\n<p>cheaper = low quality</p>\n</blockquote>\n<ul>\n<li>\n<p>If we want to describe  <code>High quality and low price</code> , we can use  <code>more affordable</code> ,  <code>less expensive</code></p>\n</li>\n<li>\n<p>No American use <strong>CP (price–performance ratio)</strong>, only Taiwanese use it.</p>\n</li>\n<li>\n<p>If we want to describe space are not in one place, we can use  <code>separator place</code> .</p>\n</li>\n<li>\n<p>closet = a place to make people change their clothes.</p>\n</li>\n</ul>\n",
            "tags": [
                "Life",
                "EnglishLearn",
                "Cambly",
                "english",
                "cambly"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Data%20Storage/2022-10-08-sql-postgres-%E9%81%87%E5%88%B0-out-of-shared-memory-%E5%95%8F%E9%A1%8C/",
            "url": "https://z20240.github.io/Tech/Data%20Storage/2022-10-08-sql-postgres-%E9%81%87%E5%88%B0-out-of-shared-memory-%E5%95%8F%E9%A1%8C/",
            "title": "SQL Postgres 遇到 out of shared memory 問題",
            "date_published": "2022-10-08T04:42:30.706Z",
            "content_html": "<h3 id=\"sql-postgres-遇到-out-of-shared-memory-問題\"><a class=\"anchor\" href=\"#sql-postgres-遇到-out-of-shared-memory-問題\">#</a> [SQL] Postgres 遇到 out of shared memory 問題</h3>\n<p>由於工作需要，我在 Postgresql 中創建了 20000 張 20 columns x 1000 entries 的 tables，約莫了 18G 的大小。</p>\n<p>由於要一次性創建如此海量的資料，因此我寫了段小 Script 來協助完成。</p>\n<p>期間在大約 2000 筆衣料左右的時候程式就會碰到  <code>out of shared memory</code>  的問題，困擾我一段時間。</p>\n<p><img data-src=\"1*4K08BRP-ucCyW_t2PddHdw.png\" alt=\"\" /></p>\n<p>查詢了很多網站都沒有找到良好的解釋或是解決方案。</p>\n<p>直到後來查到 stackoverflow 上一個沒什麼人回應的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzY4OTEwMjM4\">解決方案</span></p>\n<p>A quick fix for  <code>PSQLException error out of shared memory</code>  is to set the</p>\n<blockquote>\n<p>max_locks_per_transaction</p>\n</blockquote>\n<p>parameter in PostgreSQL config file, which specifies number of object locks allocated for each transaction (if there are statements/routines that work on large number of tables to finish.</p>\n<p>其實主要就是 PostgresSQL 在 transaction lock 有其上限。當 default 上限用完了，就會 out of shared memory.</p>\n<p>要解決的方法也不難，我們可以去 postgresql 的 config 中找到  <code>max_locks_per_transaction</code>  將 default 的 64 加大。</p>\n<p>至於 postgresql config 是放在哪裡？</p>\n<p>這部分我們可以使用  <code>SHOW config_file;</code>  這行 sql 查看。</p>\n<p>Default 應該都是在  <code>/var/lib/postgresql/data/postgresql.conf</code>  的。</p>\n<p><img data-src=\"1*XoswqaeN0ZhTSGGzHSzrCA.png\" alt=\"\" /></p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3liZXJ0ZWMtcG9zdGdyZXNxbC5jb20vZW4vcG9zdGdyZXNxbC15b3UtbWlnaHQtbmVlZC10by1pbmNyZWFzZS1tYXhfbG9ja3NfcGVyX3RyYW5zYWN0aW9uLw==\">POSTGRESQL: YOU MIGHT NEED TO INCREASE MAX_LOCKS_PER_TRANSACTION</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY0OTA2NjQvZXJyb3Itb3V0LW9mLXNoYXJlZC1tZW1vcnk=\">ERROR: out of shared memory</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Data Storage",
                "postgres",
                "database"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/vue/2022-07-04-vue-nuxt-eslint-prettier-vscode-%E8%A8%AD%E5%AE%9A-%E8%AE%93-eslint-%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88-nuxt-%E5%B0%88%E6%A1%88/",
            "url": "https://z20240.github.io/Tech/Frontend/vue/2022-07-04-vue-nuxt-eslint-prettier-vscode-%E8%A8%AD%E5%AE%9A-%E8%AE%93-eslint-%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88-nuxt-%E5%B0%88%E6%A1%88/",
            "title": "Vue Nuxt + Eslint + Prettier +Vscode 設定 — 讓 Eslint 自動排版 Nuxt 專案",
            "date_published": "2022-07-04T10:52:32.887Z",
            "content_html": "<h3 id=\"vue-nuxt3-eslint-prettier-vscode-設定-讓-eslint-自動排版-nuxt-專案\"><a class=\"anchor\" href=\"#vue-nuxt3-eslint-prettier-vscode-設定-讓-eslint-自動排版-nuxt-專案\">#</a> [Vue] Nuxt3 + Eslint + Prettier +Vscode 設定 — 讓 Eslint 自動排版 Nuxt 專案</h3>\n<p><img data-src=\"1*ET9CfH7oh7cubkTpNch7Xw.png\" alt=\"\" /></p>\n<p>最近因為接案需要，決定使用 Nuxt 作為快速開發的框架。發現一段時間沒觀注，前端環境真是日新月異。 Nuxt 竟然也迎來第三版了。</p>\n<p>因此這次在設定環境時順便記錄了一下如何在專案中結合 Eslint + Prettier 與 Vscode 的自動風格檢查兼排版。</p>\n<h3 id=\"nuxt\"><a class=\"anchor\" href=\"#nuxt\">#</a> Nuxt</h3>\n<h4 id=\"安裝\"><a class=\"anchor\" href=\"#安裝\">#</a> 安裝</h4>\n<p><strong>使用  <code>npx</code>  直接安裝</strong><br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx nuxi init &lt;nuxt-app&gt;</span><br></pre></td></tr></table></figure></p>\n<p>打開你的  <code>nuxt-app</code> <br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ code nuxt-app</span><br></pre></td></tr></table></figure></p>\n<p>其中如果我們不希望我們的 .nuxt 相依專案以  <code>.shim</code>  的形式產生，我們先在  <code>nuxt.config.ts</code>  內將 shim 設成  <code>false</code>  .<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default defineNuxtConfig(&#123;</span><br><span class=\"line\"> typescript: &#123;</span><br><span class=\"line\"> shim: false</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>安裝相依套件</strong><br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure></p>\n<p>到這邊這些前置作業完成之後，我們先啟動一次 nuxt 讓他生成自己的  <code>.nuxt</code>  專案。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn dev -o</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"vscode\"><a class=\"anchor\" href=\"#vscode\">#</a> Vscode</h3>\n<h4 id=\"prettier-eslint\"><a class=\"anchor\" href=\"#prettier-eslint\">#</a> Prettier Eslint</h4>\n<p><img data-src=\"1*ovYVQpQEWiy2JY0l267wjw.png\" alt=\"\" /></p>\n<h4 id=\"eslint\"><a class=\"anchor\" href=\"#eslint\">#</a> Eslint</h4>\n<p><img data-src=\"1*t-XiqWLBCtF_pu_VKsp3XQ.png\" alt=\"\" /></p>\n<h3 id=\"eslint-2\"><a class=\"anchor\" href=\"#eslint-2\">#</a> Eslint</h3>\n<h4 id=\"init\"><a class=\"anchor\" href=\"#init\">#</a> Init</h4>\n<p>執行  <code>npx eslint — init</code>  初始化  <code>.eslintrc.js</code>  並自動安裝相關的 dependency，他會問你一些問題來據此產生相關的設定<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You can also run this command directly using ‘npm init @eslint/config’.</span><br><span class=\"line\">npx: 40 安裝成功，花費 3.812 秒</span><br><span class=\"line\">✔ How would you like to use ESLint? · style</span><br><span class=\"line\">✔ What type of modules does your project use? · esm</span><br><span class=\"line\">✔ Which framework does your project use? · vue</span><br><span class=\"line\">✔ Does your project use TypeScript? · No / Yes</span><br><span class=\"line\">✔ Where does your code run? · browser</span><br><span class=\"line\">✔ How would you like to define a style for your project? · prompt</span><br><span class=\"line\">✔ What format do you want your config file to be in? · JavaScript</span><br><span class=\"line\">✔ What style of indentation do you use? · 4</span><br><span class=\"line\">✔ What quotes do you use for strings? · single</span><br><span class=\"line\">✔ What line endings do you use? · unix</span><br><span class=\"line\">✔ Do you require semicolons? · No / Yes</span><br><span class=\"line\">The config that you’ve selected requires the following dependencies:</span><br><span class=\"line\">eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest</span><br><span class=\"line\">✔ Would you like to install them now? · No / Yes</span><br><span class=\"line\">✔ Which package manager do you want to use? · yarn</span><br></pre></td></tr></table></figure></p>\n<p>產生出來的 .eslintrc.js 會像是這樣<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\"> “env”: &#123;</span><br><span class=\"line\"> “browser”: true,</span><br><span class=\"line\"> “es2021”: true</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> “extends”: [</span><br><span class=\"line\"> “eslint:recommended”,</span><br><span class=\"line\"> “plugin:vue/essential”,</span><br><span class=\"line\"> “plugin:@typescript-eslint/recommended”</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> “parserOptions”: &#123;</span><br><span class=\"line\"> “ecmaVersion”: “latest”,</span><br><span class=\"line\"> “parser”: “@typescript-eslint/parser”,</span><br><span class=\"line\"> “sourceType”: “module”</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> “plugins”: [</span><br><span class=\"line\"> “vue”,</span><br><span class=\"line\"> “@typescript-eslint”</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> “rules”: &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"install-dependency\"><a class=\"anchor\" href=\"#install-dependency\">#</a> Install Dependency</h4>\n<p>安裝相關的 dependency<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add -D eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest eslint@latest typescript eslint-plugin-nuxt</span><br></pre></td></tr></table></figure></p>\n<p>在  <code>package.json</code>  的  <code>scripts</code>  中加上  <code>“lint”: “eslint . — ext .ts,.vue”</code>  然後使用  <code>yarn lint</code>  來測試 eslint 是否有生效.</p>\n<p><img data-src=\"1*Mvfr8nd_T3OVC6U693GQVA.png\" alt=\"\" /></p>\n<p>! [ [image-20220704162435221.png] ]</p>\n<h4 id=\"修改-eslintrc-加入-nuxt-與-eslint-的相關套件\"><a class=\"anchor\" href=\"#修改-eslintrc-加入-nuxt-與-eslint-的相關套件\">#</a> 修改  <code>.eslintrc</code>  加入 nuxt 與 eslint 的相關套件</h4>\n<p>把配置文件中 `extends` 做如下的修改：</p>\n<ul>\n<li><code>”plugin:vue/essential”</code>  改成  <code>”plugin:vue/vue3-recommended”</code>  (前者是 vue2 的設定，後者為 vue3)</li>\n<li><code>”eslint:recommended”</code>  改成  <code>”plugin:nuxt/recommended”</code></li>\n<li>刪除  <code>plugins</code>  內的  <code>”vue”</code></li>\n<li>如果檔案內出現 <strong>Component name should always be multi-word</strong> 的錯誤，這是因為 nuxt 提倡 vue 文件的 Component 應該要用 multi-word snack case 進行命名。我們可以在 rules 中增加  <code>”vue/multi-word-component-names”: 0</code>  來關閉。</li>\n</ul>\n<p><img data-src=\"1*DTodaOdB7g7Y3j-35PopQg.png\" alt=\"\" /></p>\n<h3 id=\"prettier\"><a class=\"anchor\" href=\"#prettier\">#</a> Prettier</h3>\n<h4 id=\"install-dependency-2\"><a class=\"anchor\" href=\"#install-dependency-2\">#</a> Install Dependency</h4>\n<p>安裝 <strong>prettier, eslint-plugin-prettier, eslint-config-prettier</strong> 等相關套件<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add -D prettier eslint-plugin-prettier eslint-config-prettier</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>eslint-plugin-prettier</code>  : 讓我們可以在  <code>.eslintrc.js</code>  中直接在  <code>rules</code>  內使用  <code>prettier/prettier</code>  屬性設定  <code>.prettierrc</code>  ，省去多增加這個 file 的 maintainance.</li>\n<li><code>eslint-config-prettier</code>  : 會自動關掉所有不必要且可能會跟 Prettier 相衝的設定，讓我們可以在 eslint 中設定自己要的 rule。舉例來說如果 eslint 的 rule 和 prettier 的 rule conflict 的時候 （例如 eslint 限制了必须單引號，prettier 也限制了必须單引號，那麼如果用 eslint 驅動 prettier 來做檢查的話就會提示兩種 error 儘管他們都指向同一種錯誤。）此時這個 Plugin 就可以關閉額外的 error 顯示。</li>\n</ul>\n<p>之後，一樣修改  <code>.eslintrc</code>  中的  <code>extends</code>  內容：增加  <code>’plugin:prettier/recommended’</code> <br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends: [</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  &quot;plugin:prettier/recommended&quot;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>此時可能會出現紅線佈滿每個檔案，這是因為 prettier 在偵測 rule 時，若是沒有發現  <code>.prettierrc</code>  在專案中的話，就會去往更 root 的地方找，有可能 root 的 prettier 設定與專案所需不符。</p>\n<p><img data-src=\"1*jt_CPBruvGdfc6I_svByEw.png\" alt=\"\" /></p>\n<p>我們這時可以在  <code>.eslintrc.js</code>  中的  <code>rules</code>  中增加  <code>prettier/prettier</code>  的來告訴 prettier 我們的 eslint 要怎樣的規則，如此可以取代掉在專案中建立  <code>.prettirerc</code></p>\n<p><strong>完整的 .eslintrc.js 最終會如下</strong><br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\"> env: &#123;</span><br><span class=\"line\">   browser: true,</span><br><span class=\"line\">   es2021: true,</span><br><span class=\"line\">   node: true,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> extends: [</span><br><span class=\"line\">   ‘plugin:vue/vue3-recommended’,</span><br><span class=\"line\">   ‘plugin:@typescript-eslint/recommended’,</span><br><span class=\"line\">   ‘plugin:nuxt/recommended’,</span><br><span class=\"line\">   ‘plugin:prettier/recommended’,</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> parserOptions: &#123;</span><br><span class=\"line\">   ecmaVersion: ‘latest’,</span><br><span class=\"line\">   parser: ‘@typescript-eslint/parser’,</span><br><span class=\"line\">   sourceType: ‘module’,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> plugins: [</span><br><span class=\"line\">   // “vue”,</span><br><span class=\"line\">   ‘@typescript-eslint’,</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> rules: &#123;</span><br><span class=\"line\">   indent: [‘error’, 2],</span><br><span class=\"line\">   ‘linebreak-style’: [‘error’, ‘unix’],</span><br><span class=\"line\">   quotes: [‘error’, ‘single’],</span><br><span class=\"line\">   semi: [‘error’, ‘always’],</span><br><span class=\"line\">   ‘vue/multi-word-component-names’: 0,</span><br><span class=\"line\">   ‘comma-dangle’: [</span><br><span class=\"line\">     ‘error’,</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         arrays: ‘always-multiline’,</span><br><span class=\"line\">         objects: ‘always-multiline’,</span><br><span class=\"line\">         imports: ‘never’,</span><br><span class=\"line\">         exports: ‘never’,</span><br><span class=\"line\">         functions: ‘never’,</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   ],</span><br><span class=\"line\">   ‘vue/html-self-closing’: [</span><br><span class=\"line\">     ‘error’,</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         html: &#123;</span><br><span class=\"line\">           void: ‘always’,</span><br><span class=\"line\">           normal: ‘always’,</span><br><span class=\"line\">           component: ‘always’,</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         svg: ‘always’,</span><br><span class=\"line\">         math: ‘always’,</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   ],</span><br><span class=\"line\">   ‘prettier/prettier’: [</span><br><span class=\"line\">      ‘error’,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         printWidth: 120, // 最大長度</span><br><span class=\"line\">         tabWidth: 2, // tab 縮排 2 空格</span><br><span class=\"line\">         useTabs: false, // 使用空格縮排</span><br><span class=\"line\">         singleQuote: true, // js 單引號</span><br><span class=\"line\">         semi: true, // 要有分號</span><br><span class=\"line\">         trailingComma: ‘es5’, // 使用 es5 規則規範結尾的逗號</span><br><span class=\"line\">         arrowParens: ‘avoid’,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   ],</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>此時我們再使用  <code>ctrl+s</code>  保存，應該就會發現可以自動格式化檔案了。</p>\n<h4 id=\"trouble-shooting\"><a class=\"anchor\" href=\"#trouble-shooting\">#</a> Trouble shooting</h4>\n<p>若是發現存檔後沒有如預期中自動格式化，可以檢查是否自己的 Vscode 預設格式化工具是  <code>prettier-eslint</code></p>\n<ul>\n<li>使用  <code>cmd + p (ctrl + p)</code>  ，輸入  <code>&gt; Format Document</code></li>\n</ul>\n<p><img data-src=\"1*WT4Zgzex60odGfhRIgpXxw.png\" alt=\"\" /></p>\n<ul>\n<li>選擇 Prettier ESLint</li>\n</ul>\n<p><img data-src=\"1*CvCOrh9Ylw2-AlkWrb9A4g.png\" alt=\"\" /></p>\n<p>之後再嘗試一次看看，基本上應該就要有反應了～</p>\n<h3 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pY29kZS5iZXN0L2kvNzA0MDU1NDYyMjY3NTk=\">nuxt3 项目中使用 eslint 和 prettier+commitlint 附常用规则配置</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmV0dGllci5pby9kb2NzL2VuL2luc3RhbGwuaHRtbA==\">Prettier</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LXBsdWdpbi1udXh0\">eslint-plugin-nuxt</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Frontend",
                "Vue",
                "javascript",
                "vscode",
                "nuxt-3",
                "eslint",
                "prettier"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Others/2022-06-16-tech-skhd-%E5%A4%B1%E5%8E%BB%E5%8A%9F%E8%83%BD-not-working-%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/",
            "url": "https://z20240.github.io/Tech/Others/2022-06-16-tech-skhd-%E5%A4%B1%E5%8E%BB%E5%8A%9F%E8%83%BD-not-working-%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/",
            "title": "Tech skhd 失去功能 (Not working)的解決方法",
            "date_published": "2022-06-16T07:25:19.143Z",
            "content_html": "<h3 id=\"tech-skhd-失去功能-not-working的解決方法\"><a class=\"anchor\" href=\"#tech-skhd-失去功能-not-working的解決方法\">#</a> [Tech] skhd 失去功能 (Not working) 的解決方法</h3>\n<p><img data-src=\"0*A5q6r3JS-zTQfZVk.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=\">Skhd</span> 是一個適用於 MacOS 的小實用軟件，它允許我們重新映射各種操作的快捷方式。然而在某次 Mac 升級之後就發生 skhd 時不時停止運作的狀況。</p>\n<p><strong>Debug</strong></p>\n<p>首先我必須要停止 skhd 的 process. 使用 <strong>brew</strong> 來做到。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew services stop skhd</span><br></pre></td></tr></table></figure></p>\n<p>之後，可以使用 skhd -V 來以詳細模式運行<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skhd -V</span><br><span class=\"line\">skhd: successfully created pid-file..</span><br><span class=\"line\">skhd: secure keyboard entry is enabled by (5530) &#x27;iterm2&#x27;! abort..</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*-O6oGPKvPXPJx055gUTnJA.png\" alt=\"\" /></p>\n<p>訊息中顯示 mac 有一個  <code>secure keyboard entry</code>  的模式不知道為什麼被打開了。</p>\n<p>通過進一步搜尋可以知道我們可以使用 iTerm2 的 menu 或是 Terminal 的 menu 來關閉這個模式。</p>\n<p><img data-src=\"1*FvKx68zuda255u3UiZds-w.png\" alt=\"\" /></p>\n<p><img data-src=\"1*dW3dMJS7WrqAj9NFzosk4Q.png\" alt=\"\" /></p>\n<p>到這邊理論上只要可以取消，之後再把 skhd 重啟就可以完成了。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew services start skhd</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"更加複雜的-debug\"><a class=\"anchor\" href=\"#更加複雜的-debug\">#</a> <strong>更加複雜的 Debug</strong></h4>\n<p>事情如果到那邊就完結了，我也不用再寫這篇了。</p>\n<p>可惜問題就是發生在  <code>secure keyboard entry</code>  無法被正確 disable</p>\n<p>因此我又繼續尋找資料，後來看到了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWcuaW8vZG9jcy9zdXBwb3J0L3NlY3VyZS1rZXlib2FyZC1pbnB1dCNmaWctYW5kLXNlY3VyZS1rZXlib2FyZC1pbnB1dA==\">這篇</span> ，源自 Fig 一個新的 Termial plugin 有講到類似的除錯方法。我就一步一步整理過來。</p>\n<p>裡面有講到「如果無法取消選中該複選框，則 iTerm 檢測到安全輸入已啟用，但它不是負責的應用程序。要弄清楚如何禁用它，請繼續故障排除部分。」</p>\n<p>其羅列了以下幾種可能的原因</p>\n<p><strong>一、與密碼管理器衝突 (1Password, BitWarden)</strong></p>\n<p>某些密碼管理器在輸入主密碼時會啟用  <code>Secure Keyboard Entry</code>  ，但之後偶爾會無法禁用它。</p>\n<p>如果您使用 1Password、Bitwarden 或其他密碼管理器，請退出應用程序，然後檢查是否仍啟用  <code>Secure Keyboard Entry</code>  。</p>\n<blockquote>\n<p>注意：如果您要退出 1Password，請確保您完全退出它，而不僅僅是正常的 cmd+q 退出</p>\n</blockquote>\n<p><img data-src=\"0*nlUF009uzQ11n5d5.png\" alt=\"\" /></p>\n<p>如果是密碼管理器負責，只需重新啟動它即可解決問題。否則，請繼續故障排除部分。</p>\n<p><strong>二、其他未知的應用程序</strong></p>\n<p>有時其他應用程序會啟用安全輸入，但在不再需要時無法將其關閉。</p>\n<p>我們可以使用以下指令顯示出需要使用此設定的應用程式。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ioreg -l -w 0 |  tr &#x27;,&#x27; &#x27;\\n&#x27; 2&amp;&gt; /dev/null | grep kCGSSessionSecureInputPID | cut -f 2 -d = | uniq | xargs ps -o command= -p</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*ZhFCMO8tv_w42ZIjh8diHw.png\" alt=\"\" /></p>\n<p>在我的例子中會發現是一個叫做  <code>loginWindow</code>  的 process 暫用著。這似乎是 MacOS 的小 bug ，有時後 loginWindow 在 user login 之後不會 terminal (disable secure input entry) .</p>\n<p>這時候僅需要使用  <code>⌃ Control` + `⌘ Command` +`Q</code>  將畫面進到上鎖之後重新登入，理論上就能夠解決這個問題。</p>\n<blockquote>\n<p>不過，如果這樣的方式依然無法解決，也許「登出」、或「重開機」會是最後的解決方法。</p>\n</blockquote>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2FtdW5kcmEuY29tLm5wL3NraGQtc3VkZGVubHktc3RvcHBlZC13b3JraW5nLWFmdGVyLXVwZ3JhZGUvMTczOA==\">SKHD SUDDENLY STOPPED WORKING AFTER UPGRADE</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWcuaW8vZG9jcy9zdXBwb3J0L3NlY3VyZS1rZXlib2FyZC1pbnB1dCNmaWctYW5kLXNlY3VyZS1rZXlib2FyZC1pbnB1dA==\">Fig and Secure Keyboard Input</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Others",
                "skhd",
                "yabai",
                "tiling-window-manager"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/NodeJs/2022-05-16-node-%E5%A6%82%E4%BD%95%E6%AA%A2%E6%B8%AC-node-%E7%A8%8B%E5%BC%8F%E7%9A%84memory-leak-%E4%BB%A5%E5%8F%8A%E8%99%95%E7%90%86-out-of-memory-%E5%95%8F%E9%A1%8C/",
            "url": "https://z20240.github.io/Tech/Frontend/NodeJs/2022-05-16-node-%E5%A6%82%E4%BD%95%E6%AA%A2%E6%B8%AC-node-%E7%A8%8B%E5%BC%8F%E7%9A%84memory-leak-%E4%BB%A5%E5%8F%8A%E8%99%95%E7%90%86-out-of-memory-%E5%95%8F%E9%A1%8C/",
            "title": "Node 如何檢測 Node 程式的Memory Leak 以及處理 out of memory 問題",
            "date_published": "2022-05-16T10:10:49.465Z",
            "content_html": "<h3 id=\"node-如何檢測-node-程式的memory-leak-以及處理-out-of-memory-問題\"><a class=\"anchor\" href=\"#node-如何檢測-node-程式的memory-leak-以及處理-out-of-memory-問題\">#</a> [Node] 如何檢測 Node 程式的 Memory Leak 以及處理 out of memory 問題</h3>\n<p>身為一個 NodeJs 工程師，在架構一個 NodeJs 應用程式的生涯中或多或少應該都有碰過  <code>Javascript heap out of memory</code>  的狀況。</p>\n<p>畢竟 NodeJs 本身是跑在 V8 Engine 的 Script Language，本身在 main thread 中 default 僅有 1GB (In 64-bit system) 的 memory 配額。</p>\n<p><img data-src=\"1*r2wJzxZlT7878dhsficsYA.png\" alt=\"\" /></p>\n<p>絕大多數時候其實都是單純 server 功能越來越多導致記憶體用量不夠，這個時候我們可以簡單地在執行程式時使用  <code>--max-old-space-size</code>  來手動配額足夠的記憶體給 Node 使用。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 8GB 的記憶體來執行 app.js (這邊的單位是 KB)</span><br><span class=\"line\">$ node --max-old-space-size=8192 app.js</span><br></pre></td></tr></table></figure></p>\n<p>然而若是當我們已經配置足夠大的記憶體，確還是發生了 <strong>out of memory</strong> 的狀況呢？那應該十之八九是我們碰上了 memory leak 的問題了。</p>\n<h4 id=\"監測-memory-heap-的使用量檢測是否-memory-leak\"><a class=\"anchor\" href=\"#監測-memory-heap-的使用量檢測是否-memory-leak\">#</a> 監測 memory heap 的使用量，檢測是否 memory leak</h4>\n<p>以往，我們要監測 memory heap 的使用需要利用諸如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGVhcGR1bXA=\">heapdump</span> 這類的 heap snapshot 工具來建立快照。但是在 version 6 以上的版本我們可以使用  <code>--inspect</code>  flag 來指示 node 執行 app.js 期間開啟監測模式。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node --inspect index.js</span><br></pre></td></tr></table></figure></p>\n<p><em>如果你今天的 app 是使用 ts-node，你也可以使用以下指令來進入 node 的 inspect （</em> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHMtbm9kZSN1c2VyLWNvbnRlbnQtcHJvZ3JhbW1hdGlj\">https://www.npmjs.com/package/ts-node#user-content-programmatic</span> <em>）</em><br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -r ts-node/register --inspect ./app.ts</span><br></pre></td></tr></table></figure></p>\n<p>node 會另外開啟一個 9229 的 port 來提供 debugger 使用。</p>\n<p><img data-src=\"1*ot3-OLwkVSRw-ImSrXxhCw.png\" alt=\"\" /></p>\n<p><em>你也可以使用  <code>--inspect-brk</code>  ，這個 flag 會讓 node 監測模式啟動後停在第一個 statement。效果就類似設置一個 break point 在程式的第一行。</em></p>\n<p>接下來，我們就可以開啟 Google Chrome 的 <strong>DevTools</strong> attach 到 debugger 來進行實時監控跟 debug 了。</p>\n<p>在 google chrome 網址列輸入  <code>about:inspect</code>  可以進入到 Chrome 遠端開發工具畫面。</p>\n<p><img data-src=\"1*vE4cxtjQLFRgYckFNgX2eQ.png\" alt=\"\" /></p>\n<p>如果 prot 9229 已經開啟且被監聽，chrome 會自動找到相對應的 app 。之後我們可以點擊 <strong>inspect</strong> 進入監控畫面。</p>\n<p><img data-src=\"1*TnS_yRzEnIKV74ireuA50Q.png\" alt=\"\" /></p>\n<p>接下來點到 「記憶體」的選項，我們可以錄製記憶體的快照。</p>\n<p><img data-src=\"1*G7HH9z3wGJhG1mLZK-cvoQ.png\" alt=\"\" /></p>\n<p>DevTools 會分析出 app 中各個變數結構的使用大小、對比 root 的深度、物件本身佔用的記憶體總量… 等等，一目瞭然。甚至連變數名稱都列出來給你了。</p>\n<p><img data-src=\"1*y7HVRS0fXUw_u3Ypr-VCNg.png\" alt=\"\" /></p>\n<p>接下來我們要監測哪個變數導致記憶體增加就易如反掌了。</p>\n<p>以我們專案自身為例，在程式執行起來時 Array 所佔的記憶體容量還沒有到很多</p>\n<p><img data-src=\"1*hjkYvj6TLmxY9YM16b8Rsw.png\" alt=\"\" /></p>\n<p>但是隨著某個 API 的呼叫，大大地增加了 Array 在記憶體中的使用量。</p>\n<p><img data-src=\"1*wZXni_hZC3GxrpjuOegfcA.png\" alt=\"\" /></p>\n<p>因此我們就可以據針對這個部分進行細部分析。來快速定位 memory leak 的原因。</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0BwYXVsX2lyaXNoL2RlYnVnZ2luZy1ub2RlLWpzLW5pZ2h0bGllcy13aXRoLWNocm9tZS1kZXZ0b29scy03YzRhMWI5NWFlMjcjLnBtcWVqcm44cQ==\">Debugging Node.js with Chrome DevTools</span> (這是一個國外的工程師的筆記，簡述了 google DevTools 針對 node inspect 的使用方式)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92b2N1cy5jYy9hcnRpY2xlLzYxMTc2YzE3ZmQ4OTc4MDAwMTk0MmYxYw==\">從你的 Node.js 專案裡找出 Memory leak，及早發現、及早治療！</span> (這篇講得很詳細，另外還講到如何做壓力測試，值得一讀)</li>\n<li>其他有關 node Memory 相關的資訊：「 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQxNTM5OTYvaXMtdGhlcmUtYS1saW1pdC1vbi10aGUtc2l6ZS1vZi1hLXN0cmluZy1pbi1qc29uLXdpdGgtbm9kZS1qcw==\">Is there a limit on the size of a string in JSON with Node.js?</span> 」、「 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjAwMTg1ODgvaG93LXRvLW1vbml0b3ItdGhlLW1lbW9yeS11c2FnZS1vZi1ub2RlLWpz\">How to monitor the memory usage of Node.js?</span> 」</li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Frontend",
                "NodeJs",
                "javascript",
                "nodejs",
                "memory-leak"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Others/2021-08-14-tiling-window-management-%E5%B9%B3%E9%8B%AA%E5%BC%8F%E8%A6%96%E7%AA%97%E7%AE%A1%E7%90%86-amethyst-yabai/",
            "url": "https://z20240.github.io/Tech/Others/2021-08-14-tiling-window-management-%E5%B9%B3%E9%8B%AA%E5%BC%8F%E8%A6%96%E7%AA%97%E7%AE%A1%E7%90%86-amethyst-yabai/",
            "title": "Tiling Window Management - 平鋪式視窗管理 (Amethyst & Yabai)",
            "date_published": "2021-08-14T21:05:43.754Z",
            "content_html": "<h3 id=\"tiling-window-management-平鋪式視窗管理-amethyst-yabai\"><a class=\"anchor\" href=\"#tiling-window-management-平鋪式視窗管理-amethyst-yabai\">#</a> Tiling Window Management - 平鋪式視窗管理 (Amethyst &amp; Yabai)</h3>\n<h4 id=\"借鑑linux另一種視窗管理的思路\"><a class=\"anchor\" href=\"#借鑑linux另一種視窗管理的思路\">#</a> 借鑑 Linux，另一種視窗管理的思路</h4>\n<p><img data-src=\"1*VrezmQ_2bsHHCUSFxNm2kQ.png\" alt=\"\" /></p>\n<p>在 macOS 中，要做視窗管理不是依靠手動拖曳視窗邊角調整大小及位置，就是依靠其他視窗管理工具諸如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90dy9hcHAvbWFnbmV0L2lkNDQxMjU4NzY2P210PTEy\">Magnet</span> 或是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90dy9hcHAvbW9vbS9pZDQxOTMzMDE3MD9tdD0xMg==\">Moom</span> 這類快速調整視窗的小工具作為輔助。</p>\n<p>然而在每次開啟新的視窗的時候通常仍需要自己手動定位是窗的位置及大小，還是不太方便。</p>\n<p>另外當視窗一多起來，依然免除不了需要通過手勢「展開」來從茫茫視窗海中找尋所需要視窗的痛苦。</p>\n<blockquote>\n<p>MacOS 本身的視窗管理能力是有目共睹的混亂。</p>\n</blockquote>\n<p><img data-src=\"1*9swWR0x1rBw6aDOhFwLACQ.gif\" alt=\"通常視窗一多就會擠在一起，macOS 用戶就必須通過「展開」來從茫茫程式海中找尋\" /></p>\n<p>通常視窗一多就會擠在一起，macOS 用戶就必須通過「展開」來從茫茫程式海中找尋</p>\n<p>今天要介紹的「平鋪式視窗管理」不同於 macOS 一般預設的視窗管理機制，其特色則是：「 <em>盡可能地將所有視窗依照設定好的規則展開，</em> 並且 <strong>避免視窗重疊</strong> 在一起。」</p>\n<p>如此更能讓人一目瞭然現在桌面上有哪些視窗。</p>\n<p><img data-src=\"1*TXuDJEdkIjdJll5Xs2wZ2w.png\" alt=\"所有視窗都展開來\" /></p>\n<p>所有視窗都展開來</p>\n<p>當開啟新的視窗的時候視窗管理工具就會自動依照規則做好佈局，免除了視窗蓋來蓋去的問題。</p>\n<p><img data-src=\"1*5NPkQIS5TR09HiaxkU6Bwg.gif\" alt=\"通常當視窗只有一個的時候會預設展開到最大，之後以二分法的方式分隔空間\" /></p>\n<p>通常當視窗只有一個的時候會預設展開到最大，之後以二分法的方式分隔空間</p>\n<p>Tiling Window Management 中最為人熟知的就是 Linux 下 i3 的視窗管理了。其自動排列視窗、平鋪視窗的特性讓許多人即使離開了 Linux 也念念不忘。</p>\n<p>因此身為 Unix Like 的 MacOS 當然也一定會有人想要移植這樣一套方便的視窗管理工具。</p>\n<p>今天就主要介紹兩款網路上比較常見的 Tiling Window Management 套件。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0\">Amethyst</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFp\">Yabai</span></li>\n</ul>\n<p>這兩個套件都是 Open Source 的，因此都可以在 Github 上找到。</p>\n<p>其中 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0\">Amethyst</span> 是比較簡單容易上手的；而 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFp\">Yabai</span> 更適合進階使用者使用。</p>\n<p>為了簡單講解，接下來都會以 TWM 作為 Tiling Window Management 的縮寫。</p>\n<h3 id=\"amethyst\"><a class=\"anchor\" href=\"#amethyst\">#</a> Amethyst</h3>\n<p><img data-src=\"1*qFXBBoqP39Bv_aTtmSmOUw.png\" alt=\"\" /></p>\n<p>Amethyst 是一個非常容易入門的 TWM， 並且提供了非常多樣的視窗佈局可供選擇。</p>\n<p><img data-src=\"1*zzg2M4dVZZYvVsgFEPC_Yg.png\" alt=\"\" /></p>\n<p>基本上安裝好 Amethyst 之後我們不需要做其他額外的設定即可開始使用。</p>\n<p>Amethyst 擁有非常多樣的快捷鍵可以設定。通過簡單的快捷鍵我們可以很容易地操控各個視窗。</p>\n<p><img data-src=\"1*inR_OfCObjnbxZIX-srkaA.png\" alt=\"\" /></p>\n<p>非常適合想要開箱即用的使用者。</p>\n<p><img data-src=\"1*iES9yQoVnwQGxsKoHhE2uQ.gif\" alt=\"利用設定好的快捷鍵，可以很容易地操控佈局中的視窗\" /></p>\n<p>利用設定好的快捷鍵，可以很容易地操控佈局中的視窗</p>\n<p>但是缺點也很明顯，我列舉了幾個觀察到的缺點如下：</p>\n<ul>\n<li><strong>沒有辦法客製化自己的佈局</strong></li>\n</ul>\n<p>這其實並不是什麼大問題， Amethyst 提供了許許多多的佈局種類，基本上可以滿足絕大多數使用者的需求。然而若是對佈局方式比較有自己想法的人，Amethyst 這部分可能就無法滿足。</p>\n<ul>\n<li><strong>視窗只能水平縮放、不能垂直縮放</strong></li>\n</ul>\n<p>Amethyst 採用「主要視窗」與「次要視窗」的概念。</p>\n<p>其中僅有「主要視窗」可以進行水平縮放 (依然無法垂直縮放)</p>\n<p><img data-src=\"1*HKWfSFdae-qERrku4XnJKA.gif\" alt=\"\" /></p>\n<p>以上面的 gif 為例，右側的 Terminal 就會顯得非常的狹小，其實並不利於使用。</p>\n<ul>\n<li><strong>能夠使用的功能已經被 Amethyst 定死，僅能使用熱鍵提供綁定的功能，無法另外設定其他功能。</strong></li>\n</ul>\n<p>這是所有開箱即用的小工具都一定會有的軟肋。畢竟要讓人簡單上手，一定就是要設定越少越好。這應該算是一種妥協吧～。</p>\n<h4 id=\"安裝\"><a class=\"anchor\" href=\"#安裝\">#</a> 安裝</h4>\n<p>Amethyst 的安裝非常簡單，僅需要使用 brew ，一行指令即可。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask amethyst</span><br></pre></td></tr></table></figure></p>\n<p>安裝完後，會在 Application Perference 中出現一個 app ，開啟後即可開始使用。</p>\n<p><img data-src=\"1*i_uezLMOZqgIPNsnrzKkmQ.png\" alt=\"\" /></p>\n<h3 id=\"yabai\"><a class=\"anchor\" href=\"#yabai\">#</a> Yabai</h3>\n<p><img data-src=\"1*Ciz6Od9ySfrVtkiEs72l_w.png\" alt=\"\" /></p>\n<p>相較於 Amethyst 開箱即用， Yabai 走在另一個極端。</p>\n<p>Yabai 僅僅提供了一套完整 TWM 的指令集框架來操控視窗。使用者需要自行撰寫熱鍵設定、功能腳本來達到想要的結果。但也因為如此 Yabai 給予了極高的可設定彈性。</p>\n<p>舉個例子，若是想要將視窗延展到最大，Yabai 需要使用以下指令完成。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yabai -m window --toggle zoom-fullscreen</span><br></pre></td></tr></table></figure></p>\n<p>然而若是每次要執行一個動作就必須使用一次指令，這是極度不切實際的。</p>\n<p>因此通常使用者會搭配一套叫做 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=\">skhd</span> 的快捷鍵管理程式，設定自己的快捷鍵映射到 Yabai 的指令。</p>\n<p>還好網路上充斥著各路高手自行設定的 TWM 腳本設定，對於剛接觸的新手而言也大大了降低了入門的難度。</p>\n<p>網路上有人說使用 Yabai 需要關閉 MacOS 的 System Integrity Protection 功能，但是其實這只是 Optional 。除非我們需要「更加進階的用法」不然一般的情況下依然可以很良好的使用。</p>\n<p>我個人很推薦先從這個 Youtuber 的 Yabai 介紹開始下手，他不僅展示了他自己的 Yabai ，還丟出了自己的設定檔跟設定教學。算是非常完整的簡易入門。</p>\n<p><a href=\"https://www.youtube.com/watch?v=JL1lz77YbUE\"><img data-src=\"702b_hqdefault.jpg\" alt=\"Yabai - Tiling Window Manager for Mac [ Tutorial ]\" title=\"Yabai - Tiling Window Manager for Mac [ Tutorial ]\" /></a></p>\n<h4 id=\"安裝-2\"><a class=\"anchor\" href=\"#安裝-2\">#</a> 安裝</h4>\n<p>為了良好的 Yabai 體驗，需要安裝 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFpL3dpa2k=\">yabai</span> 與 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=\">skhd</span> 兩個 cli 套件。</p>\n<p>由於我本人並不想關閉 MacOS 的 System Integrity Protection ，因此以下的安裝流程會是以不關閉 MacOS 的 System Integrity Protection 為主。</p>\n<ul>\n<li>安裝 Yabai</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install koekeishiya/formulae/yabai</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>安裝 jq （這是一個 Json 的可視化 cli ，讓我們可以在 terminal 中容易的操控 JSON 物件）</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install jq</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>安裝 skhd (快捷鍵的設定套件)</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install koekeishiya/formulae/skhd</span><br></pre></td></tr></table></figure></p>\n<p>三個都安裝完之後，你需要設定  <code>.yabairc</code>  以及  <code>.skhdrc</code>  檔案。</p>\n<p>其中  <code>.yabairc</code>  是 yabai 的設定檔；而  <code>.skhdrc</code>  則是 skhd 設定快捷鍵的設定檔。</p>\n<p>你可以將 .yabairc 與 .skhdrc 放置在家目錄 $HOME 中，或是在 .config 中建立各自的 config folder 都可以。</p>\n<p>我自己是將設定檔都 git 包成一包，放在 .config 中，並且使用  <code>ln -s</code>  軟連結到家目錄了。</p>\n<p>如果不嫌棄，也可以使用我的設定<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// git 下載我的 yabai 設定到 .config/yabai</span><br><span class=\"line\">$ git clone https://github.com/z20240/yabai.git &quot;$&#123;HOME&#125;&quot;/.config/yabai</span><br><span class=\"line\">// 軟連結 .config/yabai 中的 yabairc 設定到家目錄</span><br><span class=\"line\">$ ln -s &quot;$&#123;HOME&#125;/.config/yabai/yabai/yabairc&quot; &quot;$&#123;HOME&#125;/.yabairc&quot;</span><br></pre></td></tr></table></figure></p>\n<p>主要實現功能有以下這些</p>\n<ul>\n<li>新增的視窗依照目前的關注位置分割</li>\n</ul>\n<p><img data-src=\"1*ieNyG9uhzw66lGXrjyxNKQ.gif\" alt=\"\" /></p>\n<ul>\n<li>使用快捷鍵水平 / 垂直縮放視窗</li>\n</ul>\n<p><img data-src=\"1*5ZVbxolpIuH9BY8FK4PBIg.gif\" alt=\"\" /></p>\n<ul>\n<li>滑鼠拖動即可調整視窗大小</li>\n</ul>\n<p><img data-src=\"1*3B9-BHm02eQC4mlV_Uh7dg.gif\" alt=\"\" /></p>\n<ul>\n<li>滑鼠拖動到視窗的邊側，可置換視窗到其位置</li>\n</ul>\n<p><img data-src=\"1*vOsem0TohjoiQyRwj__IYA.gif\" alt=\"\" /></p>\n<ul>\n<li>滑鼠拖動可以到視窗中央，可以堆疊這兩個視窗</li>\n</ul>\n<p><img data-src=\"1*0-vM8MdNwqYIa38cHmDIqw.gif\" alt=\"\" /></p>\n<ul>\n<li>快速變換焦點視窗</li>\n</ul>\n<p><img data-src=\"1*PiIo2aasyB15nf1zbMWO9w.gif\" alt=\"\" /></p>\n<ul>\n<li>快速對換視窗</li>\n</ul>\n<p><img data-src=\"1*TZbmWNgQkEmsZmol6fSdnw.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵放大 / 縮小視窗</li>\n</ul>\n<p><img data-src=\"1*uA-p4IlvU3hOKYDsQFy8qg.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵將視窗丟到其他工作區</li>\n</ul>\n<p><img data-src=\"1*k770qOtVklQZxhr0j7aCew.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵將視窗脫離 TWM，並且在這樣的狀況下依然可以快速排列視窗</li>\n</ul>\n<p><img data-src=\"1*rf5sUpiqjZXPuJFW_-TiXQ.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵將視窗與其他視窗堆疊，以堆疊的形式整理視窗</li>\n</ul>\n<p><img data-src=\"1*--6z5M0BwxkCgclrwDuYsQ.gif\" alt=\"\" /></p>\n<ul>\n<li>一鍵旋轉目前的佈局樣式</li>\n</ul>\n<p><img data-src=\"1*RHb6p3zEYN6GIVtXhQvtUg.gif\" alt=\"\" /></p>\n<p>另外，關於 stack 堆疊的效果，我額外使用了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FkYW1XYWduZXIvc3RhY2tsaW5l\">stackline</span> 的小圖示特效。</p>\n<p>他可以更好地將目前有堆疊狀態的視窗給顯示出來，有效的降低了忘記視窗存在的狀況。</p>\n<p>目前我主要就是使用這些功能，未來如果有想到什麼需要的功能會繼續更新在設定檔中。</p>\n<h3 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h3>\n<p>TWM 的使用體驗是真的優於以往的視窗管理方法。</p>\n<p>他更有效率地整理雜亂無章的視窗佈局，大大提高了我們在視窗之間游移速度，並且減少了許多記憶視窗位置的心智負擔。</p>\n<p>至於對於到底該使用 Amethyst 或是 Yabai？</p>\n<p>我認為這完全是個人喜好問題。</p>\n<p>真要給點意見的話，我個人認為從 Amethyst 開始入門是一個不錯的起手式。</p>\n<p>畢竟我就是在 Amethyst 玩一段時間後開始發現 Amethyst 的不足並且決定跳槽到 Yabai。</p>\n<blockquote>\n<p>就像是發現了新大陸一般，著實被 Yabai 的強大給折服。</p>\n</blockquote>\n<p>通過 skhd 搭配 Yabai 的設定，我們幾乎可以做到任何想得到的快捷鍵用法設定。剩下的只有「想不想得到」而沒有「做不做得到」的問題了。</p>\n<h3 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0\">Amethyst</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZA==\">Yabai</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k\">skhd</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubm90aW9uLnNvL1lhYmFpLThkYTNiODI5ODcyZDQzMmZhYzQzMTgxYjdmZjYyOGZj\">Yabai-note</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FkYW1XYWduZXIvc3RhY2tsaW5l\">stackline</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibGFuYm9vbS5vcmcvMjAxOS95YWJhaS8=\">用于 macOS 平铺式窗口管理器 — yabai</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Others",
                "tiling-window-manager"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Linux/2021-06-07-%E9%97%9C%E6%96%BC-selinux-policy/",
            "url": "https://z20240.github.io/Tech/Linux/2021-06-07-%E9%97%9C%E6%96%BC-selinux-policy/",
            "title": "關於 SELinux Policy",
            "date_published": "2021-06-07T11:22:50.189Z",
            "content_html": "<h3 id=\"關於-selinux-policy\"><a class=\"anchor\" href=\"#關於-selinux-policy\">#</a> 關於 SELinux Policy</h3>\n<p>最近工作上需要研究一下 Red Hat 這款 Linux，在其上進行 k8s 安裝時，發現其對於 service 的檔案存取跟 Ubuntu, Debian 這類的 Linux 有些許不同。其中多了一層叫做 SELinux 的 Policy 作為權限存取的保護，因此花了一些時間好好的來了解一下這個 SELinux Policy 是什麼東西。</p>\n<h4 id=\"簡介\"><a class=\"anchor\" href=\"#簡介\">#</a> 簡介</h4>\n<p>SELinux 全稱 (Security-Enhanced Linux) 是一個 Linux core 的 module ，算是一個 Linux 的安全子系統，主要存在 fedora base 的 Linux 中。現在以 CentOS, Red Hat 這幾款 Linux 比較常見。</p>\n<p>SELinux 主要作用是「最大限度地減小系統中可訪問的資源」、能不開放的就不開放（最小權限原則）。</p>\n<p>為什麼會需要 SELinux 呢？主要是基礎的 Linux 在檔案存取的權限控管上總有一些不足之處。</p>\n<h4 id=\"一般-linux-權限管理的問題\"><a class=\"anchor\" href=\"#一般-linux-權限管理的問題\">#</a> 一般 Linux 權限管理的問題</h4>\n<p>一般 Linux 權限管理通常只有兩個級別：  <code>root</code>  與  <code>user</code>  ，當中難以實現更小的權限管理概念。但是這兩個級別的權限又常常會互相賦予。</p>\n<p>例如 Linux 允許用戶或程式將不安全的檔案權限賦予他人，或反過來存取系統正在正常運作下「無須存取的部分」。</p>\n<ul>\n<li>root 無法控制 user ： user 可以把「誰都可以讀取的權限」給予敏感的檔案 ex. ssh 金鑰常放置在～/.ssh 目錄。</li>\n<li>process 可以更改安全性的屬性：每位 user 的郵件應該只供此用戶讀取，但是客戶端的 application 有能力將其改為誰都能讀取。</li>\n<li>process 可以繼承用戶的權限：我們假設某個 service 被木馬程式所佔用，他可能存取 user 的 ssh key 或是其他不該擁有權限存取的檔案。</li>\n</ul>\n<p>簡言之，傳統的 Linux 無法簡易地實施最小權限的理念。很多由 root 啟動的 process 最終都會使用「受限制的用戶身份」來運行、存取用戶的檔案；有些則會在 chroot 的情況下執行。</p>\n<h4 id=\"selinux-解決方案\"><a class=\"anchor\" href=\"#selinux-解決方案\">#</a> SELinux 解決方案</h4>\n<p>SELinux 預設使用 <strong>enforcing</strong> 情況下，一切的存取要求都會先被拒絕。</p>\n<p>接下來使用一系列的「例外政策」來允許系統的每個元素 (service, process, user, …etc) 運作所需要的存取權。 <strong>當一個元素嘗試存取或修改他不須用的檔案或資源的時候，她的請求就會被拒絕。</strong> 並且這個行為會被記錄下來 (預設放置在  <code>/var/log/audit/audit.log</code>  )。</p>\n<h4 id=\"selinux-的工作原理\"><a class=\"anchor\" href=\"#selinux-的工作原理\">#</a> SELinux 的工作原理</h4>\n<p>SELinux 主要有三大部分</p>\n<p><strong>工作模式</strong></p>\n<ul>\n<li>enforcing：強制模式，依據設定來限制檔案資源存取。</li>\n<li>Permissive：寬容模式，不限制檔案資源存取，但仍會依據設定檢查並記錄相關訊息。</li>\n<li>Disabled：停用 SELinux。</li>\n</ul>\n<p><strong>工作類型</strong></p>\n<ul>\n<li>strict：每個 process 都受到限制</li>\n<li>targeted：限制大部分網路的服務 (Red Hat 7 default 是這個)</li>\n<li>minimum：限制部分的網路服務 (CentOS 7 default 是這個)</li>\n<li>mls：多級安全限制</li>\n</ul>\n<p><strong>安全上下文 (Security context)</strong></p>\n<p>在 SELinux 中，我們可以使用  <code>ls -Z</code>  或  <code>ps -eZ</code>  查看到檔案目錄或是 process 的 security context.</p>\n<p>process 或 檔案目錄的 security context 必須對應才能存取。</p>\n<p><img data-src=\"1*o4gpFTbf0gWP-KWY-CnxZQ.png\" alt=\"\" /></p>\n<p>我們可使用  <code>sestatus</code>  查看目前 SELinux 的工作狀態</p>\n<p><img data-src=\"1*sm2kXbOKHi7OHowp5KQfAg.png\" alt=\"\" /></p>\n<p>SELinux 會依照「工作模式」、「工作類型」制定不同的策略，並且去比對 process 或是目錄檔案的 security context ，如果對應才會去比對 Linux 的 RWX 權限，否則就 reject。</p>\n<p><img data-src=\"1*4JcEry75wMdLTp2wkWOSEQ.png\" alt=\"[www.Linuxidc.com](http://www.Linuxidc.com)\" /></p>\n<p>一般來說，我們該隨意地去更動「工作類型」或「工作模式」。</p>\n<p>因此主要都是修改目錄檔案或是 process 的 <strong>security context</strong> 來符合 SELinux 規範。</p>\n<p>security context 主要以以下 5 個字段利用「：」做為分隔符號構成。</p>\n<p>分別代表的涵意如下：</p>\n<ul>\n<li>user：身份識別；「undefined_u：不受限的用戶或文件」、「system_u：受限的 process 或文件」</li>\n<li>role：角色 ；「object_r：文件」、「sytsme_r：process 或 user」</li>\n<li>type：代表數據類型，決定何種類型的 process 可以訪問何種的文件</li>\n<li>sensitivity：安全級別，s0 最低級別 （只有在 mls 類型下會用到）</li>\n<li>category：劃分的不同分類</li>\n</ul>\n<p>另外，我們可以藉由安裝  <code>setools-console.x86_64</code>  來獲得操控 selinux 的指令：</p>\n<ul>\n<li>seinfo</li>\n<li>sesearch</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install setools-console.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>藉由以下幾個指令，我們可以得知 SELinux 有哪些種類的字段。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seinfo -u # 查詢所有的 user 字段 (8個)</span><br><span class=\"line\">seinfo -r # 查詢所有的 role 字段 (14個)</span><br></pre></td></tr></table></figure></p>\n<p>另外我們可以使用 sesearch -A 查詢什麼類型的 process 可以什麼 type 的 file。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sesearch -A -s [type] # 查詢 type 的 process 能夠讀取的文件類型</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*-S0VPmREwFR2J6GZrnWu3A.png\" alt=\"\" /></p>\n<h4 id=\"修改當前的-context\"><a class=\"anchor\" href=\"#修改當前的-context\">#</a> 修改當前的 context</h4>\n<p>可以使用  <code>chcon</code>  手動修改 <strong>security context</strong> 。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chcon [option] target</span><br><span class=\"line\"></span><br><span class=\"line\">chcon -t # 修改 context 的 type</span><br><span class=\"line\">chcon -u # 修改 context 的 user</span><br><span class=\"line\">chcon -r # 修改 context 的 role</span><br><span class=\"line\">chcon -l # 修改 context 的 sensitivity level</span><br><span class=\"line\">chcon -R # Recirsive target 下所有目錄結構修改</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h4>\n<p>SELinux Policy 是一個增強 Linux 安全性的措施。</p>\n<p>我們應該盡量確保一個 process 僅能存取其所需要的檔案與目錄結構。</p>\n<p>另外，我們若要開放存取也應該使用 chcon -t 修改標籤的方式去將目標檔案對 process 類型做匹配，而非直接暴力修改 chmod 或是 chroot 開放資源的權限。</p>\n<p>這篇文章只是很基礎的 SELinux 介紹，以下的參考資料會更加完整與詳細，有興趣可以就這幾篇文章查看，相信會有更完整的認識。</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmNlbnRvcy5vcmcvemgtdHcvSG93VG9zL1NFTGludXg=\">CentOS Wiki — SELinux</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGludXhpZGMuY29tL0xpbnV4LzIwMTgtMDgvMTUzNDU0Lmh0bQ==\">Linux 公社 — SELinux</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ra25ld3MuY2MvemgtdHcvY29kZS9qbW4zbDU2Lmh0bWw=\">每日頭條 — 一文徹底明白 SELinux</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eF9hdG9taWNfaG9zdC83L2h0bWwvZ2V0dGluZ19zdGFydGVkX3dpdGhfa3ViZXJuZXRlcy9nZXRfc3RhcnRlZF9wcm92aXNpb25pbmdfc3RvcmFnZV9pbl9rdWJlcm5ldGVz\">Red Hat — CHAPTER 2. GET STARTED PROVISIONING STORAGE IN KUBERNETES</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eF9hdG9taWNfaG9zdC83L2h0bWwvY29udGFpbmVyX3NlY3VyaXR5X2d1aWRlL2RvY2tlcl9zZWxpbnV4X3NlY3VyaXR5X3BvbGljeQ==\">Red Hat — CHAPTER 6. DOCKER SELINUX SECURITY POLICY</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Linux",
                "linux",
                "rhel",
                "selinux",
                "tech"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Data%20Storage/2021-05-16-sql-mysql-postgresql-%E8%88%87-mongodb-%E5%A6%82%E4%BD%95%E5%A4%A7%E9%87%8F%E7%94%A2%E7%94%9F%E6%B8%AC%E8%A9%A6%E8%B3%87%E6%96%99/",
            "url": "https://z20240.github.io/Tech/Data%20Storage/2021-05-16-sql-mysql-postgresql-%E8%88%87-mongodb-%E5%A6%82%E4%BD%95%E5%A4%A7%E9%87%8F%E7%94%A2%E7%94%9F%E6%B8%AC%E8%A9%A6%E8%B3%87%E6%96%99/",
            "title": "SQL MySQL, PostgreSQL 與 MongoDB 如何大量產生測試資料",
            "date_published": "2021-05-16T11:02:14.778Z",
            "content_html": "<h3 id=\"sql-mysql-postgresql-與-mongodb-如何大量產生測試資料\"><a class=\"anchor\" href=\"#sql-mysql-postgresql-與-mongodb-如何大量產生測試資料\">#</a> [SQL] MySQL, PostgreSQL 與 MongoDB 如何大量產生測試資料</h3>\n<h4 id=\"dummy-data-test-data-mongo-mysql-postgresql\"><a class=\"anchor\" href=\"#dummy-data-test-data-mongo-mysql-postgresql\">#</a> Dummy data, Test data, mongo, mysql, postgresql.</h4>\n<p>在網頁前端的領域，工程師常常使用 <strong>lorem</strong> 這種「不具意義」的文字作為排版的測試。</p>\n<p>在後端領域，我們時常也需要資料庫中有「大量但並不需要具有真實意義的資料」也就是所謂的 dummy data，供我們的程式能夠進行測試。</p>\n<p>網路上有很多可以產生 dummy data 的網站，可以讓人很輕鬆的產生大量的資料供使用者測試跟使用。</p>\n<p>但是，其實我們可以直接使用簡單的 SQL 就達成這樣的目的，無需再去網路上找尋這種 dummy data generator.</p>\n<p>以下針對 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcv\">PostgreSQL</span> 、 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXlzcWwuY29tLw==\">MySQL</span> 跟 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vY2xvdWQvYXRsYXMvbHAvdHJ5Mg==\">MongoDB</span> 三種比較常見的 Database 提供 dummy data generate 的語法。</p>\n<h4 id=\"postgresql\"><a class=\"anchor\" href=\"#postgresql\">#</a> PostgreSQL</h4>\n<p>我們先 Create 一個空 table 作為講解使用。<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Create a table `users`</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users  (</span><br><span class=\"line\">    id uuid <span class=\"keyword\">DEFAULT</span> uuid_generate_v4 (),</span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">    email <span class=\"type\">VARCHAR</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (id)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>基本思路是，利用 PostgreSQL 內建的  <code>generate_series</code>  指令，產生大量的流水號，再利用流水號的數量塞入 random 的資料進資料庫。</p>\n<p>細節的指令可以查看以下的語法：<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- random 10,000 data.</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users (name, email)</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> md5(random()::text), CONCAT(random()::text, <span class=\"string\">&#x27;@xxx.com&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> generate_series(<span class=\"number\">1</span>, <span class=\"number\">10000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>檢查一下是否真的塞入了 10000 筆資料了。</p>\n<p><img data-src=\"1*5I9wbUun0tnHjHOiebc06Q.png\" alt=\"\" /></p>\n<h4 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> MySQL</h4>\n<p>MySQL 沒有像 PostgreSQL 的 generate_series 這樣方便的工具，因此我們要自己寫。</p>\n<p>假設我們一樣需要 10,000 筆的資料，基本思路如下：</p>\n<ol>\n<li>我們先建立一張擁有流水號 1 ~ 10,000 的臨時表，可以使用 in-memory table。</li>\n<li>基於 select 這個臨時表來 insert dummy data.</li>\n</ol>\n<p>那麼問題就簡化到，我們該怎麼建立這樣的臨時表呢？</p>\n<p>網路上有幾種方法。第一種是使用  <code>store procedure</code>  ；其二就是我今天想介紹的作法：直接使用 python, node 這種小程式 <strong>一行創建</strong> 。</p>\n<p><strong>創建臨時表 table</strong><br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE tmp_table (id INT,  PRIMARY KEY (id)) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure></p>\n<p>幫臨時表 insert 10000 筆的流水號的文件，作為準備。</p>\n<p>Python Version:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -c &#x27;print(&quot;id&quot;)</span><br><span class=\"line\">for i in range(1, 1+10000): print(i)&#x27; &gt; base.csv</span><br></pre></td></tr></table></figure></p>\n<p>NodeJs Version:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -e &#x27;console.log(&quot;id&quot;); for(let i=1; i&lt;=10000; i++) console.log(i);&#x27; &gt; base.csv</span><br></pre></td></tr></table></figure></p>\n<p>從 base.txt 導入數據到剛剛的臨時表<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; load data infile &#x27;/Your/file/path/base.txt&#x27; replace into table tmp_table;</span><br></pre></td></tr></table></figure></p>\n<p>確認一下是否有成功導入</p>\n<p><img data-src=\"1*u7tqvIP1aNErGnjuZjRcdg.png\" alt=\"\" /></p>\n<p>接下來我們就能利用這個流水表，創建隨機資料了。</p>\n<p>一樣使用剛剛 Create 資料表的語法創建一個 table 當作目標 table<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Create a table `users`</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `users`  (</span><br><span class=\"line\">    `id` <span class=\"type\">binary</span>(<span class=\"number\">36</span>) <span class=\"keyword\">primary</span> key,</span><br><span class=\"line\">    `name` <span class=\"type\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">    `email` <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>接下來就可以使用  <code>tmp_table</code>  塞入大量的 random data.<br />\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- random 10,000 data.</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users (id, name, email)</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> uuid(), md5(<span class=\"keyword\">LEFT</span>(UUID(), <span class=\"number\">8</span>)), CONCAT(<span class=\"keyword\">LEFT</span>(UUID(), <span class=\"number\">8</span>), <span class=\"string\">&#x27;@xxx.com&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> tmp_table;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"mongodb\"><a class=\"anchor\" href=\"#mongodb\">#</a> MongoDB</h4>\n<p>mongodb 要產生 dummy data 很簡單。</p>\n<p>我們只需要使用 forloop 即可產生我們想要的數量。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo&gt; for (var i = 1; i &lt;= 10000; i++) db.users.insert( &#123; name : UUID(), email: UUID() + &quot;@mail.com&quot; &#125; );</span><br></pre></td></tr></table></figure></p>\n<p>接下來檢查看看，是否真的有 10000 筆資料。</p>\n<p><img data-src=\"1*TvJnGY8LvtvZok6MRDLg9g.png\" alt=\"\" /></p>\n<h4 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h4>\n<p>最近公司開始往大數據的開發方向靠攏，許許多多的程式開發都希望能夠擁有支持大數據處理的能力。</p>\n<p>因此在 local side 如果也能夠建立足夠的數據量，對於 local 的開發會更加單純方便。</p>\n<p>本文整理了幾個比較常見資料庫的產生 dummy data 的方式，除了作為紀錄，也希望能夠幫助到有需要的人。</p>\n<p>另外小小抱怨一下： <em>MySQL 產生 dummy data 的方式真的是有夠麻煩。</em></p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbmR5eW91LmdpdGh1Yi5pby8yMDE0LzAxLzI5L21vbmdvZGItbm90ZXMv\">MongoDB 快速入門筆記</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODQ3OTQ1NTg0NjQ3I2Zyb21IaXN0b3J5\">MySQL 快速创建千万级测试数据</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQ4NDExNDIvaG93LWNhbi1pLWdlbmVyYXRlLWJpZy1kYXRhLXNhbXBsZS1mb3ItcG9zdGdyZXNxbC11c2luZy1nZW5lcmF0ZS1zZXJpZXMtYW5kLXJhbmQ=\">How can I generate big data sample for Postgresql using generate_series and random?</span></li>\n</ul>\n",
            "tags": [
                "Tech",
                "Data Storage",
                "mysql",
                "postgresql",
                "mongodb"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/2021-02-09-front-end-emmet-%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E9%96%8B%E7%99%BC%E7%9A%84%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/",
            "url": "https://z20240.github.io/Tech/Frontend/2021-02-09-front-end-emmet-%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E9%96%8B%E7%99%BC%E7%9A%84%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/",
            "title": "Front-end Emmet , 前端快速開發的神兵利器",
            "date_published": "2021-02-09T09:41:20.740Z",
            "content_html": "<h3 id=\"front-end-emmet-前端快速開發的神兵利器\"><a class=\"anchor\" href=\"#front-end-emmet-前端快速開發的神兵利器\">#</a> [Front-end] Emmet , 前端快速開發的神兵利器</h3>\n<h4 id=\"一個-snapchat-標準庫只需要少少的記憶就可以大大提升html-css-的撰寫效率\"><a class=\"anchor\" href=\"#一個-snapchat-標準庫只需要少少的記憶就可以大大提升html-css-的撰寫效率\">#</a> 一個 Snapchat 標準庫，只需要少少的記憶，就可以大大提升 HTML、CSS 的撰寫效率</h4>\n<p>VSCode 最近的更版對於 Emmet 的支持更加完整了，因此決定來寫一篇文章介紹 Emmet 。</p>\n<p><img data-src=\"0*4D_q0c3hxHQcjjYE.gif\" alt=\"[https://code.visualstudio.com/updates/v1_53](https://code.visualstudio.com/updates/v1_53)\" /></p>\n<p>身為 web engineer ，在寫 HTML 的時候總是要打那煩人的左右角括號，並且還要在每個標籤結尾寫上結尾標籤，著實麻煩。</p>\n<p>emmet 就是為了我們這種懶人發明的一鍵 HTML 產生器！</p>\n<p>我們只需要依照著 Emmet 的規則，編寫我們想要的 html 結構，之後按下 「Tab」，Emmet 就會自動幫我產生相對應的 HTML Code ！</p>\n<p>就像上面的那張 GIF 展示的那樣～</p>\n<p><a href=\"https://docs.emmet.io/\"><strong>Emmet Documentation</strong></a><br />\n<a href=\"https://docs.emmet.io/\"><em>Emmet is a web-developer's toolkit that can greatly improve your HTML &amp; CSS workflow: Basically, most text editors out…</em> docs.emmet.io</a></p>\n<p>Emmet 的語法很簡單也不多，且很多規則跟 CSS 的選擇器語法很相近。對於會寫 CSS 的人來說，幾乎是無痛學習。</p>\n<p>以下就來針對 Emmet 的語法介紹一下。</p>\n<p><strong>元素標籤 + Tab</strong></p>\n<p>emmet 的使用方法就是，打好一串表達語法之後，按下「Tab」，就會自動轉換成相對應的 HTML 了。</p>\n<p><img data-src=\"1*4l8SN32JJqXAjF-RKnexwg.gif\" alt=\"\" /></p>\n<p><strong>使用 &quot;!&quot; 一鍵生成 HTML 結構</strong></p>\n<p>emmet 可以使用 &quot;!&quot; 一鍵生成 HTML Template，我們不用再自己從  <code>&lt;!DOCTYPE html&gt;</code>  開始一個字一個字敲打了。</p>\n<p><img data-src=\"1*bpP5Wasjp58bz3SeU2dT1g.gif\" alt=\"\" /></p>\n<p><strong>使用 &gt; 表示結構的「下一層」</strong></p>\n<p>像是 CSS 選擇器中，我們想要表達階層結構的時候，可以使用 &gt; 來選取子元素。Emmet 也可以使用 「&gt;」 來表示這種巢狀結構。</p>\n<p>例如：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&gt;ul&gt;li</span><br></pre></td></tr></table></figure></p>\n<p>會展開成這樣<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*IutHuFaDKyL83MZuxHwXNA.gif\" alt=\"\" /></p>\n<p><strong>使用 *N 代表要重複 N 次</strong></p>\n<p>例如，我們可以使用  <code>li*5</code>  讓他自動重複 5 次，產生五個  <code>&lt;li&gt;&lt;/li&gt;</code></p>\n<p><img data-src=\"1*UyCQppxtpLwqyTFLijikdA.gif\" alt=\"\" /></p>\n<p><strong>使用 + 表示結構的「同一層」</strong></p>\n<p>通常一個標準的 html 頁面需要有 header, main, footer 。這時候就可以用 + 很簡單地產生。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header+main+footer</span><br></pre></td></tr></table></figure></p>\n<p>會展開成<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;header&gt;&lt;/header&gt;</span><br><span class=\"line\">&lt;main&gt;&lt;/main&gt;</span><br><span class=\"line\">&lt;footer&gt;&lt;/footer&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*-JvloFLYjqUzfVfZjkCG5g.gif\" alt=\"\" /></p>\n<p><strong><em>綜合練習</em></strong></p>\n<p>如果我想要產生如下的結構，該怎麼寫呢？<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;header&gt;&lt;/header&gt;</span><br><span class=\"line\">&lt;main&gt;</span><br><span class=\"line\">    &lt;article&gt;&lt;/article&gt;</span><br></pre></td></tr></table></figure></p>\n<p><em>寫法：  <code>header+main&gt;article+section*6</code> </em></p>\n<p><strong>使用 ^ 跳回上一層</strong></p>\n<p>我們可以使用 ^ 跳回到上一層，例如剛剛的例子，如果我們想要在  <code>main</code>  後面繼續接著寫 HTML 結構，我們就可以使用 ^ 來回到與 main 同一層的地方繼續往下串接我們的語法。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header+main&gt;article+section*6^footer</span><br></pre></td></tr></table></figure></p>\n<p>會展開成<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;header&gt;&lt;/header&gt;</span><br><span class=\"line\">&lt;main&gt;</span><br><span class=\"line\">    &lt;article&gt;&lt;/article&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*rz00s3Dj25n2wbqTPovThQ.gif\" alt=\"\" /></p>\n<p>當然，如果我們想要往外多跳幾層，我們只需要多重複幾次 ^ 即可。</p>\n<p><img data-src=\"1*sF0HVT8G5gfOwiCeToBNCg.gif\" alt=\"\" /></p>\n<p><strong>使用 ( ) 將結構分塊，增加可讀性</strong></p>\n<p>由於 Emmet 的語法轉換器，是一次 parse 這一連串的字串，因此不允許語法中存在空格，但這也讓在撰寫這表達式的時候可讀性不佳。此時我們可以使用 ( ) 來為結構分塊。</p>\n<p>以上方的例子來說，我們就可以改寫成下方這樣<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header+(main&gt;nav&gt;ul&gt;li*4)+article+section*3+footer</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*c2jZ3I4MSQQAv8S2lGwHqw.gif\" alt=\"\" /></p>\n<p><strong>使用。表示 class / # 表示 ID / [] 表示其他屬性 / {} 表示標籤之間的內容</strong></p>\n<p>Emmet 一樣支援標籤內的屬性描述。</p>\n<p>例如最常見的 &lt;a&gt; 標籤，我們就可以給他額外的屬性<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.link#customLink[src=&#x27;test.png&#x27; alt=&#x27;test&#x27;]&#123;This is a test link&#125;</span><br></pre></td></tr></table></figure></p>\n<p>會自動展成這樣<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;&quot; class=&quot;link&quot; id=&quot;customLink&quot; src=&quot;test.png&quot; alt=&quot;test&quot;&gt;This is a test link&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*xYvBbURns_-f3w08g1zVLg.gif\" alt=\"\" /></p>\n<p><strong>使用 $ 可以自動記數</strong></p>\n<p>有些時候，我們希望 class 的名稱能夠照著數字順序給，這個時候，可以使用 $ 讓他 auto incremental</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li.class$*5</span><br></pre></td></tr></table></figure></p>\n<p>會展開成<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li class=&quot;class1&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class2&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class3&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class4&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class5&quot;&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>\n<p>當然我們也可以多給幾個 $，來代表要「幾位數」</p>\n<p><img data-src=\"1*A_2TRu4IpBPa6kiqKd5gEA.gif\" alt=\"\" /></p>\n<p><strong>使用 @ 給予起始值</strong></p>\n<p>剛剛的例子中，我們也可以不要從 1 開始，使用 @ 可以指定一個起始數字。</p>\n<p><img data-src=\"1*zYGPsvtn0yFucRQvweP-Ug.gif\" alt=\"\" /></p>\n<p><strong>使用 - 來倒著數回去</strong></p>\n<p>這基本上很少使用到，但是還是說一下。我們除了順著數，也可以倒著屬回去。</p>\n<p>一樣以剛剛的 li 為例，我們如果在 @ 後面多增加一個 「-」，就可以讓數字由大到小排列。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li.class$@-10*30</span><br></pre></td></tr></table></figure></p>\n<p>會展開成<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li class=&quot;class39&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class38&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class37&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class36&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class35&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class34&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class33&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class32&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class31&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li class=&quot;class30&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"1*ZVzYUKvGMGxVSMVBeFAM3Q.gif\" alt=\"\" /></p>\n<p>當然，我們也可以一般地使用 (不設定起始數字)</p>\n<p><img data-src=\"1*raTa4R7FKI8NlWqPNXw6Tg.gif\" alt=\"1*raTa4R7FKI8NlWqPNXw6Tg.gif\" /></p>\n<p>Emmet 的功能很強大，但是其實語法都是有邏輯可以依循的，學起來感覺並不會太困難。</p>\n<p>如果記不起來也沒關係，以下已經幫忙提供了一份小抄。</p>\n<p><a href=\"https://docs.emmet.io/cheat-sheet/\"><strong>Emmet Documentation</strong></a></p>\n<h4 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h4>\n<p>Emmet 真的是懶人工程師的一大利器，我個人認為以這學習成本極低的情況，多了解一項也並非壞事。</p>\n<p>而且也僅需要敲打少少的文字，就能產生好整份 HTML 結構。真的是用過就回不去了！</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmVtbWV0LmlvL2NoZWF0LXNoZWV0Lw==\">https://docs.emmet.io/cheat-sheet/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2Z1YmxvZy5jb20vMjAxNy8wOC9lbW1ldC1zdWJsaW1lLXRleHQuaHRtbA==\">https://www.wfublog.com/2017/08/emmet-sublime-text.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wamNoZW5kZXIuYmxvZ3Nwb3QuY29tLzIwMTYvMDcvZW1tZXQuaHRtbA==\">https://pjchender.blogspot.com/2016/07/emmet.html</span></li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Frontend",
                "html",
                "frontend",
                "emmet",
                "vscode"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Others/2021-02-09-windows-%E6%89%8B%E5%8B%95%E7%A7%BB%E9%99%A4-%E6%96%B0%E5%A2%9E-%E7%A7%BB%E9%99%A4%E7%A8%8B%E5%BC%8F-%E6%B8%85%E5%96%AE%E4%B8%AD%E7%84%A1%E6%B3%95%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%A8%8B%E5%BC%8F/",
            "url": "https://z20240.github.io/Tech/Others/2021-02-09-windows-%E6%89%8B%E5%8B%95%E7%A7%BB%E9%99%A4-%E6%96%B0%E5%A2%9E-%E7%A7%BB%E9%99%A4%E7%A8%8B%E5%BC%8F-%E6%B8%85%E5%96%AE%E4%B8%AD%E7%84%A1%E6%B3%95%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%A8%8B%E5%BC%8F/",
            "title": "Windows 手動移除「新增/移除程式」清單中無法被移除的程式",
            "date_published": "2021-02-09T04:35:41.491Z",
            "content_html": "<h3 id=\"windows-手動移除新增移除程式清單中無法被移除的程式\"><a class=\"anchor\" href=\"#windows-手動移除新增移除程式清單中無法被移除的程式\">#</a> [Windows] 手動移除「新增 / 移除程式」清單中無法被移除的程式</h3>\n<h4 id=\"相比於-macos-跟-linuxwindows-好多東西都是藏在機碼裡\"><a class=\"anchor\" href=\"#相比於-macos-跟-linuxwindows-好多東西都是藏在機碼裡\">#</a> 相比於 MacOS 跟 Linux，Windows 好多東西都是藏在機碼裡</h4>\n<p>最近會碰到這個問題的原因在於我更新 Docker desktop for windows 時出現了一些意外，導致 docker desktop 無法成功更新，因此卡在一個「裝不完全的狀況」。</p>\n<p>新增移除程式要刪除的話會跳出「 <em>找不到 &quot;C:\\path\\for\\docker\\install\\location&quot;</em> 」之類的錯誤訊息。偏偏想要重新安裝，docker installer 又認為你已經安裝過了，會直接跳 Install finished.</p>\n<p>真的令人欲哭無淚～～～😂😂😂😂😂😂😂</p>\n<p>為了讓 docker installer 能夠重新啟動安裝程序，勢必要先刪除掉 「新增 / 移除程式」列表中的 Zombie Docker。於是我上網找了一些資訊後，終於讓我找到了手動解除安裝的方法了！</p>\n<p>以下開始操作流程。</p>\n<p>首先，點選 [開始]，再按一下 [執行]，在 [開啟] 方塊中輸入 regedit，然後按 ENTER。呼叫出 Windows 的 regedit。這是紀錄 windows 機碼的地方。</p>\n<p><img data-src=\"1*KyjfFojRFu2tKRlqfPlrAA.png\" alt=\"\" /></p>\n<p>接下來從左側欄中逐項找出</p>\n<p><strong>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall</strong></p>\n<p><img data-src=\"1*_SqNf0EQ2vCvFsO5eM2zvg.png\" alt=\"\" /></p>\n<p>這邊的每個亂碼資料夾，都對應著你所安裝的一個程式。</p>\n<p>接下來就是，一個一個確認，找出哪一個是你要刪除的程式了。</p>\n<p>我們可以通過 <strong>DisplayName</strong> 查看這個資料夾代表的是哪個程式。</p>\n<p>例如，我有裝 AWS Command Line Interface ，所以在這邊就能看到我安裝的 AWS Command Line Interface。</p>\n<p><img data-src=\"1*hjrrM9Q7CVlkMtWVlcTkfw.png\" alt=\"\" /></p>\n<p>找到要移除的機碼之後，對他「滑鼠按右鍵 -&gt; 刪除」</p>\n<p><img data-src=\"1*kdfkj20bkBl5VtdXLnA3Zw.png\" alt=\"\" /></p>\n<p>之後再回到控制台中去檢查「新增 / 移除程式」列表，應該就會發現剛剛刪除的程式已經不在列表當中了！</p>\n<p>這個時候，再回來重新安裝 Docker ，終於可以正常安裝了！！</p>\n<p><strong>參考資料</strong></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vemgtdHcvdG9waWMvJUU1JUE2JTgyJUU0JUJEJTk1JUU2JTg5JThCJUU1JThCJTk1JUU3JUE3JUJCJUU5JTk5JUE0JUU2JTk2JUIwJUU1JUEyJTlFLSVFNyVBNyVCQiVFOSU5OSVBNCVFNyVBOCU4QiVFNSVCQyU4RiVFNiVCOCU4NSVFNSU5NiVBRSVFNCVCOCVBRCVFNyU5QSU4NCVFNyVBOCU4QiVFNSVCQyU4Ri00OTQ5NDE1OS1kMjE1LTA3YjItZTRjNy0wNTA0NTdiMzgzNTI=\">如何手動移除新增 / 移除程式清單中的程式</span></li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Others",
                "windows",
                "regedit"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/2020-11-13-axios-%E5%A6%82%E4%BD%95-cancel-%E5%B7%B2%E7%B6%93%E7%99%BC%E5%87%BA%E7%9A%84-request/",
            "url": "https://z20240.github.io/Tech/Frontend/2020-11-13-axios-%E5%A6%82%E4%BD%95-cancel-%E5%B7%B2%E7%B6%93%E7%99%BC%E5%87%BA%E7%9A%84-request/",
            "title": "Axios 如何 Cancel 已經發出的 Request?",
            "date_published": "2020-11-13T08:25:21.070Z",
            "content_html": "<h3 id=\"axios-如何-cancel-已經發出的-request\"><a class=\"anchor\" href=\"#axios-如何-cancel-已經發出的-request\">#</a> [Axios] 如何 Cancel 已經發出的 Request?</h3>\n<p>最近收到一個很有趣的需求：希望我們取消已經發出但是未獲得 Response 的 Request 。</p>\n<p>因此基於圓滿完成任務後，必須留下痕 (紀) 跡 (錄) 的精神，決定來寫一下這篇。</p>\n<h4 id=\"canceltoken\"><a class=\"anchor\" href=\"#canceltoken\">#</a>  <code>CancelToken</code></h4>\n<p>Axios 在 v0.15 版本之後就已經支援了基於  <code>cancelable promise proposal</code>  的 Cancelable 功能，因此目前我們使用的 Axios 應該都擁有這項能力才是。</p>\n<p>查找 Axios 的 Document 後，了解其 cancel request 的思路其實也很單純。</p>\n<ol>\n<li>使用 CancelToken.source ( ) 產生 cancel instance，其中包含一個 unique token。</li>\n<li>當 axios 要 send request 前，我們就在 option 中加上這個 token 作為 axios 的識別。</li>\n<li>當我們要 cancel 的時候，僅需要利用  <code>source.cancel()</code>  即可達到目標。</li>\n</ol>\n<p><em>p.s. 一個 cancel token 可以 cancel 多個 request.</em></p>\n<p>以 github 上 axios 的範例來說，程式碼可以寫成這樣。<br />\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成 CancelToken 的 instance 命名為 source.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CancelToken</span> = axios.<span class=\"property\">CancelToken</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = <span class=\"title class_\">CancelToken</span>.<span class=\"title function_\">source</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">cancelToken</span>: source.<span class=\"property\">token</span> <span class=\"comment\">// 將 source 的 unique token 加入 request，作為 cancel 的識別</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">thrown</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果 request 被啟動 cancel ，則做一些 canceled 的處理。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (axios.<span class=\"title function_\">isCancel</span>(thrown)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request canceled&#x27;</span>, thrown.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post 一樣可以進行 cancel ，只是 options 變成放在第三個位置。</span></span><br><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/user/12345&#x27;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;new name&#x27;</span> &#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">cancelToken</span>: source.<span class=\"property\">token</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cancel the request (the message parameter is optional)</span></span><br><span class=\"line\">source.<span class=\"title function_\">cancel</span>(<span class=\"string\">&#x27;Operation canceled by the user.&#x27;</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"在-interceptors-中使用-canceltoken\"><a class=\"anchor\" href=\"#在-interceptors-中使用-canceltoken\">#</a> 在  <code>interceptors</code>  中使用 CancelToken</h4>\n<p>在實務上，我們通常會先使用 axios create 一個客製化的 instance，再用  <code>instance.interceptors.request / instance.interceptors.response</code>  攔截 ajax 的  <code>request, response</code>  。</p>\n<p>這種情況下，我們該怎麼做才能將 cancelToken 加入至生成的 instance 呢？</p>\n<p>依照 Document 中的範例:</p>\n<p><img data-src=\"1*mSPQ2f7osaeXy45N9jLFQw.png\" alt=\"\" /></p>\n<p>我們可以 callback function 的方式將 cancel function  <code>reference</code>  出來。</p>\n<p>所以我們就可以將原本的 instance 改成以下的寫法。<br />\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CancelToken</span> = axios.<span class=\"property\">CancelToken</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cancelFunc) <span class=\"title function_\">cancelFunc</span>(); <span class=\"comment\">// cancel request</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// generate the cancel token instance to the request.</span></span><br><span class=\"line\">  <span class=\"comment\">// And reference the cancelFunc to the callback function `c`.</span></span><br><span class=\"line\">  config.<span class=\"property\">cancelToken</span> =  <span class=\"keyword\">new</span> <span class=\"title class_\">CancelToken</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">executor</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">    cancelFunc = c;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>甚至再進階一點，我們創建一個 request pool 蒐集所有的 request ，使其每當有相同的 request 被重複發送，就 cancel 掉上一個未回來的 request。<br />\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用 axios 的 cancelToken</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CancelToken</span> = axios.<span class=\"property\">CancelToken</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立一個 request pool</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> requestPool = <span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\"> &#123;[url: string]: import(&#x27;axios&#x27;).Canceler </span>&#125; &#125; */</span> (&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create an axios instance</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: process.<span class=\"property\">env</span>.<span class=\"property\">VUE_APP_BASE_API</span>, <span class=\"comment\">// url = base url + request url</span></span><br><span class=\"line\">  <span class=\"comment\">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">300000</span> <span class=\"comment\">// request timeout</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// request interceptor</span></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// cancel 掉 request pool 中相同的 requst.</span></span><br><span class=\"line\">    <span class=\"comment\">// hint. 若 pool 中的 request 上已經 response, cancel 的 call 不會生效。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestPool[config.<span class=\"property\">url</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> cancel = requestPool[config.<span class=\"property\">url</span>]</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> requestPool[config.<span class=\"property\">url</span>]</span><br><span class=\"line\">      <span class=\"title function_\">cancel</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">status</span>: <span class=\"string\">&#x27;cancel&#x27;</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Cancel repeated request:&#x27;</span> + config.<span class=\"property\">url</span> &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 將新的 request 的 cancel 覆蓋掉舊的 cancel request.</span></span><br><span class=\"line\">    config.<span class=\"property\">cancelToken</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">CancelToken</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">executor</span> (c) &#123;</span><br><span class=\"line\">      requestPool[config.<span class=\"property\">url</span>] = c</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do something with request error</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error) <span class=\"comment\">// for debug</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// response interceptor</span></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * If you want to get http information such as headers or status</span></span><br><span class=\"line\"><span class=\"comment\">   * Please return  response =&gt; response</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Determine the request status by custom code</span></span><br><span class=\"line\"><span class=\"comment\">   * Here is just an example</span></span><br><span class=\"line\"><span class=\"comment\">   * You can also judge the status by HTTP Status Code</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.<span class=\"property\">data</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title class_\">IsJsonString</span>(error.<span class=\"property\">message</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> errMsg = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(error.<span class=\"property\">message</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (errMsg.<span class=\"property\">status</span> === <span class=\"string\">&#x27;cancel&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(errMsg.<span class=\"property\">message</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>接下來我們就可以來嘗試看看是否真的有生效 (cancel 掉前面的 request)</p>\n<p><img data-src=\"1*tsSFPOgWSZcPh9XTEavQwA.gif\" alt=\"\" /></p>\n<p>至此，我們就完美達成了需求啦～！</p>\n<p>可喜可賀！ 可喜可賀！</p>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Frontend",
                "javascript",
                "axios"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Others/2020-11-04-%E5%91%8A%E5%88%A5-powershell-%E8%88%87-cmd-%E6%93%81%E6%8A%B1-windows-terminal-%E5%8C%85%E6%8B%AC%E8%87%AA%E8%A8%82%E6%A8%A3%E5%BC%8F/",
            "url": "https://z20240.github.io/Tech/Others/2020-11-04-%E5%91%8A%E5%88%A5-powershell-%E8%88%87-cmd-%E6%93%81%E6%8A%B1-windows-terminal-%E5%8C%85%E6%8B%AC%E8%87%AA%E8%A8%82%E6%A8%A3%E5%BC%8F/",
            "title": "告別 PowerShell 與 CMD，擁抱 Windows Terminal (包括自訂樣式)",
            "date_published": "2020-11-04T03:58:12.564Z",
            "content_html": "<h3 id=\"告別-powershell-與-cmd擁抱-windows-terminal-包括自訂樣式\"><a class=\"anchor\" href=\"#告別-powershell-與-cmd擁抱-windows-terminal-包括自訂樣式\">#</a> 告別 PowerShell 與 CMD，擁抱 Windows Terminal (包括自訂樣式)</h3>\n<h4 id=\"睽違了如此多年windows-終於在-terminal-上注意到使用者了\"><a class=\"anchor\" href=\"#睽違了如此多年windows-終於在-terminal-上注意到使用者了\">#</a> 睽違了如此多年，Windows 終於在 Terminal 上注意到使用者了</h4>\n<blockquote>\n<p>在文章開始之前，我們先來看看 Windows Terminal 的工商廣告，傳傳教吧～</p>\n</blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=8gw0rXPMMPE\"><img data-src=\"19cf_hqdefault.jpg\" alt=\"The new Windows Terminal\" title=\"The new Windows Terminal\" /></a></p>\n<p>以往提到 Windows 的 Terminal ，大家的印象都是這樣</p>\n<p><img data-src=\"1*ToHMLSXBYrKwNgDHjkFR4w.png\" alt=\"\" /></p>\n<p>或是這樣</p>\n<p><img data-src=\"1*tnjjMpf606Nc3hFo5RauNA.png\" alt=\"\" /></p>\n<p>比起隔壁棚 (MaxOS) 有強大的 iTerm2 可以客製化自己的佈景主題、使用熱鍵、字體大小、文字主題… 等。Windows 的簡直  <code>like a sh_t</code>  。</p>\n<p>因此，在得知 windows 要推出新的 terminal 讓人著實非常期待。</p>\n<blockquote>\n<p>Windows Terminal 是一種現代化、快速、高效、功能強大且具生產力的終端應用程式，適合命令列工具和 Shell (像是命令提示字元、PowerShell 和 WSL) 的使用者。主要功能包括多個索引標籤、窗格、Unicode 和 UTF-8 字元支援、GPU 加速的文字呈現引擎，以及自訂主題、樣式和設定。</p>\n</blockquote>\n<p>本篇將講述如何安裝 Windows Terminal 以及自訂 Windows Terminal 的樣式。</p>\n<h4 id=\"安裝\"><a class=\"anchor\" href=\"#安裝\">#</a> 安裝</h4>\n<p>Windows 安裝東西都很簡單，打開 Microsoft store ，找尋 Windows Terminal ，安裝即可。</p>\n<p><img data-src=\"1*ccFZQhAqUQnN_VzNVZks5w.png\" alt=\"\" /></p>\n<p><img data-src=\"1*RBKVWvWz58gDliZ19_gDig.png\" alt=\"\" /></p>\n<p>剛安裝完的時候會長成這樣原始的樣子。但是已經整合了 OS 中擁有的 Terminal。</p>\n<p><img data-src=\"1*wglfuUP-kzJ0NAlIVFAVEw.png\" alt=\"\" /></p>\n<h4 id=\"個人化佈景主題\"><a class=\"anchor\" href=\"#個人化佈景主題\">#</a> 個人化佈景主題</h4>\n<p>先上結論，以下是我目前調整完後的樣式，個人非常地滿意。</p>\n<p><img data-src=\"1*1xbwxWw8CwNf_RNo4VoUNA.png\" alt=\"\" /></p>\n<p>首先我們選取「設定」開啟位於  <code>C:\\Users\\your-user\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState</code>  中的  <code>settings.json</code>  。</p>\n<p><img data-src=\"1*koMTJ4hDD1T6GwwKdPXUHA.png\" alt=\"\" /></p>\n<p>找到  <code>profiles</code>  區域，我們可以看到分為 default 與 list 兩處。</p>\n<p><strong>default</strong> 用來存放全域設定，如果你有一些設定想要 apply 到所有類型的 Terminal ，就將這些設定寫在 default。</p>\n<p><img data-src=\"1*iy_uqJrXLlsLEao75Gpo1w.png\" alt=\"\" /></p>\n<p><strong>list</strong> 的部分用來分別對特定 Terminal 的進行個人化設定</p>\n<p><img data-src=\"1*-nI7Q6hnOV6RKIag4XdUQw.png\" alt=\"\" /></p>\n<p>布景配色可以上這個網站找尋，裡面有大量的 Windows Terminal 色彩配置，可以任君挑選。</p>\n<p><img data-src=\"1*iWY8_kxIAQCq-Sy2Yt4ovQ.png\" alt=\"\" /></p>\n<p><a href=\"https://windowsterminalthemes.dev/\"><strong>Windows Terminal Themes</strong></a><br />\n<a href=\"https://windowsterminalthemes.dev/\"><em>Browse and copy hundreds of themes for Windows Terminal</em> windowsterminalthemes.dev</a></p>\n<p>選好喜歡的主題後點選  <code>Get theme</code>  複製主題的 Json，貼在 profiles 中的  <code>schemas</code>  處。</p>\n<p><img data-src=\"1*Q43c7Cex6esd_k47iqdMoQ.png\" alt=\"\" /></p>\n<p>然後在  <code>colorScheme</code>  設定想要的主題名稱。</p>\n<p>你也可以使用  <code>backgroundImage</code>  設定自己的背景照片與 Icon 圖片。</p>\n<p><img data-src=\"1*A6Z2EayE-kPdzZM1naNsBw.png\" alt=\"\" /></p>\n<p>這邊講解一下我有使用到的參數所代表的意義。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colorScheme: 佈景主題名稱</span><br><span class=\"line\">acrylicOpacity: 壓克力效果的透明度 (0~1)</span><br><span class=\"line\">backgroundImage: 背景圖片的路徑</span><br><span class=\"line\">backgroundImageOpacity: 背景圖片的透明度</span><br><span class=\"line\">useAcrylic: 是否開啟壓克力效果(true/false)這邊必須開啟才能使用</span><br></pre></td></tr></table></figure></p>\n<p>基本上這樣就設定完成了。<br />\n我們就可以來享受自己修改後的成果啦～！!</p>\n<p>您的鼓勵是我持續分享的動力。</p>\n<p>如果覺得這篇文章有幫助的話，請不吝給予一點鼓勵吧～</p>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Others",
                "windows-terminal",
                "wsl"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/vue/2020-09-17-vue-vue3-%E5%8D%B3%E5%B0%87%E6%AD%A3%E5%BC%8F%E4%B8%8A%E7%B7%9A-%E5%AE%83%E8%A7%A3%E6%B1%BA%E4%BA%86vue2%E7%9A%84%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C-%E5%8F%88%E8%B7%9F-react-hooks-%E6%9C%89%E4%BB%80%E9%BA%BC%E9%97%9C%E4%BF%82/",
            "url": "https://z20240.github.io/Tech/Frontend/vue/2020-09-17-vue-vue3-%E5%8D%B3%E5%B0%87%E6%AD%A3%E5%BC%8F%E4%B8%8A%E7%B7%9A-%E5%AE%83%E8%A7%A3%E6%B1%BA%E4%BA%86vue2%E7%9A%84%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C-%E5%8F%88%E8%B7%9F-react-hooks-%E6%9C%89%E4%BB%80%E9%BA%BC%E9%97%9C%E4%BF%82/",
            "title": "Vue Vue3 即將正式上線，它解決了Vue2的什麼問題? 又跟 React-hooks 有什麼關係?",
            "date_published": "2020-09-17T10:15:44.262Z",
            "content_html": "<h3 id=\"vue-vue3-即將正式上線它解決了vue2的什麼問題-又跟-react-hooks-有什麼關係\"><a class=\"anchor\" href=\"#vue-vue3-即將正式上線它解決了vue2的什麼問題-又跟-react-hooks-有什麼關係\">#</a> [Vue] Vue3 即將正式上線，它解決了 Vue2 的什麼問題？又跟 React-hooks 有什麼關係？</h3>\n<h4 id=\"vue3-的來臨對於-vue-開發圈的影響之於-react-hooks-的降臨改變-react-開發圈一般重大\"><a class=\"anchor\" href=\"#vue3-的來臨對於-vue-開發圈的影響之於-react-hooks-的降臨改變-react-開發圈一般重大\">#</a> Vue3 的來臨對於 Vue 開發圈的影響，之於 React-hooks 的降臨改變 React 開發圈一般重大</h4>\n<p><img data-src=\"0*KwYbSLWGVrGrhh4D.jpg\" alt=\"鎮版圖 [http://hk.hdwall365.com/USA-canyon-river-hills-rocks-clouds-dawn_1920x1200_wallpaper.html](http://hk.hdwall365.com/USA-canyon-river-hills-rocks-clouds-dawn_1920x1200_wallpaper.html)\" /></p>\n<p>Vue framework 即將迎來 3.0 大改版。</p>\n<p>對比於 Vue 2 的版本，Vue 3 的的體積變得 <strong>更小</strong> 、執行速度變得 <strong>更快</strong> 、並且 <strong>加強了對 Typescript 的支持</strong> 以及 <strong>開放了更多的底層功能</strong> ，使得開發者可以直接調用。</p>\n<h4 id=\"優勢\"><a class=\"anchor\" href=\"#優勢\">#</a> 優勢</h4>\n<ul>\n<li><strong>更快</strong></li>\n</ul>\n<ol>\n<li>捨棄了 <strong>Object.defineProperty</strong> 改為使用 ES6 的 Proxy 對基礎型別進行重新定義，大大提升了 Vue 的在 Javascript engine 的執行效率。</li>\n</ol>\n<blockquote>\n<p>為何會如此說呢？<br />\n因為 Object.defineProperty 是在 Runtime 時期對 Object 增減 property 的。對於任一個 Language engine，動態計算 property 所需的費用都是昂貴的。<br />\nProxy 不同於 Object.defineProperty 在於，其並未對原始對象進行改動，而是直接「代理」此對象，執行增加 / 減少的功能。這在 Javascript Engine 轉譯 Javascript 上，相較於前者的執行費用便小得多。</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p><strong>Virtual DOM 的重構。</strong></p>\n</li>\n<li>\n<p><strong>更多編譯時的優化。</strong></p>\n</li>\n</ol>\n<p><img data-src=\"1*mRZLw9fTTe1HNiERY1ikBQ.png\" alt=\"scripting 時間減少超過一半 ( [https://www.youtube.com/watch?v=AnoZheeH0Nk](https://www.youtube.com/watch?v=AnoZheeH0Nk) )\" /></p>\n<ul>\n<li><strong>更好的 Typescript 支持 &amp; 開放更多底層的 API。</strong></li>\n</ul>\n<p>我們都知道，過去 Vue2 對於 Typescript 並不友善，主要原因是 Vue 依靠  <code>this</code>  export 所有的 property，然而造成的了許多麻煩。</p>\n<p>其中一個明顯的問題是：”methods function 中的  <code>this</code>  指向  <code>vue instance</code>  而非 method ，造成 Typescript 類型推導上不小的成本。”</p>\n<p>因此我們會發現，在 Vue2 的 Typescript 專案中，人們還需要另外通過  <code>vue-class-component</code>  這個 library 借助 <span class=\"exturl\" data-url=\"aHR0cDovL2NhaWJhb2ppYW4uY29tL2VzNi9kZWNvcmF0b3IuaHRtbA==\">Decorator</span> 來達到類型推導。</p>\n<p>在 Vue3 中，引進了 <strong>Composite-API</strong> ，更好地支持了 Typescript 的類型推導，並且還解決了 Vue2 時許多為人詬病的開發上的「問題」。</p>\n<p>以下，我們就先來講講 Vue2 碰到了什麼樣的難題，Vue3 又是怎麼樣子解決了這些問題。</p>\n<h4 id=\"vue2-面臨的問題\"><a class=\"anchor\" href=\"#vue2-面臨的問題\">#</a> Vue2 面臨的問題</h4>\n<p>我們時常聽到有人說</p>\n<blockquote>\n<p>Vue 只適合拿來做小型的專案，並不適合大專案。</p>\n</blockquote>\n<p>歸咎原因，主要有以下幾點：</p>\n<p><strong>1. Vue 並未對 Typescript 友善，不利於多人協作的大型專案。</strong></p>\n<p>專案開發大多仍為 Javascript。JS 鬆散靈活的語言特性使開發者在協同合作時信心不足，使得專案架構難以擴張規模。</p>\n<p><strong>2. Vue 的  <code>this</code>  綁定整個 Vue instance ，與傳統 Javascript Language 對  <code>this</code>  的詮釋並不一致。增加了程式開發人員對專案開發的心智成本。</strong></p>\n<p>眾所周知，在 Vue 中不論在哪個地方 (methods, computed, watch… etc) 當使用  <code>this</code>  時，都是指 vue instance 本身。然而，在 Javascript 中，function 本身有自己的 scope ，  <code>this</code>  應該指向 function 本身 (或是 function 所屬的 class scope)，這種與 JS 原生概念不相同的概念，提升了了使用者的心智成本。</p>\n<p>我們可以舉一個簡單的例子</p>\n<blockquote>\n<p>請問在「右圖」中引入「左圖」的 columns.js<br />\n 其中的 左圖的 this 指向何處？</p>\n</blockquote>\n<p><img data-src=\"1*2uwvet3crTe3EfpQcbd59w.png\" alt=\"\" /></p>\n<p><img data-src=\"1*j6tSqRKCyW7pUJDLr0N_jA.png\" alt=\"左圖：columns.js ；右圖：其他的 component 引用了 column.js\" /></p>\n<p>左圖：columns.js ；右圖：其他的 component 引用了 column.js</p>\n<p><em>第一張圖中的  <code>this</code>  會指向 vue instance，因此即使在 function 中並沒有定義  <code>$t</code>  ，卻依然可以使用  <code>$t</code>  的功能。</em></p>\n<p>這種利用 this 指向 vue instance 的作法雖然帶來了便利，但是在經驗不足的開法者面前，簡直就是一場災難。</p>\n<p><strong>3. 缺少簡潔且「低成本的機制」來提取、重用組件之間的邏輯。</strong></p>\n<p>Vue2 多採用  <code>mixin</code>  的方式提取組件中的共用部分，然而  <code>mixin</code>  本身隱式的依賴關係有礙於團隊的程式開發。</p>\n<p>試想，你可能寫了一個帶有某個狀態的組件，且你的同事製作了一個讀取此狀態的  <code>mixin</code>  。</p>\n<p>在某天你需要將組件的狀態重構到其他組件去，你們會記得應該要更新  <code>mixin</code>  嗎？若此  <code>mixin</code>  又被許多組件複用的話呢？</p>\n<p>另外  <code>mixin</code>  也可能導致名稱的衝突。</p>\n<p>若是你的組件中使用的名稱剛好與第三方中的  <code>mixin</code>  有衝突，你無法為其重新命名。相反的你只能尷尬地換一個名稱來避免衝突的發生。</p>\n<p>因此在 React 中，使用了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMuaHRtbA==\">HOC</span> 與 Render Props 的方式取代了 mixin。</p>\n<p>然而由於 Vue2 的 Options 特性，HOC 難以在 Vue2 中被借鑑。</p>\n<p><strong>4. Vue API 迫使使用者使用 Options 組織程式碼；但是許多時候，通過「邏輯」組織程式碼會更有助於程式的開發。</strong></p>\n<p>下方圖中相同顏色部分代表相關的程式碼，Vue2 的 Option 組織程式碼的方式使得開發人員時常需要在檔案的上下文之間滑動比對所需的邏輯。隨著程式碼的增加，開發與維護的成本就越來越高。</p>\n<p><img data-src=\"1*_yg3tfiqEE_puHseOtpoFQ.png\" alt=\"[https://user-images.githubusercontent.com/499550/62783021-7ce24400-ba89-11e9-9dd3-36f4f6b1fae2.png](https://user-images.githubusercontent.com/499550/62783021-7ce24400-ba89-11e9-9dd3-36f4f6b1fae2.png)\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vNDk5NTUwLzYyNzgzMDIxLTdjZTI0NDAwLWJhODktMTFlOS05ZGQzLTM2ZjRmNmIxZmFlMi5wbmc=\">https://user-images.githubusercontent.com/499550/62783021-7ce24400-ba89-11e9-9dd3-36f4f6b1fae2.png</span></p>\n<h4 id=\"vue3-的解決辦法-composition-api\"><a class=\"anchor\" href=\"#vue3-的解決辦法-composition-api\">#</a> Vue3 的解決辦法 — Composition-API</h4>\n<p>為了解決以上的種種問題，Vue3 借鑒了 React-hook 的精神，推出了 Composition-API (或稱 functional API)。</p>\n<p>Composition-API 暴露了 Vue 更多更核心的 API 接口，讓使用者就像使用 react-hook 那樣，需要什麼 API ，再 import 就行。</p>\n<p>並且，所有的 code 都寫在 <strong>setup( )</strong> 中 <strong>。</strong></p>\n<p>以下使用一個小例子呈現 Vue3 的 Composition-API 使用方法。</p>\n<p><a href=\"https://codesandbox.io/s/objective-shannon-y79so?fontsize=14\"><img data-src=\"https://codesandbox.io/api/v1/sandboxes/y79so/screenshot.png\" alt=\"objective-shannon-y79so\" title=\"objective-shannon-y79so\" /></a></p>\n<p><img data-src=\"1*Mojm8NIEzcE1BwYsezjIGg.png\" alt=\"\" /></p>\n<p><img data-src=\"1*lLEoouSU5ds5XNwGFdImbw.png\" alt=\"左圖：使用 Options 方式組織程式邏輯；右圖：使用 Composition 方式組織邏輯\" /></p>\n<p>左圖：使用 Options 方式組織程式邏輯；右圖：使用 Composition 方式組織邏輯</p>\n<p>範例中，我們在 setup ( ) 中組織我們所有的邏輯，相比於將程式邏輯分散至 Options 的 properies 各處，我們可以更容易地閱讀程式、在程式的維護上也更加平易近人。</p>\n<p>以下是官方文檔中附上的 Vue2 與 Vue3 的程式邏輯分佈的比較。左邊是使用 Vue2 的 Options API 開發的程式邏輯分佈；右邊則是 Vue3 的 Composition API 的邏輯分佈。</p>\n<p>很明顯地我們可以看出，右邊的程式邏輯性比起左邊要更佳的緊密。</p>\n<p>可以預見的是，開發者在閱讀與理解程式碼的舒適程度也一定是右邊大於左邊。</p>\n<p><img data-src=\"1*1sCGNlLdTajVSU-XISYWIg.png\" alt=\"[https://user-images.githubusercontent.com/499550/62783026-810e6180-ba89-11e9-8774-e7771c8095d6.png](https://user-images.githubusercontent.com/499550/62783026-810e6180-ba89-11e9-8774-e7771c8095d6.png)\" /><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vNDk5NTUwLzYyNzgzMDI2LTgxMGU2MTgwLWJhODktMTFlOS04Nzc0LWU3NzcxYzgwOTVkNi5wbmc=\">https://user-images.githubusercontent.com/499550/62783026-810e6180-ba89-11e9-8774-e7771c8095d6.png</span></p>\n<h4 id=\"compare-to-react-hooks\"><a class=\"anchor\" href=\"#compare-to-react-hooks\">#</a> Compare to React-hooks</h4>\n<p>在 Vue3 發布後，網路上充斥著類似這樣的聲音</p>\n<blockquote>\n<p>「這根本就是抄 React-hooks 的啊！, 我幹嘛不直接用 React 就好了？」<br />\n「雜七雜八的 code 都丟在 setup 中，看起來結構比 Vue2 更糟啊！」<br />\n「拜託不要再更新了！老子已經學不動了～」</p>\n</blockquote>\n<p>然而，如果你是從文章一開始就讀到現在，應該已經能理解 Vue3 的改進是 <strong>勢在必行</strong> ，且 <strong>不得不為</strong> 。</p>\n<p>事實上，Vue3 中 Options Syntax 並未消失，你依然可以使用以前習慣的寫法繼續開發，也不是一定要在專案中使用 Composition-API。</p>\n<p>另外，如果你有寫過 React-hooks，你可能真的跟我一樣會覺得寫起來跟 react hooks 很像。</p>\n<p><strong>但是 Vue3 的底層實作與 React Hooks 是大相逕庭的。</strong></p>\n<p>不同於 React-hooks 每一次的改動就需要 re-calculating 所有的 dependency value、 re-render 相對應的 components， <strong>Vue3 只在 created ( ) 之前執行一次</strong> <strong>setup( )</strong> function。</p>\n<p>並且因為建基於 Vue 的「響應式系統」，寫在 setup ( ) function 內的邏輯 Vue 依然能夠追蹤得到。</p>\n<p>Components 也僅需要 re-render 更新的部分，效能理論上會更勝 React-hooks。</p>\n<p>其次從設計哲學方面來看，在 React-hooks 中簡化了原始 React-Class Component 的 life cycle。</p>\n<p>對於從 React Class Component 入門的新手而言，無異於要學兩套 React 的 Render Logic。</p>\n<p>然而 Vue3 在 life cycle 並未作大幅度更動，僅以額外提供另一種使用 API 的方法為主，無論是 Vue 的新手或是老手使用體驗並不會差異過大。</p>\n<p>另外，關於「程式重用性」與「程式結構性」的疑問，事實上 Composition API 更能將程式寫得井然有序。</p>\n<p>因為基於 Composition-API ，我們可以更容易地將相同邏輯的程式碼抽離出 Components，僅在需要的時候在引入。</p>\n<p>舉一個追蹤游標位置的例子 (例子取自官網)</p>\n<p>Composition-API 只依賴其參數以及 Vue3 的 API，而不依賴  <code>this</code>  。我們可以將組件內任何邏輯抽離出來進行複用，甚至導出整個  <code>setup</code>  ，來達到 extends 的效果。</p>\n<p><img data-src=\"1*QNzpeIqBZ2M-RMcpL-r4uw.png\" alt=\"\" /></p>\n<p>以下是 Component 如何利用 function 的作法:</p>\n<p><img data-src=\"1*3qr3bAwQYth1ArsXrmxZiw.png\" alt=\"\" /></p>\n<p>如果這段邏輯使用 Vue2 的 Options API 來撰寫，試想一下該怎麼簡潔地寫出這樣的 Code 呢？(可能也只有 mixin 了吧…)</p>\n<h4 id=\"結論\"><a class=\"anchor\" href=\"#結論\">#</a> 結論</h4>\n<p>Vue3 的改版無疑是在社群掀起了巨大的波瀾，當然評價也一定有褒有貶。</p>\n<p>在我看完 RC 的 API Document 以及 Vue 的改版動機後，我對於這樣的改動是樂觀其成的。</p>\n<p>事實上做為一個以 Vue 為主要前端開發項目的工程師而言，我也長期忍受著 Options API 種種在程式碼上「不便利」。</p>\n<p>每每閱讀一個 Components 都需要畫面上下滾動，跳來跳去觀看參絞在一起的程式邏輯，無疑是一種痛苦。</p>\n<p>我認為開發模式從 Class Components 轉變至 Functional Components 是一種演進上的必然。</p>\n<p>前端程式的開發邏輯比起後端的 OOP，更多時候是以「事件驅動」一連串資料流到畫面的響應處理。此時使用 Functional Programming 的開發思維會更加地直覺且友好。</p>\n<p>因此對於 Vue3 的改進，我個人是期待且樂觀其成的。</p>\n<p>另外，這篇文章的撰寫我參閱了非常多的資料，以下的參考資料我個人認為非常有意義，有興趣也可以當作延伸閱讀，好好瀏覽一番。</p>\n<h3 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NhaWJhb2ppYW4uY29tL2VzNi8=\">ES6 文檔</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcudzNjdGVjaC5jb20vVnVlQ29uZjIwMTlTSF9FdmFuLnBkZg==\">2019 Vue Conf 尤大 Power Point</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9ldmFueW91L3Bvc3Rz\">尤雨溪 Blog</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTMyMTA5NjY0MjY0\">Vue3 究竟好在哪里？（和 React Hook 的详细对比）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdXJvLnR3L3Bvc3RzLzIwMTkvMDgvMDYvJUU1JTg4JTlEJUU2JThFJUEyLVZ1ZS0zLTAtRnVuY3Rpb24tYmFzZWQtQVBJLw==\">初探 - Vue-3–0-Function-based-API</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUtY29tcG9zaXRpb24tYXBpLXJmYy5uZXRsaWZ5LmFwcC96aC8=\">Vue 組合式 API 蓋覽</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUtY29tcG9zaXRpb24tYXBpLXJmYy5uZXRsaWZ5LmFwcC96aC9hcGkuaHRtbCNzZXR1cA==\">Vue 組合式 API 手冊</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JmY3MvcHVsbC80MiNjb21wYXJpc29uLXdpdGgtcmVhY3QtaG9va3M=\">vue/rfcs: Function-based Component API</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzY3NTg4NDc5\">为何在 React 中推荐使用 HOC，而不是 mixins 来实现组件复用。但在 Vue 中，很少有 HOC 的尝试？</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXpoaXlhby5naXRodWIuaW8vMjAxOC8wMS8wNS9mMmUvbWl4aW5zLWNvbnNpZGVyZWQtaGFybWZ1bC8=\">Mixins 被认为是有害的</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTkzMDQ0NTEyNzgy\">從 React State Hooks 的閉包陷阱切入，淺談 hooks</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzNzk5MDk4NzAzODgw\">React State Hooks 的閉包陷阱，在使用 Hooks 前必須掌握</span></li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Frontend",
                "Vue",
                "javascript",
                "vue"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Frontend/2020-08-25-javascript-es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E4%B8%B2-template-string-%E7%9F%A5%E5%A4%9A%E5%B0%91/",
            "url": "https://z20240.github.io/Tech/Frontend/2020-08-25-javascript-es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E4%B8%B2-template-string-%E7%9F%A5%E5%A4%9A%E5%B0%91/",
            "title": "Javascript ES6 模板字串 (Template String)知多少",
            "date_published": "2020-08-25T08:17:31.334Z",
            "content_html": "<h3 id=\"javascript-es6-模板字串-template-string知多少\"><a class=\"anchor\" href=\"#javascript-es6-模板字串-template-string知多少\">#</a> [Javascript] ES6 模板字串 (Template String) 知多少</h3>\n<h4 id=\"小小的兩個-學問可真不少\"><a class=\"anchor\" href=\"#小小的兩個-學問可真不少\">#</a> 小小的兩個 ` ` 學問可真不少</h4>\n<p><img data-src=\"1*MRkZgd6EA6KjPDyJ9BbhcA.png\" alt=\"動態板模字串\" /></p>\n<p>動態板模字串</p>\n<p>Javasciript 在 ES6 後迎來了一大變革，不僅增加了許許多多的語法特性，在「字串」的撰寫上也增加了更多實用、方便的撰寫方法。</p>\n<p>今天要來介紹的就是一個看似簡單，但卻功能強大的語法特性 — 模板字串 (Template String) 。</p>\n<h4 id=\"模板字串\"><a class=\"anchor\" href=\"#模板字串\">#</a> 模板字串</h4>\n<p>有別於以前使用單引號  <code>‘’</code>  或是雙引號  <code>“”</code>  將 <strong>文字 / 符號 / 數字</strong> 包住，所謂的模板字串就是使用 ```` 框住的一串 <strong>文字 / 符號 / 數字</strong> 。</p>\n<h4 id=\"字串拚接\"><a class=\"anchor\" href=\"#字串拚接\">#</a> 字串拚接</h4>\n<p>傳統的字串拼接寫法，我們習慣使用  <code>+</code>  將多個字串、變數串接起來，以下為例：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &#x27;example line: &#x27; + line1 + &#x27;\\n&#x27; + &#x27;column: &#x27; + column;</span><br></pre></td></tr></table></figure></p>\n<p>模板字串的寫法，我們可以使用  <code>$&#123;變數名稱&#125;</code>  直接將變數安插在整個字串的自訂位置。並且，模板字串支援換行符號，我們不再需要使用  <code>\\n</code>  表示換行。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = `example line: $&#123;line1&#125;</span><br><span class=\"line\">column: $&#123;column&#125;`;</span><br></pre></td></tr></table></figure></p>\n<p>以上這兩種的差異顯而易見。模板字串解決了傳統字串拼接的一大痛點 — 使用  <code>+</code>  進行拼接導致字串內容被拆分得過於零散，閱讀與維護得成本都相對較高。</p>\n<p>模板字串允許變數直接插入字串之中，盡量保持字串預期呈現的格式，使得讀者在見到字串時便可一目了然，減少了閱讀時人腦轉換字串結果的「成本」。</p>\n<p>以上，是模板字串最常使用的用法。大約涵蓋了 80% 以上的使用情境。</p>\n<p>大部分人一般時間應該也就是使用到這樣的功能足矣。</p>\n<p>然而，你知道板模字串的功能遠遠比上述更加強大嗎？</p>\n<p>接下來要介紹的，就是板模字串更加強大的使用方法 — <strong>板模標籤</strong></p>\n<h4 id=\"tagged-template-literals\"><a class=\"anchor\" href=\"#tagged-template-literals\">#</a> Tagged Template Literals</h4>\n<p>不知道各位有沒有使用過諸如 Styled Component、Apollo Graphql… 這幾類工具？</p>\n<p>在 Styled Component 中，提供如下的寫法</p>\n<p><img data-src=\"1*iqoi254cRLpkUgFUC3IkWg.png\" alt=\"https://styled-components.com/\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHlsZWQtY29tcG9uZW50cy5jb20v\">https://styled-components.com/</span></p>\n<p><img data-src=\"1*Vluuu2ZEkswFpbzZ5ULvug.png\" alt=\"https://www.apollographql.com/docs/tutorial/schema/\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy90dXRvcmlhbC9zY2hlbWEv\">https://www.apollographql.com/docs/tutorial/schema/</span></p>\n<blockquote>\n<p>直接在模板字串之前使用函數，並且不需使用「括號 ( )」。</p>\n</blockquote>\n<p><strong>這是如何做到的？</strong></p>\n<p>這就是今天重點要說明的主題。</p>\n<p>我們引用 MDN 上對於 Tagged Template Literals 的解釋。</p>\n<blockquote>\n<p>標籤樣板字面值是一種更高級的樣板字面值形式，允許你透過 <strong>標籤函數</strong> 操作樣板字面值的輸出。</p>\n</blockquote>\n<blockquote>\n<p>標籤函數的 <strong>第一個參數是一「字串陣列」</strong> ， <strong>其餘參數則是「處理過的表達式」</strong> 。最終，你可以返回一個經處理後的字串，甚至是完全不一樣的東西。</p>\n</blockquote>\n<blockquote>\n<p>標籤函數的名稱可以是任何你想要的。</p>\n</blockquote>\n<p><strong>什麼意思？</strong></p>\n<p>意思是，我們只要定義一個 function 符合第一個參數為 string array, 第二個參數為 rest argument，即可作為標籤函數。</p>\n<p>我們使用以下幾個實驗來使我們了解這段話的意思。</p>\n<p>定義一個 function 我們取名為 <strong>print</strong></p>\n<p><img data-src=\"1*iNGXaKSPfLZQ5pKaie44XQ.png\" alt=\"\" /></p>\n<ul>\n<li>使用一個 <strong>純字串</strong> 看看</li>\n</ul>\n<p><img data-src=\"1*VHuOhbHJGcfzk-MU2EWN8Q.png\" alt=\"\" /></p>\n<p>第一個參數將傳入的 string 變成了一個 array，而後面的 rest 沒有得到任何東西。</p>\n<ul>\n<li>使用 <strong>帶有變數的 Template String</strong> 看看</li>\n</ul>\n<p><img data-src=\"1*-mORctsYOsPTVCBunpYYrg.png\" alt=\"\" /></p>\n<p>這次，我們看到第一個參數接收的 array 為依照  <code>$&#123;&#125;</code>  的位置間格而成的字串；而第二個參數則是將  <code>$&#123;&#125;</code>  內的變數收集起來。</p>\n<p>如此我們就知道，這個 function 的運作原理如下圖所示，清楚明瞭了。</p>\n<p><img data-src=\"0*aUXamM8t0mHhFD-K.png\" alt=\"\" /></p>\n<p>因此，我們其實可以利用這特性，來做更加多樣的字串處理。</p>\n<p>例如，我們便可以利用此特性，設計一個依照接收參數動態調整的字串板模<br />\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">dynamicTamplateString</span> = props =&gt; <span class=\"function\">(<span class=\"params\">str_ary, ...rest_ary</span>) =&gt;</span></span><br><span class=\"line\">    str_ary.<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">whole_str, cur_str, indx</span>) =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;whole_str&#125;</span><span class=\"subst\">$&#123;rest_ary[indx - <span class=\"number\">1</span>](props)&#125;</span><span class=\"subst\">$&#123;cur_str&#125;</span>`</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure></p>\n<p>如此，我們便可以使用這個 helping function 寫一個自定義的模板。<br />\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">myTemplate</span> = props =&gt; <span class=\"title function_\">dynamicTamplateString</span>(props)<span class=\"string\">`I am a <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    (props) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        <span class=\"keyword\">if</span> (props.sex === <span class=\"string\">&#x27;M&#x27;</span> &amp;&amp; props.age &gt; <span class=\"number\">20</span>) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;man&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (props.sex === <span class=\"string\">&#x27;M&#x27;</span> &amp;&amp; props.age &lt;= <span class=\"number\">20</span>) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;boy&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (props.sex === <span class=\"string\">&#x27;W&#x27;</span> &amp;&amp; props.age &gt; <span class=\"number\">20</span>) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;woman&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (props.sex === <span class=\"string\">&#x27;W&#x27;</span> &amp;&amp; props.age &lt;= <span class=\"number\">20</span>) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;girl&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Geek&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&#125;</span>, I&#x27;m <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    props =&gt; props.age</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&#125;</span> years old, and I&#x27;m <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    props =&gt; props.tall &gt; <span class=\"number\">180</span> ? <span class=\"string\">&#x27;very tall&#x27;</span> : <span class=\"string\">&#x27;not quite tall&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></p>\n<p>如下表示。</p>\n<p><img data-src=\"1*m4lVm2fHNJtnF0oblHxzEQ.png\" alt=\"\" /></p>\n<p><img data-src=\"1*VNU7p6sERC8as6j8ti2-LQ.png\" alt=\"\" /></p>\n<h4 id=\"結語\"><a class=\"anchor\" href=\"#結語\">#</a> 結語</h4>\n<p>模板字串語法的使用情境很廣。了解這些特性，在未來程式開發中必定會大大提高效率。</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZm9vaXNoLmNvbS9qYXZhc2NyaXB0L0VTNi90ZW1wbGF0ZS1saXRlcmFscy5odG1s\">JavaScript ES6 Template Literals 字串樣版</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHM=\">MDN</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9teHN0YnIuYmxvZy8yMDE2LzExL3N0eWxlZC1jb21wb25lbnRzLW1hZ2ljLWV4cGxhaW5lZC8=\">The magic behind 💅 styled-components</span></li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Frontend",
                "javascript",
                "es6",
                "template-literals",
                "template-strings"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Linux/2020-07-27-debian-add-apt-repository-command-not-found-%E5%95%8F%E9%A1%8C/",
            "url": "https://z20240.github.io/Tech/Linux/2020-07-27-debian-add-apt-repository-command-not-found-%E5%95%8F%E9%A1%8C/",
            "title": "Debian add-apt-repository command not found 問題",
            "date_published": "2020-07-27T15:38:02.386Z",
            "content_html": "<h3 id=\"debian-add-apt-repository-command-not-found-問題\"><a class=\"anchor\" href=\"#debian-add-apt-repository-command-not-found-問題\">#</a> [Debian] add-apt-repository command not found 問題</h3>\n<p>add-apt-repository 是用來更新 apt-get 套件來源的指令。</p>\n<p>在比較新的 Ubuntu 或是 Debian 版本，這可能不是在初始預設便有的指令集中。</p>\n<p>我們可以使用以下指令來安裝這個指令套件。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install software-properties-common</span><br><span class=\"line\">eading package lists... Done</span><br><span class=\"line\">Building dependency tree</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">The following additional packages will be installed:</span><br><span class=\"line\">gir1.2-glib-2.0 gir1.2-packagekitglib-1.0 iso-codes libappstream4 libcurl3-gnutls libgirepository-1.0-1 libglib2.0-bin libglib2.0-data libgstreamer1.0-0 libpackagekit-glib2-18</span><br><span class=\"line\">libpolkit-agent-1-0 libpolkit-backend-1-0 libpolkit-gobject-1-0 libstemmer0d libyaml-0-2 packagekit packagekit-tools policykit-1 python3-gi python3-pycurl python3-software-properties</span><br><span class=\"line\">Suggested packages:</span><br><span class=\"line\">isoquery gstreamer1.0-tools appstream libcurl4-gnutls-dev python-pycurl-doc python3-pycurl-dbg</span><br><span class=\"line\">The following NEW packages will be installed:</span><br><span class=\"line\">gir1.2-glib-2.0 gir1.2-packagekitglib-1.0 iso-codes libappstream4 libcurl3-gnutls libgirepository-1.0-1 libglib2.0-bin libglib2.0-data libgstreamer1.0-0 libpackagekit-glib2-18</span><br><span class=\"line\">libpolkit-agent-1-0 libpolkit-backend-1-0 libpolkit-gobject-1-0 libstemmer0d libyaml-0-2 packagekit packagekit-tools policykit-1 python3-gi python3-pycurl python3-software-properties</span><br><span class=\"line\">software-properties-common</span><br><span class=\"line\">0 upgraded, 22 newly installed, 0 to remove and 5 not upgraded.</span><br><span class=\"line\">Need to get 8194 kB of archives.</span><br></pre></td></tr></table></figure></p>\n<p>如此就可以解決此問題了。</p>\n",
            "tags": [
                "Tech",
                "Linux",
                "linux",
                "debian",
                "apt"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Linux/2020-07-27-gcp-%E9%81%87%E5%88%B0permission-denied-publickey-%E6%80%8E%E9%BA%BC%E8%BE%A6/",
            "url": "https://z20240.github.io/Tech/Linux/2020-07-27-gcp-%E9%81%87%E5%88%B0permission-denied-publickey-%E6%80%8E%E9%BA%BC%E8%BE%A6/",
            "title": "GCP遇到permission denied (publickey)怎麼辦？",
            "date_published": "2020-07-27T15:36:19.063Z",
            "content_html": "<h3 id=\"gcp遇到permission-denied-publickey怎麼辦\"><a class=\"anchor\" href=\"#gcp遇到permission-denied-publickey怎麼辦\">#</a> [GCP] 遇到 permission denied (publickey) 怎麼辦？</h3>\n<p><img data-src=\"1*5SlkKa9VGVM9bmANkqrHYg.png\" alt=\"https://www.paulgifford.co/googlecloudplatform\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGF1bGdpZmZvcmQuY28vZ29vZ2xlY2xvdWRwbGF0Zm9ybQ==\">https://www.paulgifford.co/googlecloudplatform</span></p>\n<p>最近因為專案需求，在 GCP 上建立了一個 VM instance。</p>\n<p>眾所周知，要連進 GCP 的 VM instance 通常都是使用 ssh 搭配 id_rsa key <em>(不知道何謂 id_rsa 若如何使用 id_rsa 進行 ssh 可以 google 一下，這邊暫不贅述)</em> 。</p>\n<p>但是某日在需要 ssh 時，卻跳出了</p>\n<blockquote>\n<p><strong>permission denied (publickey)</strong></p>\n</blockquote>\n<p>心中只有一個字：「e04 咧！! ! 」「到底發生什麼事情了…」</p>\n<p>從這短短的訊息中透露出幾條線索</p>\n<ol>\n<li>權限不足</li>\n<li>為什麼權限不足？ 因為 public key 不對。</li>\n</ol>\n<p>但是為什麼 public key 會不對？通常 key 這種東西，設過一次之後就不會再變更的，基本上不可能會出錯。</p>\n<p>所以可能的原因只有幾點：</p>\n<ol>\n<li>對應此 public key 的 private key 遺失或是失效了。</li>\n<li>GCP 上搞錯使用者了 (這機率實在很低)</li>\n</ol>\n<p>所以我重新開始釐清。</p>\n<p>第一點：檢查 id_rsa 是否存在且內容看起來是否正常。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls ~/.ssh/</span><br><span class=\"line\">id_rsa id_rsa.pub</span><br><span class=\"line\">$ cat ~/.ssh/id_rsa</span><br><span class=\"line\">-----BEGIN RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p>\n<p>看起來 private key 格式也沒有怪異。</p>\n<p>我決定嘗試將 key 換掉，重創一個使用者。( <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0B6MjAyNDAvZ2NwLSVFNSVBNiU4MiVFNCVCRCU5NSVFNCVCRCVCRiVFNyU5NCVBOC1zc2gtJUU4JUFFJTkzJUU0JUJEJUJGJUU3JTk0JUE4JUU4JTgwJTg1JUU3JTk5JUJCJUU1JTg1JUE1LXZtLWluc3RhbmNlLTRmM2ZjYmY3NDk4Yj9zb3VyY2U9ZnJpZW5kc19saW5rJmFtcDtzaz0wMDA0MTZiODEyN2RjYzE2ZWJmMGFiMGNkZjYyNzUxMQ==\">創建使用者方法可以查看這篇</span> )</p>\n<p>因此進入 GCP 的操作平台，重新刪除 public key，並且創建新的 key。</p>\n<p>結果依然是 <strong><em>permission denied (publickey) …。</em></strong></p>\n<p>此時我已經開始懷疑是 GCP 上同使用者名稱，搞錯 ssh key 的問題了。</p>\n<p>因此我使用了 GCP online terminal 進去 GCP ，並且查看 /home 下面目前的使用者有哪些<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls /home/</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>沒有 les 這個使用者…</em></strong></p>\n<p>使用  <code>cat /etc/passwd</code>  查看所有用戶群組<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/passwd</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\"># ...</span><br><span class=\"line\">z20240z:x:1003:1004::/home/z20240z:/bin/bash</span><br><span class=\"line\">les.lee:x:1004:1005::/home/les.lee:/bin/bash</span><br><span class=\"line\">les:x:1005:1006::/home/les:/bin/bash</span><br></pre></td></tr></table></figure></p>\n<p><strong>抓到問題了！</strong></p>\n<p>VM Instance 中有 les 這名用戶，但是卻沒有對應的 /home 使用者。難怪怎麼改 key 都沒有效果。</p>\n<p>知道原因後，簡單地使用  <code>userdel -r &lt;使用者名稱&gt;</code>  將使用者刪除，重新再 GCP 中建立一次帳號。</p>\n<p>這次終於可以 ssh 登入了。</p>\n<p>終於解決了 「permission denied (publickey)」 的問題了！</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MzUwOTA3L2FydGljbGUvZGV0YWlscy83ODg3ODc0Nw==\">Linux 如何查看所有的用户和组信息</span></li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Linux",
                "google-cloud-platform"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Linux/2020-07-27-gcp-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ssh-%E8%AE%93%E4%BD%BF%E7%94%A8%E8%80%85%E7%99%BB%E5%85%A5-vm-instance/",
            "url": "https://z20240.github.io/Tech/Linux/2020-07-27-gcp-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ssh-%E8%AE%93%E4%BD%BF%E7%94%A8%E8%80%85%E7%99%BB%E5%85%A5-vm-instance/",
            "title": "GCP如何使用 SSH 讓使用者登入 VM Instance",
            "date_published": "2020-07-27T07:27:33.103Z",
            "content_html": "<h3 id=\"gcp如何使用-ssh-讓使用者登入-vm-instance\"><a class=\"anchor\" href=\"#gcp如何使用-ssh-讓使用者登入-vm-instance\">#</a> [GCP] 如何使用 SSH 讓使用者登入 VM Instance</h3>\n<p>GCP (google cloud platform) 是一個 google 提供的雲端運算服務平台。</p>\n<p>其中擁有許許多多的雲端服務，諸如 database, cloud computing…, 甚至是大數據的分析工具… 等等，應有盡有。</p>\n<p>我們也可以在 GCP 中租一個虛擬雲端空間，搭建個人的雲端作業系統，也就是本文說的 <strong>VM Instance</strong> 。</p>\n<p>本文假設讀者已經透過各種方法擁有了自己的 VM instance，卻苦無不知如何使用 ssh 登入 gcp 的 VM instance，因此前來尋求解答。</p>\n<p><strong>以下正文開始</strong></p>\n<p>在 gcp 的 ssh 中，我們需要使用 ssh key 作為登入密鑰。因此我們需要先生出自己的 ssh key。</p>\n<p>我們可以使用  <code>ssh-keygen</code>  一行指令生成<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br></pre></td></tr></table></figure></p>\n<p>如此，我們便在 ./ssh 中擁有了自己的 ssh key。其中 rsa_id.pub 是公鑰，待會要放上 GCP ；rsa_id 是私鑰，要自己保存好。</p>\n<p>接下來，前往自己的 VM Instance，在邊側欄找到  <code>Compute Engine &gt; 中繼資料</code></p>\n<p><img data-src=\"1*Vja4LMw8UAO9vCauM5Gd1g.png\" alt=\"\" /></p>\n<p>點選 「安全殼層金鑰」 (SSH 金鑰)，並且選取「編輯」。</p>\n<p><img data-src=\"1*reygeRRdhsoPxjPNtMNrsw.png\" alt=\"\" /></p>\n<p>點選「新增項目」，後將剛剛的 rsa_id.pub 的內容貼上，之後儲存。</p>\n<p><img data-src=\"1*Inm9BZzGX2_CRDgxkl3tTg.png\" alt=\"\" /></p>\n<p>它就會對應公鑰的最後一小段的使用者名稱在 VM Instance 自動創建對應的使用者。</p>\n<p>接下來就可以嘗試使用 SSH 連線進 GCP 了！</p>\n<p><img data-src=\"1*WRUx_I2CVf6bp0HCkIKI4A.png\" alt=\"\" /></p>\n",
            "tags": [
                "Tech",
                "Linux",
                "google-cloud-platform",
                "ssh"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/Data%20Storage/2020-07-27-mongodb-%E5%A6%82%E4%BD%95-auto-increment-%E5%9C%B0%E6%8F%92%E5%85%A5%E8%B3%87%E6%96%99/",
            "url": "https://z20240.github.io/Tech/Data%20Storage/2020-07-27-mongodb-%E5%A6%82%E4%BD%95-auto-increment-%E5%9C%B0%E6%8F%92%E5%85%A5%E8%B3%87%E6%96%99/",
            "title": "MongoDB 如何 Auto increment 地插入資料",
            "date_published": "2020-07-27T06:41:45.452Z",
            "content_html": "<h3 id=\"mongodb-如何-auto-increment-地插入資料\"><a class=\"anchor\" href=\"#mongodb-如何-auto-increment-地插入資料\">#</a> [MongoDB] 如何 Auto increment 地插入資料</h3>\n<p>眾所周知，在 mongodb 中對於 ID 的保存方式，並不像 SQL 那樣可以設定 auto increment 有序地設置流水號作為 unique key。取而代之的是，每一筆資料都會有獨自的  <code>_id</code>  以確保每筆資料的唯一性。</p>\n<p>而在 mongodb 中，我們無法「直接地」設定 collection 中的 entry 的某個 attribute 具有 auto increment 的特性。</p>\n<p>但是在許多場合我們卻依然會有這樣的需求，該怎麼辦呢？</p>\n<p>我們需要自己在程式中手動實作這樣的功能。</p>\n<p>雖說是自己實作，但其實也沒有很複雜。</p>\n<p>主要思路如下</p>\n<blockquote>\n<p>設計一個 <strong>autoIncrease</strong> collection 專門 maintain 需要 auto increment 的 collection 其當前的 auto increment number。未來當某 collection 需要 auto increment 時，就來 <strong>autoIncrease</strong> collection 拿取 lastest Id.</p>\n</blockquote>\n<p>以 NodeJs 為例</p>\n<p>實作一個 function ，專門獲取 lastest Id，並在每次獲取的同時更新 lastest Id.<br />\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">get_auto_increment_id</span> = <span class=\"keyword\">async</span> (<span class=\"params\">table_name</span>) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 寫死 autoIncrease 為紀錄各個 document 的 auto increment 的 document.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> auto_increment_record_table = <span class=\"string\">&#x27;autoIncrease&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 連接 mongodb</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> db = <span class=\"keyword\">await</span> <span class=\"title class_\">CreateDB</span>(process.<span class=\"property\">env</span>.<span class=\"property\">MONGO_DB</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 獲取此 collection</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> db_collection = db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;autoIncrease&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dbFindOneAndUpdateAsync = <span class=\"title function_\">promisify</span>(</span><br><span class=\"line\">        db_collection.<span class=\"property\">findOneAndUpdate</span></span><br><span class=\"line\">    ).<span class=\"title function_\">bind</span>(db_collection);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 先 update 此 table_name 的 last number + 1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">dbFindOneAndUpdateAsync</span>(</span><br><span class=\"line\">        &#123; <span class=\"attr\">_id</span>: tableName &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">$inc</span>: &#123; <span class=\"attr\">seqValue</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">upsert</span>: <span class=\"literal\">true</span>, <span class=\"attr\">returnNewDocument</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> seqDoc = result.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 再回傳最新的 last number</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> seqDoc ? seqDoc.<span class=\"property\">seqValue</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>未來我們便可以使用這個 function 取得 collection 中最新的 id。如此就可以用程式達到手動 auto increment 的功效了。</p>\n<p>以下是我在自己專案中使用的 handle function，當我插入一筆 Question 資料到 mongodb 前，我便讓 table 的 id+1，作為此筆資料的 id。</p>\n<p><img data-src=\"1*K6syln_71vBX22lssiVQdQ.png\" alt=\"\" /></p>\n<p>如此便完成 mongodb 的 auto increment 了。</p>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "Data Storage",
                "nodejs",
                "mongo"
            ]
        },
        {
            "id": "https://z20240.github.io/Tech/git/2020-04-07-git-%E7%94%A8-rebase-%E5%90%88%E4%BD%B5%E5%88%86%E6%94%AF-%E8%AE%93%E4%BD%A0%E7%9A%84-git-history-%E6%9B%B4%E4%B9%BE%E6%B7%A8/",
            "url": "https://z20240.github.io/Tech/git/2020-04-07-git-%E7%94%A8-rebase-%E5%90%88%E4%BD%B5%E5%88%86%E6%94%AF-%E8%AE%93%E4%BD%A0%E7%9A%84-git-history-%E6%9B%B4%E4%B9%BE%E6%B7%A8/",
            "title": "GIT 用 rebase 合併分支，讓你的 Git history 更乾淨",
            "date_published": "2020-04-07T17:31:57.846Z",
            "content_html": "<h3 id=\"git-用-rebase-合併分支讓你的-git-history-更乾淨\"><a class=\"anchor\" href=\"#git-用-rebase-合併分支讓你的-git-history-更乾淨\">#</a> [GIT] 用 rebase 合併分支，讓你的 Git history 更乾淨</h3>\n<h4 id=\"你的-git-history-是雜亂無章的地下鐵路線圖還是一條筆直的康莊大道\"><a class=\"anchor\" href=\"#你的-git-history-是雜亂無章的地下鐵路線圖還是一條筆直的康莊大道\">#</a> 你的 GIT History 是雜亂無章的地下鐵路線圖，還是一條筆直的康莊大道？</h4>\n<p><img data-src=\"1*l_0AwXprRSt-RiA-WpjGqA.png\" alt=\"每次當看混亂的 git history 總會讓我聯想到左邊的圖\" /></p>\n<p>每次當看混亂的 git history 總會讓我聯想到左邊的圖</p>\n<p>在工作中 GIT 應該已經是不可或缺的工具了。它為團隊的共同協作帶來極大的方便性，並且其版本控制的特性，使得專案的更迭變得更加安全穩固。</p>\n<p>我想大部分的人應該都對於 GIT 並不陌生了，  <code>git merge</code>  可能更是很多人每天都在使用的指令之一。</p>\n<p>然而，你知道 GIT 還有一個指令叫做  <code>git rebase</code>  嗎？我們不僅可以使用  <code>git rebase</code>  合併分支，甚至可以用它來整理 branch，讓我們的 git history 變得更加乾淨。</p>\n<h4 id=\"使用-merge-合併分支\"><a class=\"anchor\" href=\"#使用-merge-合併分支\">#</a> <strong>使用 Merge 合併分支</strong></h4>\n<p>假設我們今天有一個 git history graph 長成以下這樣。</p>\n<p><img data-src=\"1*UybAbYx6WrBrcC1S5vqZfQ.png\" alt=\"git history graph\" /></p>\n<p>git history graph</p>\n<p>使用 merge 合併分支的話，我們知道，會產生一個「新的 commit」來接合兩個 commit，類似如下這樣的結果。</p>\n<p><img data-src=\"1*cVxaTmuY37VAmnsXbTwNrw.png\" alt=\"從 master 對 branch_1 與 branch_2 進行合併\" /></p>\n<p>從 master 對 branch_1 與 branch_2 進行合併</p>\n<p>這看起來沒有什麼問題，但是隨著專案的迭代，branch 越開越多、commit 越加越多，我們可以預見 commit history 肯定會像上方右邊的圖一樣，儼然是個 <strong>大眾鐵路網</strong> 。</p>\n<p>這時候，我們就可以利用  <code>git rebase</code>  的特性來進行分支的合併，以此達到整理 git history 的功效。</p>\n<h4 id=\"git-rebase\"><a class=\"anchor\" href=\"#git-rebase\">#</a> git rebase</h4>\n<p>git rebase 的基礎指令格式如下<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase &lt;branch name&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其功效會對分支的基準進行重新定義。</p>\n<p>例如：以上面 <a href=\"#5a45\">git history graph</a> 為例，若 <strong>我在 branch_1</strong> 使用  <code>git rebase branch_2</code>  ，則 <strong>會以 branch_2 作為基準，將 branch_1 接在 branch_2 上方</strong> 。</p>\n<p>如下圖所示：</p>\n<p><img data-src=\"1*C8hxxOpdGqxZ-zUqtkg3kA.png\" alt=\"\" /></p>\n<p>我們可以看看這個指令執行的訊息：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase branch_2</span><br><span class=\"line\">First, rewinding head to replay your work on top of it...</span><br><span class=\"line\">Applying: commit C in branch 1</span><br><span class=\"line\">Using index info to reconstruct a base tree...</span><br><span class=\"line\">M       main.js</span><br><span class=\"line\">Falling back to patching base and 3-way merge...</span><br><span class=\"line\">Auto-merging main.js</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>要注意的是，如果碰到 conflict，我們一樣要手動解 conflict，並且在解完之後，使用  <code>git rebase --continue</code>  繼續執行剩下的 rebase。這邊與  <code>git merge</code>  不同的另一點是，  <code>git merge</code>  通常 conflict 一次就可以全部解完了；然而  <code>git rebase</code>  是以  <code>commit</code>  為單位，將  <code>commit</code>  一個一個接到 branch ，因此可能會要重複解好幾次 confilct。</p>\n</blockquote>\n<p>從上方的圖示，我們可以發現  <code>git rebase</code>  的結果跟 git merge 有很大的差異。感覺上  <code>git rebase</code>  似乎是將 branch_1 的 commit 剪下、貼上到 branch_2。</p>\n<p>但其實並非如此。  <code>git rebase</code>  真正做的事情是，將 branch_1 的 commit 以 branch_2 為基準，重新計算 SHA-1 的值、並且打包一個新的 commit 物件，接上 branch_2。因此，如果你仔細檢查，可以發現兩個 commit 的 hash key 已經不一樣了，所以，比較正確的敘述應該是「複製、貼上」。</p>\n<p><img data-src=\"1*RNG46OBHZbikRif_JWuCWA.png\" alt=\"\" /></p>\n<p><img data-src=\"1*MQ-xv-FbIWXJahsLDea-0g.png\" alt=\"git rebase 前後，hash key 已經不一樣了\" /></p>\n<p>git rebase 前後，hash key 已經不一樣了</p>\n<h4 id=\"取消-git-rebase-的結果\"><a class=\"anchor\" href=\"#取消-git-rebase-的結果\">#</a> 取消 git rebase 的結果</h4>\n<p>如果是一般的合併，我們只需要  <code>git reset HEAD^ —-hard</code>  ，將 merge 的 commit reset 掉，就可以退回到合併前的狀態了。</p>\n<p>但是，在 git rebase 的結果，我們如果使用這行指令，卻只能拆掉最後一個 commit，無法回到 rebase 前的狀態。那該怎麼辦呢？</p>\n<p>其實，在 GIT 中有一個 pointer 叫做  <code>ORIG_HEAD</code>  ，專門紀錄「危險操作」之前的 HEAD 位置。我們只要  <code>git reaset ORIG_HEAD --hard</code>  就可以回復到原始、合併前的狀況了。</p>\n<p><img data-src=\"1*SDbO0L3bXRnjqdNVFJAdLQ.png\" alt=\"\" /></p>\n<p><img data-src=\"1*uVc-Sl91MlRsv3MClb42TA.png\" alt=\"使用 \" /></p>\n<p>使用  <code>git reset ORIG_HEAD --hard 可以回復到合併前的狀態</code></p>\n<p>講了這麼多， <strong>在實務上我們怎麼使用  <code>git rebase</code>  ？</strong></p>\n<p>實務上，我們大多時候希望將 branch 合併到 master 中，因此我們通常會在 branch 上以 master 為基準將目前的 branch commit 接到 master。</p>\n<p>所以，我們常常會直接使用<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// On any branch ...</span><br><span class=\"line\">$ git rebase master</span><br></pre></td></tr></table></figure></p>\n<p>以上面的 git 為例子，我時常會將 <strong>branch_1</strong> 、 <strong>branch_2</strong> 對 <strong>master</strong> 做  <code>git rebase master</code>  以追蹤最新的 master，並且確保每個 branch 的 commit 都在 master 的 forward。</p>\n<p><img data-src=\"1*TZIQciWYAHN_Sdhm7fcFpg.png\" alt=\"\" /></p>\n<p>之後再用 master 去 merge 這些已經在 forward 的 branch。</p>\n<p><img data-src=\"1*L1UKhRZTNXtt2AHLCsrlQA.png\" alt=\"\" /></p>\n<p>如此，就可以將整條 git history 整理成一條直線，看起來乾淨整齊。</p>\n<p>然而，隨著業務量越來越大、branch 越開越多，我們要手動對每個 branch 追蹤當前的 master 其實有點強人所難。</p>\n<p>因此很多人其實會選擇放爛一些 branch，等到要用時若有 conflict 再來解。</p>\n<p>不過若 branch 的歷史與 master 差異過大，很多時候要解 conflict 可能也不是這麼輕鬆。因此我自己還是傾向「 <strong>定時讓每個 branch 都追蹤 master 的變化</strong> 」。</p>\n<p>可是這是一個吃力不討好的工作（要手動將每個 branch 都追蹤最新的 master 著實是一個苦工），因此我自己寫了一個 「  <code>rebase-master</code>  」的小工具。只要在專案中使用  <code>rebase-master</code>  就會自動將所有的 branch 追蹤最新的 master（也可以自訂只要某幾個 branch 進行更動或不更動）。</p>\n<p><a href=\"https://www.npmjs.com/package/rebase-master\"><img data-src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\" alt=\"\" /></a></p>\n<h4 id=\"rebase-進階用法git-rebase-onto\"><a class=\"anchor\" href=\"#rebase-進階用法git-rebase-onto\">#</a>  <code>rebase 進階用法：git rebase --onto</code></h4>\n<p>在某些情況，我們可能希望將某 branch 的某幾段 commit 接到另一個 branch 中，這時我們就能夠使用  <code>git rebase --onto</code>  來達成我們的目的。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --onto &lt;target base-commit&gt; &lt;commit from&gt; [&lt;commit to&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><code>git rebase --onto</code>  可以將自訂將  <code>&lt;commit from&gt;</code>  開始的一連串 commit 嫁接到另一個 commit (  <code>&lt;target base-commit&gt;</code>  ) 上面。</p>\n<p>其中：</p>\n<ul>\n<li><strong>&lt;target base-commit&gt;</strong> ： 做為基礎的 commit</li>\n<li><strong>&lt;commit from&gt;</strong> ：要嫁接 commit 的起始點 (不包含此 commit)</li>\n<li><strong>&lt;commit to&gt;</strong> ：要嫁接 commit 的終點 (包含此 commit)，如果未給予，則預設為 branch 的最後一個 commit。</li>\n</ul>\n<p>以下圖為例</p>\n<p><img data-src=\"1*Hk5KCcC-WzNVku731K7VWw.png\" alt=\"\" /></p>\n<p>目前有三個 branch</p>\n<ul>\n<li><strong>master</strong> ：7ce0378a、b9521564</li>\n<li><strong>branch_1</strong> ：a28cb258、b1f1bba6、b73d414e</li>\n<li><strong>branch_2</strong> ：074ad172、f90af89e、4c54470d</li>\n</ul>\n<p>我希望將 branch_2 的「Commit D in branch 2 (074ad172)」至 「commit D’ in branch 2 (f90af89e)」嫁接到 「commit C’ in branch 1 (b1f1bba6)」，則我可以使用這樣的指令<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --onto b1f1bba6 ddcbc256 f90af89e</span><br></pre></td></tr></table></figure></p>\n<p>其結果如下</p>\n<p><img data-src=\"1*ECOhYfjW8ztCI0inzMvQUA.png\" alt=\"\" /></p>\n<p>我們可以發現，的確成功將 commit 接過去了。而原本的 branch 也還是在。</p>\n<p>另外，我們要注意的是，這樣的作法 git status 會存在於一個「非任何一個 branch 的狀態」。</p>\n<p><img data-src=\"1*pjpYnYV6YCWQ6hu6eEeFUQ.png\" alt=\"\" /></p>\n<p>我們要自己給他一個「新的 branch name」。</p>\n<p><img data-src=\"1*Mc0f6hpwvlGrRZihEn4lpg.png\" alt=\"\" /></p>\n<p><img data-src=\"1*0CbprtxSD9bGeD2XnVRiHA.png\" alt=\"\" /></p>\n<h4 id=\"結論\"><a class=\"anchor\" href=\"#結論\">#</a> 結論</h4>\n<p>GIT 是一個在軟體開發中不可或缺的工具。許多人可能知道如何使用 GIT，通常使用到的那些指令就能完成 80% 的工作了。</p>\n<p>然而，若是能夠再更進階一點、多了解一點，未嘗也不是一個壞處。</p>\n<h4 id=\"參考資料\"><a class=\"anchor\" href=\"#參考資料\">#</a> 參考資料</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRib29rLnR3L2NoYXB0ZXJzL2JyYW5jaC9tZXJnZS13aXRoLXJlYmFzZS5odG1s\">為你自己學 Git — 另一種合併方式 (使用 rebase)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnlvcmt4aW4ub3JnLzIwMTEvMDcvMjkvZ2l0LXJlYmFzZS5odG1s\">Git-rebase 小筆記</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzNmMjk0YzUxODgyNTI1NDc0MjMyZWE=\">git rebase — onto 的奇妙用法</span></li>\n</ul>\n<p><a href=\"https://button.like.co/z20240z\"><img data-src=\"https://button.like.co/images/og/likebutton.png\" alt=\"Like z20240z's work\" title=\"Like z20240z's work\" /></a></p>\n",
            "tags": [
                "Tech",
                "git",
                "git"
            ]
        }
    ]
}