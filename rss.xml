<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Les&#39;s Blog</title>
        <subtitle></subtitle>
        <icon>https://z20240.github.io/images/favicon.ico</icon>
        <link>https://z20240.github.io</link>
        <author>
          <name>Les Lee</name>
        </author>
        <description></description>
        <language>en</language>
        <pubDate>Sat, 31 Dec 2022 00:28:40 +0800</pubDate>
        <lastBuildDate>Sat, 31 Dec 2022 00:28:40 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Life/EnglishLearn/Cambly-Lession2/</guid>
            <title>Cambly-Lession2</title>
            <link>https://z20240.github.io/Life/EnglishLearn/Cambly-Lession2/</link>
            <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
            <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
            <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
            <category term="english" scheme="https://z20240.github.io/tags/english/" />
            <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
            <pubDate>Sat, 31 Dec 2022 00:28:40 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;vocabulary&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vocabulary&#34;&gt;#&lt;/a&gt; Vocabulary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;scenery = 風景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;view 比較偏向眼中看出去的事物&lt;/li&gt;
&lt;li&gt;scenery 是平常描述中的「風景」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coherence 連貫性 (n.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accuracy 準確性 (n.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intonation 語調 (n.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flawless = perfect 完美的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to unwind (v.) = to relax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to gather (v.) = gathering (n.) 聚集 =/= together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to go sightseeing 觀光&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to get together  聚聚&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex. Shall we get together on Friday and go for a drink or something?
&lt;ul&gt;
&lt;li&gt;我們星期五聚聚喝點東西，如何？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to catch-up 聯絡感情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How about let&#39;s catch-up next week?
&lt;ul&gt;
&lt;li&gt;我們下週來聚聚聯絡感情如何？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to contemplate 沉思&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to cost an arm and leg = expensive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to change of senary = 轉換心情&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to broaden wider = 打開眼界&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;here and there = to describe uns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;as often as = every time 每次&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;As&lt;/strong&gt; &lt;strong&gt;often&lt;/strong&gt; &lt;strong&gt;as&lt;/strong&gt; I tried to phone him the line was engaged.&lt;/li&gt;
&lt;li&gt;每次我給他打電話都佔線。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indeed 的確&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not to mention = 更不必說&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There were three of us there, &lt;strong&gt;not&lt;/strong&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;strong&gt;mention&lt;/strong&gt; the children.
&lt;ul&gt;
&lt;li&gt;不算孩子在內，我們中有三個人在那裡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I enjoyed the meal, &lt;strong&gt;not&lt;/strong&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;strong&gt;mention&lt;/strong&gt; the conversation.
&lt;ul&gt;
&lt;li&gt;我很喜歡那一頓飯，至於席上的談話更是不必說了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accurately (adv.) 準確地.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accurate (adj.) 準確的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accuracy (n.) 準確性 /precision 精確性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;glitter 閃光&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;字根字尾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字根字尾&#34;&gt;#&lt;/a&gt; 字根字尾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ex 外面&lt;/li&gt;
&lt;li&gt;er 反覆 / 比較級 / 能做某用途的人或物，東西；能做... 用途的東西。&lt;/li&gt;
&lt;li&gt;cise = cut 切割&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exercise = (外出反覆批砍) = 運動&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ac / ad = to&lt;/li&gt;
&lt;li&gt;cur = cure = take care&lt;/li&gt;
&lt;li&gt;rate = 變成...; 充當... = cause to become.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;accurate = (to become more care) = 精確&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pre 預先&lt;br /&gt;
 ex.&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;precise = 精確的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(pre cut the ambiguous part, then leave the things are sure.)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Life/EnglishLearn/Cambly-Lession1/</guid>
            <title>EnglishLearn/Cambly-Lession1</title>
            <link>https://z20240.github.io/Life/EnglishLearn/Cambly-Lession1/</link>
            <category term="Life" scheme="https://z20240.github.io/categories/Life/" />
            <category term="EnglishLearn" scheme="https://z20240.github.io/categories/Life/EnglishLearn/" />
            <category term="Cambly" scheme="https://z20240.github.io/categories/Life/EnglishLearn/Cambly/" />
            <category term="english" scheme="https://z20240.github.io/tags/english/" />
            <category term="cambly" scheme="https://z20240.github.io/tags/cambly/" />
            <pubDate>Wed, 28 Dec 2022 03:26:44 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;convenient = easier = handily (seldom used)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;cheaper&lt;/em&gt; may means low quality, don&#39;t used it all the time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;cheaper = low quality&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If we want to describe  &lt;code&gt;High quality and low price&lt;/code&gt; , we can use  &lt;code&gt;more affordable&lt;/code&gt; ,  &lt;code&gt;less expensive&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No American use &lt;strong&gt;CP (price–performance ratio)&lt;/strong&gt;, only Taiwanese use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we want to describe space are not in one place, we can use  &lt;code&gt;separator place&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;closet = a place to make people change their clothes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Data%20Storage/2022-10-08-sql-postgres-%E9%81%87%E5%88%B0-out-of-shared-memory-%E5%95%8F%E9%A1%8C/</guid>
            <title>SQL Postgres 遇到 out of shared memory 問題</title>
            <link>https://z20240.github.io/Tech/Data%20Storage/2022-10-08-sql-postgres-%E9%81%87%E5%88%B0-out-of-shared-memory-%E5%95%8F%E9%A1%8C/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Data Storage" scheme="https://z20240.github.io/categories/Tech/Data-Storage/" />
            <category term="postgres" scheme="https://z20240.github.io/tags/postgres/" />
            <category term="database" scheme="https://z20240.github.io/tags/database/" />
            <pubDate>Sat, 08 Oct 2022 12:42:30 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;sql-postgres-遇到-out-of-shared-memory-問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-postgres-遇到-out-of-shared-memory-問題&#34;&gt;#&lt;/a&gt; [SQL] Postgres 遇到 out of shared memory 問題&lt;/h3&gt;
&lt;p&gt;由於工作需要，我在 Postgresql 中創建了 20000 張 20 columns x 1000 entries 的 tables，約莫了 18G 的大小。&lt;/p&gt;
&lt;p&gt;由於要一次性創建如此海量的資料，因此我寫了段小 Script 來協助完成。&lt;/p&gt;
&lt;p&gt;期間在大約 2000 筆衣料左右的時候程式就會碰到  &lt;code&gt;out of shared memory&lt;/code&gt;  的問題，困擾我一段時間。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*4K08BRP-ucCyW_t2PddHdw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查詢了很多網站都沒有找到良好的解釋或是解決方案。&lt;/p&gt;
&lt;p&gt;直到後來查到 stackoverflow 上一個沒什麼人回應的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzY4OTEwMjM4&#34;&gt;解決方案&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A quick fix for  &lt;code&gt;PSQLException error out of shared memory&lt;/code&gt;  is to set the&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;max_locks_per_transaction&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;parameter in PostgreSQL config file, which specifies number of object locks allocated for each transaction (if there are statements/routines that work on large number of tables to finish.&lt;/p&gt;
&lt;p&gt;其實主要就是 PostgresSQL 在 transaction lock 有其上限。當 default 上限用完了，就會 out of shared memory.&lt;/p&gt;
&lt;p&gt;要解決的方法也不難，我們可以去 postgresql 的 config 中找到  &lt;code&gt;max_locks_per_transaction&lt;/code&gt;  將 default 的 64 加大。&lt;/p&gt;
&lt;p&gt;至於 postgresql config 是放在哪裡？&lt;/p&gt;
&lt;p&gt;這部分我們可以使用  &lt;code&gt;SHOW config_file;&lt;/code&gt;  這行 sql 查看。&lt;/p&gt;
&lt;p&gt;Default 應該都是在  &lt;code&gt;/var/lib/postgresql/data/postgresql.conf&lt;/code&gt;  的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*XoswqaeN0ZhTSGGzHSzrCA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY3liZXJ0ZWMtcG9zdGdyZXNxbC5jb20vZW4vcG9zdGdyZXNxbC15b3UtbWlnaHQtbmVlZC10by1pbmNyZWFzZS1tYXhfbG9ja3NfcGVyX3RyYW5zYWN0aW9uLw==&#34;&gt;POSTGRESQL: YOU MIGHT NEED TO INCREASE MAX_LOCKS_PER_TRANSACTION&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY0OTA2NjQvZXJyb3Itb3V0LW9mLXNoYXJlZC1tZW1vcnk=&#34;&gt;ERROR: out of shared memory&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Frontend/vue/2022-07-04-vue-nuxt-eslint-prettier-vscode-%E8%A8%AD%E5%AE%9A-%E8%AE%93-eslint-%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88-nuxt-%E5%B0%88%E6%A1%88/</guid>
            <title>Vue Nuxt + Eslint + Prettier +Vscode 設定 — 讓 Eslint 自動排版 Nuxt 專案</title>
            <link>https://z20240.github.io/Tech/Frontend/vue/2022-07-04-vue-nuxt-eslint-prettier-vscode-%E8%A8%AD%E5%AE%9A-%E8%AE%93-eslint-%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88-nuxt-%E5%B0%88%E6%A1%88/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Frontend" scheme="https://z20240.github.io/categories/Tech/Frontend/" />
            <category term="Vue" scheme="https://z20240.github.io/categories/Tech/Frontend/Vue/" />
            <category term="javascript" scheme="https://z20240.github.io/tags/javascript/" />
            <category term="vscode" scheme="https://z20240.github.io/tags/vscode/" />
            <category term="nuxt-3" scheme="https://z20240.github.io/tags/nuxt-3/" />
            <category term="eslint" scheme="https://z20240.github.io/tags/eslint/" />
            <category term="prettier" scheme="https://z20240.github.io/tags/prettier/" />
            <pubDate>Mon, 04 Jul 2022 18:52:32 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;vue-nuxt3-eslint-prettier-vscode-設定-讓-eslint-自動排版-nuxt-專案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue-nuxt3-eslint-prettier-vscode-設定-讓-eslint-自動排版-nuxt-專案&#34;&gt;#&lt;/a&gt; [Vue] Nuxt3 + Eslint + Prettier +Vscode 設定 — 讓 Eslint 自動排版 Nuxt 專案&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ET9CfH7oh7cubkTpNch7Xw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最近因為接案需要，決定使用 Nuxt 作為快速開發的框架。發現一段時間沒觀注，前端環境真是日新月異。 Nuxt 竟然也迎來第三版了。&lt;/p&gt;
&lt;p&gt;因此這次在設定環境時順便記錄了一下如何在專案中結合 Eslint + Prettier 與 Vscode 的自動風格檢查兼排版。&lt;/p&gt;
&lt;h3 id=&#34;nuxt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nuxt&#34;&gt;#&lt;/a&gt; Nuxt&lt;/h3&gt;
&lt;h4 id=&#34;安裝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝&#34;&gt;#&lt;/a&gt; 安裝&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;使用  &lt;code&gt;npx&lt;/code&gt;  直接安裝&lt;/strong&gt;&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ npx nuxi init &amp;lt;nuxt-app&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打開你的  &lt;code&gt;nuxt-app&lt;/code&gt; &lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ code nuxt-app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中如果我們不希望我們的 .nuxt 相依專案以  &lt;code&gt;.shim&lt;/code&gt;  的形式產生，我們先在  &lt;code&gt;nuxt.config.ts&lt;/code&gt;  內將 shim 設成  &lt;code&gt;false&lt;/code&gt;  .&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;export default defineNuxtConfig(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; typescript: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; shim: false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安裝相依套件&lt;/strong&gt;&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ yarn install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到這邊這些前置作業完成之後，我們先啟動一次 nuxt 讓他生成自己的  &lt;code&gt;.nuxt&lt;/code&gt;  專案。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ yarn dev -o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;vscode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vscode&#34;&gt;#&lt;/a&gt; Vscode&lt;/h3&gt;
&lt;h4 id=&#34;prettier-eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prettier-eslint&#34;&gt;#&lt;/a&gt; Prettier Eslint&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ovYVQpQEWiy2JY0l267wjw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eslint&#34;&gt;#&lt;/a&gt; Eslint&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;1*t-XiqWLBCtF_pu_VKsp3XQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;eslint-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eslint-2&#34;&gt;#&lt;/a&gt; Eslint&lt;/h3&gt;
&lt;h4 id=&#34;init&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#init&#34;&gt;#&lt;/a&gt; Init&lt;/h4&gt;
&lt;p&gt;執行  &lt;code&gt;npx eslint — init&lt;/code&gt;  初始化  &lt;code&gt;.eslintrc.js&lt;/code&gt;  並自動安裝相關的 dependency，他會問你一些問題來據此產生相關的設定&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;You can also run this command directly using ‘npm init @eslint/config’.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npx: 40 安裝成功，花費 3.812 秒&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ How would you like to use ESLint? · style&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ What type of modules does your project use? · esm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ Which framework does your project use? · vue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ Does your project use TypeScript? · No / Yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ Where does your code run? · browser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ How would you like to define a style for your project? · prompt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ What format do you want your config file to be in? · JavaScript&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ What style of indentation do you use? · 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ What quotes do you use for strings? · single&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ What line endings do you use? · unix&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ Do you require semicolons? · No / Yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The config that you’ve selected requires the following dependencies:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ Would you like to install them now? · No / Yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;✔ Which package manager do you want to use? · yarn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;產生出來的 .eslintrc.js 會像是這樣&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “env”: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “browser”: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “es2021”: true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “extends”: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “eslint:recommended”,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “plugin:vue/essential”,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “plugin:@typescript-eslint/recommended”&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “parserOptions”: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “ecmaVersion”: “latest”,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “parser”: “@typescript-eslint/parser”,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “sourceType”: “module”&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “plugins”: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “vue”,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “@typescript-eslint”&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; “rules”: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;install-dependency&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#install-dependency&#34;&gt;#&lt;/a&gt; Install Dependency&lt;/h4&gt;
&lt;p&gt;安裝相關的 dependency&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ yarn add -D eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest eslint@latest typescript eslint-plugin-nuxt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;package.json&lt;/code&gt;  的  &lt;code&gt;scripts&lt;/code&gt;  中加上  &lt;code&gt;“lint”: “eslint . — ext .ts,.vue”&lt;/code&gt;  然後使用  &lt;code&gt;yarn lint&lt;/code&gt;  來測試 eslint 是否有生效.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Mvfr8nd_T3OVC6U693GQVA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;! [ [image-20220704162435221.png] ]&lt;/p&gt;
&lt;h4 id=&#34;修改-eslintrc-加入-nuxt-與-eslint-的相關套件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改-eslintrc-加入-nuxt-與-eslint-的相關套件&#34;&gt;#&lt;/a&gt; 修改  &lt;code&gt;.eslintrc&lt;/code&gt;  加入 nuxt 與 eslint 的相關套件&lt;/h4&gt;
&lt;p&gt;把配置文件中 `extends` 做如下的修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;”plugin:vue/essential”&lt;/code&gt;  改成  &lt;code&gt;”plugin:vue/vue3-recommended”&lt;/code&gt;  (前者是 vue2 的設定，後者為 vue3)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;”eslint:recommended”&lt;/code&gt;  改成  &lt;code&gt;”plugin:nuxt/recommended”&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;刪除  &lt;code&gt;plugins&lt;/code&gt;  內的  &lt;code&gt;”vue”&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果檔案內出現 &lt;strong&gt;Component name should always be multi-word&lt;/strong&gt; 的錯誤，這是因為 nuxt 提倡 vue 文件的 Component 應該要用 multi-word snack case 進行命名。我們可以在 rules 中增加  &lt;code&gt;”vue/multi-word-component-names”: 0&lt;/code&gt;  來關閉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*DTodaOdB7g7Y3j-35PopQg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;prettier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prettier&#34;&gt;#&lt;/a&gt; Prettier&lt;/h3&gt;
&lt;h4 id=&#34;install-dependency-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#install-dependency-2&#34;&gt;#&lt;/a&gt; Install Dependency&lt;/h4&gt;
&lt;p&gt;安裝 &lt;strong&gt;prettier, eslint-plugin-prettier, eslint-config-prettier&lt;/strong&gt; 等相關套件&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ yarn add -D prettier eslint-plugin-prettier eslint-config-prettier&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eslint-plugin-prettier&lt;/code&gt;  : 讓我們可以在  &lt;code&gt;.eslintrc.js&lt;/code&gt;  中直接在  &lt;code&gt;rules&lt;/code&gt;  內使用  &lt;code&gt;prettier/prettier&lt;/code&gt;  屬性設定  &lt;code&gt;.prettierrc&lt;/code&gt;  ，省去多增加這個 file 的 maintainance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eslint-config-prettier&lt;/code&gt;  : 會自動關掉所有不必要且可能會跟 Prettier 相衝的設定，讓我們可以在 eslint 中設定自己要的 rule。舉例來說如果 eslint 的 rule 和 prettier 的 rule conflict 的時候 （例如 eslint 限制了必须單引號，prettier 也限制了必须單引號，那麼如果用 eslint 驅動 prettier 來做檢查的話就會提示兩種 error 儘管他們都指向同一種錯誤。）此時這個 Plugin 就可以關閉額外的 error 顯示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之後，一樣修改  &lt;code&gt;.eslintrc&lt;/code&gt;  中的  &lt;code&gt;extends&lt;/code&gt;  內容：增加  &lt;code&gt;’plugin:prettier/recommended’&lt;/code&gt; &lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;extends: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;quot;plugin:prettier/recommended&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此時可能會出現紅線佈滿每個檔案，這是因為 prettier 在偵測 rule 時，若是沒有發現  &lt;code&gt;.prettierrc&lt;/code&gt;  在專案中的話，就會去往更 root 的地方找，有可能 root 的 prettier 設定與專案所需不符。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*jt_CPBruvGdfc6I_svByEw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我們這時可以在  &lt;code&gt;.eslintrc.js&lt;/code&gt;  中的  &lt;code&gt;rules&lt;/code&gt;  中增加  &lt;code&gt;prettier/prettier&lt;/code&gt;  的來告訴 prettier 我們的 eslint 要怎樣的規則，如此可以取代掉在專案中建立  &lt;code&gt;.prettirerc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;完整的 .eslintrc.js 最終會如下&lt;/strong&gt;&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; env: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   browser: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   es2021: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   node: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; extends: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘plugin:vue/vue3-recommended’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘plugin:@typescript-eslint/recommended’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘plugin:nuxt/recommended’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘plugin:prettier/recommended’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; parserOptions: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ecmaVersion: ‘latest’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   parser: ‘@typescript-eslint/parser’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   sourceType: ‘module’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; plugins: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // “vue”,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘@typescript-eslint’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; rules: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   indent: [‘error’, 2],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘linebreak-style’: [‘error’, ‘unix’],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   quotes: [‘error’, ‘single’],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   semi: [‘error’, ‘always’],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘vue/multi-word-component-names’: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘comma-dangle’: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     ‘error’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         arrays: ‘always-multiline’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         objects: ‘always-multiline’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         imports: ‘never’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         exports: ‘never’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         functions: ‘never’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘vue/html-self-closing’: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     ‘error’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         html: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           void: ‘always’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           normal: ‘always’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           component: ‘always’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         svg: ‘always’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         math: ‘always’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ‘prettier/prettier’: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ‘error’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         printWidth: 120, // 最大長度&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         tabWidth: 2, // tab 縮排 2 空格&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         useTabs: false, // 使用空格縮排&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         singleQuote: true, // js 單引號&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         semi: true, // 要有分號&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         trailingComma: ‘es5’, // 使用 es5 規則規範結尾的逗號&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         arrowParens: ‘avoid’,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此時我們再使用  &lt;code&gt;ctrl+s&lt;/code&gt;  保存，應該就會發現可以自動格式化檔案了。&lt;/p&gt;
&lt;h4 id=&#34;trouble-shooting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#trouble-shooting&#34;&gt;#&lt;/a&gt; Trouble shooting&lt;/h4&gt;
&lt;p&gt;若是發現存檔後沒有如預期中自動格式化，可以檢查是否自己的 Vscode 預設格式化工具是  &lt;code&gt;prettier-eslint&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用  &lt;code&gt;cmd + p (ctrl + p)&lt;/code&gt;  ，輸入  &lt;code&gt;&amp;gt; Format Document&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*WT4Zgzex60odGfhRIgpXxw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選擇 Prettier ESLint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*CvCOrh9Ylw2-AlkWrb9A4g.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;之後再嘗試一次看看，基本上應該就要有反應了～&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pY29kZS5iZXN0L2kvNzA0MDU1NDYyMjY3NTk=&#34;&gt;nuxt3 项目中使用 eslint 和 prettier+commitlint 附常用规则配置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wcmV0dGllci5pby9kb2NzL2VuL2luc3RhbGwuaHRtbA==&#34;&gt;Prettier&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LXBsdWdpbi1udXh0&#34;&gt;eslint-plugin-nuxt&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Others/2022-06-16-tech-skhd-%E5%A4%B1%E5%8E%BB%E5%8A%9F%E8%83%BD-not-working-%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/</guid>
            <title>Tech skhd 失去功能 (Not working)的解決方法</title>
            <link>https://z20240.github.io/Tech/Others/2022-06-16-tech-skhd-%E5%A4%B1%E5%8E%BB%E5%8A%9F%E8%83%BD-not-working-%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Others" scheme="https://z20240.github.io/categories/Tech/Others/" />
            <category term="skhd" scheme="https://z20240.github.io/tags/skhd/" />
            <category term="yabai" scheme="https://z20240.github.io/tags/yabai/" />
            <category term="tiling-window-manager" scheme="https://z20240.github.io/tags/tiling-window-manager/" />
            <pubDate>Thu, 16 Jun 2022 15:25:19 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;tech-skhd-失去功能-not-working的解決方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tech-skhd-失去功能-not-working的解決方法&#34;&gt;#&lt;/a&gt; [Tech] skhd 失去功能 (Not working) 的解決方法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;0*A5q6r3JS-zTQfZVk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=&#34;&gt;Skhd&lt;/span&gt; 是一個適用於 MacOS 的小實用軟件，它允許我們重新映射各種操作的快捷方式。然而在某次 Mac 升級之後就發生 skhd 時不時停止運作的狀況。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先我必須要停止 skhd 的 process. 使用 &lt;strong&gt;brew&lt;/strong&gt; 來做到。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ brew services stop skhd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之後，可以使用 skhd -V 來以詳細模式運行&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ skhd -V&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;skhd: successfully created pid-file..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;skhd: secure keyboard entry is enabled by (5530) &amp;#x27;iterm2&amp;#x27;! abort..&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*-O6oGPKvPXPJx055gUTnJA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;訊息中顯示 mac 有一個  &lt;code&gt;secure keyboard entry&lt;/code&gt;  的模式不知道為什麼被打開了。&lt;/p&gt;
&lt;p&gt;通過進一步搜尋可以知道我們可以使用 iTerm2 的 menu 或是 Terminal 的 menu 來關閉這個模式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*FvKx68zuda255u3UiZds-w.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*dW3dMJS7WrqAj9NFzosk4Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到這邊理論上只要可以取消，之後再把 skhd 重啟就可以完成了。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ brew services start skhd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;更加複雜的-debug&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更加複雜的-debug&#34;&gt;#&lt;/a&gt; &lt;strong&gt;更加複雜的 Debug&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;事情如果到那邊就完結了，我也不用再寫這篇了。&lt;/p&gt;
&lt;p&gt;可惜問題就是發生在  &lt;code&gt;secure keyboard entry&lt;/code&gt;  無法被正確 disable&lt;/p&gt;
&lt;p&gt;因此我又繼續尋找資料，後來看到了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9maWcuaW8vZG9jcy9zdXBwb3J0L3NlY3VyZS1rZXlib2FyZC1pbnB1dCNmaWctYW5kLXNlY3VyZS1rZXlib2FyZC1pbnB1dA==&#34;&gt;這篇&lt;/span&gt; ，源自 Fig 一個新的 Termial plugin 有講到類似的除錯方法。我就一步一步整理過來。&lt;/p&gt;
&lt;p&gt;裡面有講到「如果無法取消選中該複選框，則 iTerm 檢測到安全輸入已啟用，但它不是負責的應用程序。要弄清楚如何禁用它，請繼續故障排除部分。」&lt;/p&gt;
&lt;p&gt;其羅列了以下幾種可能的原因&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、與密碼管理器衝突 (1Password, BitWarden)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;某些密碼管理器在輸入主密碼時會啟用  &lt;code&gt;Secure Keyboard Entry&lt;/code&gt;  ，但之後偶爾會無法禁用它。&lt;/p&gt;
&lt;p&gt;如果您使用 1Password、Bitwarden 或其他密碼管理器，請退出應用程序，然後檢查是否仍啟用  &lt;code&gt;Secure Keyboard Entry&lt;/code&gt;  。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果您要退出 1Password，請確保您完全退出它，而不僅僅是正常的 cmd+q 退出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;0*nlUF009uzQ11n5d5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果是密碼管理器負責，只需重新啟動它即可解決問題。否則，請繼續故障排除部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、其他未知的應用程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有時其他應用程序會啟用安全輸入，但在不再需要時無法將其關閉。&lt;/p&gt;
&lt;p&gt;我們可以使用以下指令顯示出需要使用此設定的應用程式。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ioreg -l -w 0 |  tr &amp;#x27;,&amp;#x27; &amp;#x27;\n&amp;#x27; 2&amp;amp;&amp;gt; /dev/null | grep kCGSSessionSecureInputPID | cut -f 2 -d = | uniq | xargs ps -o command= -p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ZhFCMO8tv_w42ZIjh8diHw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在我的例子中會發現是一個叫做  &lt;code&gt;loginWindow&lt;/code&gt;  的 process 暫用著。這似乎是 MacOS 的小 bug ，有時後 loginWindow 在 user login 之後不會 terminal (disable secure input entry) .&lt;/p&gt;
&lt;p&gt;這時候僅需要使用  &lt;code&gt;⌃ Control` + `⌘ Command` +`Q&lt;/code&gt;  將畫面進到上鎖之後重新登入，理論上就能夠解決這個問題。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不過，如果這樣的方式依然無法解決，也許「登出」、或「重開機」會是最後的解決方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2FtdW5kcmEuY29tLm5wL3NraGQtc3VkZGVubHktc3RvcHBlZC13b3JraW5nLWFmdGVyLXVwZ3JhZGUvMTczOA==&#34;&gt;SKHD SUDDENLY STOPPED WORKING AFTER UPGRADE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9maWcuaW8vZG9jcy9zdXBwb3J0L3NlY3VyZS1rZXlib2FyZC1pbnB1dCNmaWctYW5kLXNlY3VyZS1rZXlib2FyZC1pbnB1dA==&#34;&gt;Fig and Secure Keyboard Input&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Frontend/NodeJs/2022-05-16-node-%E5%A6%82%E4%BD%95%E6%AA%A2%E6%B8%AC-node-%E7%A8%8B%E5%BC%8F%E7%9A%84memory-leak-%E4%BB%A5%E5%8F%8A%E8%99%95%E7%90%86-out-of-memory-%E5%95%8F%E9%A1%8C/</guid>
            <title>Node 如何檢測 Node 程式的Memory Leak 以及處理 out of memory 問題</title>
            <link>https://z20240.github.io/Tech/Frontend/NodeJs/2022-05-16-node-%E5%A6%82%E4%BD%95%E6%AA%A2%E6%B8%AC-node-%E7%A8%8B%E5%BC%8F%E7%9A%84memory-leak-%E4%BB%A5%E5%8F%8A%E8%99%95%E7%90%86-out-of-memory-%E5%95%8F%E9%A1%8C/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Frontend" scheme="https://z20240.github.io/categories/Tech/Frontend/" />
            <category term="NodeJs" scheme="https://z20240.github.io/categories/Tech/Frontend/NodeJs/" />
            <category term="javascript" scheme="https://z20240.github.io/tags/javascript/" />
            <category term="nodejs" scheme="https://z20240.github.io/tags/nodejs/" />
            <category term="memory-leak" scheme="https://z20240.github.io/tags/memory-leak/" />
            <pubDate>Mon, 16 May 2022 18:10:49 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;node-如何檢測-node-程式的memory-leak-以及處理-out-of-memory-問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node-如何檢測-node-程式的memory-leak-以及處理-out-of-memory-問題&#34;&gt;#&lt;/a&gt; [Node] 如何檢測 Node 程式的 Memory Leak 以及處理 out of memory 問題&lt;/h3&gt;
&lt;p&gt;身為一個 NodeJs 工程師，在架構一個 NodeJs 應用程式的生涯中或多或少應該都有碰過  &lt;code&gt;Javascript heap out of memory&lt;/code&gt;  的狀況。&lt;/p&gt;
&lt;p&gt;畢竟 NodeJs 本身是跑在 V8 Engine 的 Script Language，本身在 main thread 中 default 僅有 1GB (In 64-bit system) 的 memory 配額。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*r2wJzxZlT7878dhsficsYA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;絕大多數時候其實都是單純 server 功能越來越多導致記憶體用量不夠，這個時候我們可以簡單地在執行程式時使用  &lt;code&gt;--max-old-space-size&lt;/code&gt;  來手動配額足夠的記憶體給 Node 使用。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 使用 8GB 的記憶體來執行 app.js (這邊的單位是 KB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ node --max-old-space-size=8192 app.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而若是當我們已經配置足夠大的記憶體，確還是發生了 &lt;strong&gt;out of memory&lt;/strong&gt; 的狀況呢？那應該十之八九是我們碰上了 memory leak 的問題了。&lt;/p&gt;
&lt;h4 id=&#34;監測-memory-heap-的使用量檢測是否-memory-leak&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#監測-memory-heap-的使用量檢測是否-memory-leak&#34;&gt;#&lt;/a&gt; 監測 memory heap 的使用量，檢測是否 memory leak&lt;/h4&gt;
&lt;p&gt;以往，我們要監測 memory heap 的使用需要利用諸如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGVhcGR1bXA=&#34;&gt;heapdump&lt;/span&gt; 這類的 heap snapshot 工具來建立快照。但是在 version 6 以上的版本我們可以使用  &lt;code&gt;--inspect&lt;/code&gt;  flag 來指示 node 執行 app.js 期間開啟監測模式。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ node --inspect index.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果你今天的 app 是使用 ts-node，你也可以使用以下指令來進入 node 的 inspect （&lt;/em&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHMtbm9kZSN1c2VyLWNvbnRlbnQtcHJvZ3JhbW1hdGlj&#34;&gt;https://www.npmjs.com/package/ts-node#user-content-programmatic&lt;/span&gt; &lt;em&gt;）&lt;/em&gt;&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ node -r ts-node/register --inspect ./app.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;node 會另外開啟一個 9229 的 port 來提供 debugger 使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ot3-OLwkVSRw-ImSrXxhCw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;你也可以使用  &lt;code&gt;--inspect-brk&lt;/code&gt;  ，這個 flag 會讓 node 監測模式啟動後停在第一個 statement。效果就類似設置一個 break point 在程式的第一行。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;接下來，我們就可以開啟 Google Chrome 的 &lt;strong&gt;DevTools&lt;/strong&gt; attach 到 debugger 來進行實時監控跟 debug 了。&lt;/p&gt;
&lt;p&gt;在 google chrome 網址列輸入  &lt;code&gt;about:inspect&lt;/code&gt;  可以進入到 Chrome 遠端開發工具畫面。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*vE4cxtjQLFRgYckFNgX2eQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果 prot 9229 已經開啟且被監聽，chrome 會自動找到相對應的 app 。之後我們可以點擊 &lt;strong&gt;inspect&lt;/strong&gt; 進入監控畫面。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*TnS_yRzEnIKV74ireuA50Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下來點到 「記憶體」的選項，我們可以錄製記憶體的快照。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*G7HH9z3wGJhG1mLZK-cvoQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DevTools 會分析出 app 中各個變數結構的使用大小、對比 root 的深度、物件本身佔用的記憶體總量… 等等，一目瞭然。甚至連變數名稱都列出來給你了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*y7HVRS0fXUw_u3Ypr-VCNg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下來我們要監測哪個變數導致記憶體增加就易如反掌了。&lt;/p&gt;
&lt;p&gt;以我們專案自身為例，在程式執行起來時 Array 所佔的記憶體容量還沒有到很多&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*hjkYvj6TLmxY9YM16b8Rsw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是隨著某個 API 的呼叫，大大地增加了 Array 在記憶體中的使用量。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*wZXni_hZC3GxrpjuOegfcA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此我們就可以據針對這個部分進行細部分析。來快速定位 memory leak 的原因。&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL0BwYXVsX2lyaXNoL2RlYnVnZ2luZy1ub2RlLWpzLW5pZ2h0bGllcy13aXRoLWNocm9tZS1kZXZ0b29scy03YzRhMWI5NWFlMjcjLnBtcWVqcm44cQ==&#34;&gt;Debugging Node.js with Chrome DevTools&lt;/span&gt; (這是一個國外的工程師的筆記，簡述了 google DevTools 針對 node inspect 的使用方式)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92b2N1cy5jYy9hcnRpY2xlLzYxMTc2YzE3ZmQ4OTc4MDAwMTk0MmYxYw==&#34;&gt;從你的 Node.js 專案裡找出 Memory leak，及早發現、及早治療！&lt;/span&gt; (這篇講得很詳細，另外還講到如何做壓力測試，值得一讀)&lt;/li&gt;
&lt;li&gt;其他有關 node Memory 相關的資訊：「 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQxNTM5OTYvaXMtdGhlcmUtYS1saW1pdC1vbi10aGUtc2l6ZS1vZi1hLXN0cmluZy1pbi1qc29uLXdpdGgtbm9kZS1qcw==&#34;&gt;Is there a limit on the size of a string in JSON with Node.js?&lt;/span&gt; 」、「 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjAwMTg1ODgvaG93LXRvLW1vbml0b3ItdGhlLW1lbW9yeS11c2FnZS1vZi1ub2RlLWpz&#34;&gt;How to monitor the memory usage of Node.js?&lt;/span&gt; 」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Others/2021-08-14-tiling-window-management-%E5%B9%B3%E9%8B%AA%E5%BC%8F%E8%A6%96%E7%AA%97%E7%AE%A1%E7%90%86-amethyst-yabai/</guid>
            <title>Tiling Window Management - 平鋪式視窗管理 (Amethyst &amp; Yabai)</title>
            <link>https://z20240.github.io/Tech/Others/2021-08-14-tiling-window-management-%E5%B9%B3%E9%8B%AA%E5%BC%8F%E8%A6%96%E7%AA%97%E7%AE%A1%E7%90%86-amethyst-yabai/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Others" scheme="https://z20240.github.io/categories/Tech/Others/" />
            <category term="tiling-window-manager" scheme="https://z20240.github.io/tags/tiling-window-manager/" />
            <pubDate>Sun, 15 Aug 2021 05:05:43 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;tiling-window-management-平鋪式視窗管理-amethyst-yabai&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tiling-window-management-平鋪式視窗管理-amethyst-yabai&#34;&gt;#&lt;/a&gt; Tiling Window Management - 平鋪式視窗管理 (Amethyst &amp;amp; Yabai)&lt;/h3&gt;
&lt;h4 id=&#34;借鑑linux另一種視窗管理的思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#借鑑linux另一種視窗管理的思路&#34;&gt;#&lt;/a&gt; 借鑑 Linux，另一種視窗管理的思路&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;1*VrezmQ_2bsHHCUSFxNm2kQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 macOS 中，要做視窗管理不是依靠手動拖曳視窗邊角調整大小及位置，就是依靠其他視窗管理工具諸如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90dy9hcHAvbWFnbmV0L2lkNDQxMjU4NzY2P210PTEy&#34;&gt;Magnet&lt;/span&gt; 或是 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90dy9hcHAvbW9vbS9pZDQxOTMzMDE3MD9tdD0xMg==&#34;&gt;Moom&lt;/span&gt; 這類快速調整視窗的小工具作為輔助。&lt;/p&gt;
&lt;p&gt;然而在每次開啟新的視窗的時候通常仍需要自己手動定位是窗的位置及大小，還是不太方便。&lt;/p&gt;
&lt;p&gt;另外當視窗一多起來，依然免除不了需要通過手勢「展開」來從茫茫視窗海中找尋所需要視窗的痛苦。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MacOS 本身的視窗管理能力是有目共睹的混亂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;1*9swWR0x1rBw6aDOhFwLACQ.gif&#34; alt=&#34;通常視窗一多就會擠在一起，macOS 用戶就必須通過「展開」來從茫茫程式海中找尋&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通常視窗一多就會擠在一起，macOS 用戶就必須通過「展開」來從茫茫程式海中找尋&lt;/p&gt;
&lt;p&gt;今天要介紹的「平鋪式視窗管理」不同於 macOS 一般預設的視窗管理機制，其特色則是：「 &lt;em&gt;盡可能地將所有視窗依照設定好的規則展開，&lt;/em&gt; 並且 &lt;strong&gt;避免視窗重疊&lt;/strong&gt; 在一起。」&lt;/p&gt;
&lt;p&gt;如此更能讓人一目瞭然現在桌面上有哪些視窗。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*TXuDJEdkIjdJll5Xs2wZ2w.png&#34; alt=&#34;所有視窗都展開來&#34; /&gt;&lt;/p&gt;
&lt;p&gt;所有視窗都展開來&lt;/p&gt;
&lt;p&gt;當開啟新的視窗的時候視窗管理工具就會自動依照規則做好佈局，免除了視窗蓋來蓋去的問題。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*5NPkQIS5TR09HiaxkU6Bwg.gif&#34; alt=&#34;通常當視窗只有一個的時候會預設展開到最大，之後以二分法的方式分隔空間&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通常當視窗只有一個的時候會預設展開到最大，之後以二分法的方式分隔空間&lt;/p&gt;
&lt;p&gt;Tiling Window Management 中最為人熟知的就是 Linux 下 i3 的視窗管理了。其自動排列視窗、平鋪視窗的特性讓許多人即使離開了 Linux 也念念不忘。&lt;/p&gt;
&lt;p&gt;因此身為 Unix Like 的 MacOS 當然也一定會有人想要移植這樣一套方便的視窗管理工具。&lt;/p&gt;
&lt;p&gt;今天就主要介紹兩款網路上比較常見的 Tiling Window Management 套件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0&#34;&gt;Amethyst&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFp&#34;&gt;Yabai&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這兩個套件都是 Open Source 的，因此都可以在 Github 上找到。&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0&#34;&gt;Amethyst&lt;/span&gt; 是比較簡單容易上手的；而 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFp&#34;&gt;Yabai&lt;/span&gt; 更適合進階使用者使用。&lt;/p&gt;
&lt;p&gt;為了簡單講解，接下來都會以 TWM 作為 Tiling Window Management 的縮寫。&lt;/p&gt;
&lt;h3 id=&#34;amethyst&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#amethyst&#34;&gt;#&lt;/a&gt; Amethyst&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;1*qFXBBoqP39Bv_aTtmSmOUw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Amethyst 是一個非常容易入門的 TWM， 並且提供了非常多樣的視窗佈局可供選擇。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*zzg2M4dVZZYvVsgFEPC_Yg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基本上安裝好 Amethyst 之後我們不需要做其他額外的設定即可開始使用。&lt;/p&gt;
&lt;p&gt;Amethyst 擁有非常多樣的快捷鍵可以設定。通過簡單的快捷鍵我們可以很容易地操控各個視窗。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*inR_OfCObjnbxZIX-srkaA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;非常適合想要開箱即用的使用者。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*iES9yQoVnwQGxsKoHhE2uQ.gif&#34; alt=&#34;利用設定好的快捷鍵，可以很容易地操控佈局中的視窗&#34; /&gt;&lt;/p&gt;
&lt;p&gt;利用設定好的快捷鍵，可以很容易地操控佈局中的視窗&lt;/p&gt;
&lt;p&gt;但是缺點也很明顯，我列舉了幾個觀察到的缺點如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沒有辦法客製化自己的佈局&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這其實並不是什麼大問題， Amethyst 提供了許許多多的佈局種類，基本上可以滿足絕大多數使用者的需求。然而若是對佈局方式比較有自己想法的人，Amethyst 這部分可能就無法滿足。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;視窗只能水平縮放、不能垂直縮放&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Amethyst 採用「主要視窗」與「次要視窗」的概念。&lt;/p&gt;
&lt;p&gt;其中僅有「主要視窗」可以進行水平縮放 (依然無法垂直縮放)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*HKWfSFdae-qERrku4XnJKA.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上面的 gif 為例，右側的 Terminal 就會顯得非常的狹小，其實並不利於使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;能夠使用的功能已經被 Amethyst 定死，僅能使用熱鍵提供綁定的功能，無法另外設定其他功能。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這是所有開箱即用的小工具都一定會有的軟肋。畢竟要讓人簡單上手，一定就是要設定越少越好。這應該算是一種妥協吧～。&lt;/p&gt;
&lt;h4 id=&#34;安裝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝&#34;&gt;#&lt;/a&gt; 安裝&lt;/h4&gt;
&lt;p&gt;Amethyst 的安裝非常簡單，僅需要使用 brew ，一行指令即可。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;brew install --cask amethyst&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安裝完後，會在 Application Perference 中出現一個 app ，開啟後即可開始使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*i_uezLMOZqgIPNsnrzKkmQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;yabai&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yabai&#34;&gt;#&lt;/a&gt; Yabai&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Ciz6Od9ySfrVtkiEs72l_w.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;相較於 Amethyst 開箱即用， Yabai 走在另一個極端。&lt;/p&gt;
&lt;p&gt;Yabai 僅僅提供了一套完整 TWM 的指令集框架來操控視窗。使用者需要自行撰寫熱鍵設定、功能腳本來達到想要的結果。但也因為如此 Yabai 給予了極高的可設定彈性。&lt;/p&gt;
&lt;p&gt;舉個例子，若是想要將視窗延展到最大，Yabai 需要使用以下指令完成。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;yabai -m window --toggle zoom-fullscreen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而若是每次要執行一個動作就必須使用一次指令，這是極度不切實際的。&lt;/p&gt;
&lt;p&gt;因此通常使用者會搭配一套叫做 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=&#34;&gt;skhd&lt;/span&gt; 的快捷鍵管理程式，設定自己的快捷鍵映射到 Yabai 的指令。&lt;/p&gt;
&lt;p&gt;還好網路上充斥著各路高手自行設定的 TWM 腳本設定，對於剛接觸的新手而言也大大了降低了入門的難度。&lt;/p&gt;
&lt;p&gt;網路上有人說使用 Yabai 需要關閉 MacOS 的 System Integrity Protection 功能，但是其實這只是 Optional 。除非我們需要「更加進階的用法」不然一般的情況下依然可以很良好的使用。&lt;/p&gt;
&lt;p&gt;我個人很推薦先從這個 Youtuber 的 Yabai 介紹開始下手，他不僅展示了他自己的 Yabai ，還丟出了自己的設定檔跟設定教學。算是非常完整的簡易入門。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JL1lz77YbUE&#34;&gt;&lt;img data-src=&#34;702b_hqdefault.jpg&#34; alt=&#34;Yabai - Tiling Window Manager for Mac [ Tutorial ]&#34; title=&#34;Yabai - Tiling Window Manager for Mac [ Tutorial ]&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;安裝-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝-2&#34;&gt;#&lt;/a&gt; 安裝&lt;/h4&gt;
&lt;p&gt;為了良好的 Yabai 體驗，需要安裝 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFpL3dpa2k=&#34;&gt;yabai&lt;/span&gt; 與 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQ=&#34;&gt;skhd&lt;/span&gt; 兩個 cli 套件。&lt;/p&gt;
&lt;p&gt;由於我本人並不想關閉 MacOS 的 System Integrity Protection ，因此以下的安裝流程會是以不關閉 MacOS 的 System Integrity Protection 為主。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 Yabai&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;brew install koekeishiya/formulae/yabai&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 jq （這是一個 Json 的可視化 cli ，讓我們可以在 terminal 中容易的操控 JSON 物件）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;brew install jq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 skhd (快捷鍵的設定套件)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;brew install koekeishiya/formulae/skhd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;三個都安裝完之後，你需要設定  &lt;code&gt;.yabairc&lt;/code&gt;  以及  &lt;code&gt;.skhdrc&lt;/code&gt;  檔案。&lt;/p&gt;
&lt;p&gt;其中  &lt;code&gt;.yabairc&lt;/code&gt;  是 yabai 的設定檔；而  &lt;code&gt;.skhdrc&lt;/code&gt;  則是 skhd 設定快捷鍵的設定檔。&lt;/p&gt;
&lt;p&gt;你可以將 .yabairc 與 .skhdrc 放置在家目錄 $HOME 中，或是在 .config 中建立各自的 config folder 都可以。&lt;/p&gt;
&lt;p&gt;我自己是將設定檔都 git 包成一包，放在 .config 中，並且使用  &lt;code&gt;ln -s&lt;/code&gt;  軟連結到家目錄了。&lt;/p&gt;
&lt;p&gt;如果不嫌棄，也可以使用我的設定&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// git 下載我的 yabai 設定到 .config/yabai&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ git clone https://github.com/z20240/yabai.git &amp;quot;$&amp;#123;HOME&amp;#125;&amp;quot;/.config/yabai&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 軟連結 .config/yabai 中的 yabairc 設定到家目錄&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ ln -s &amp;quot;$&amp;#123;HOME&amp;#125;/.config/yabai/yabai/yabairc&amp;quot; &amp;quot;$&amp;#123;HOME&amp;#125;/.yabairc&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主要實現功能有以下這些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增的視窗依照目前的關注位置分割&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ieNyG9uhzw66lGXrjyxNKQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用快捷鍵水平 / 垂直縮放視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*5ZVbxolpIuH9BY8FK4PBIg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑鼠拖動即可調整視窗大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*3B9-BHm02eQC4mlV_Uh7dg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑鼠拖動到視窗的邊側，可置換視窗到其位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*vOsem0TohjoiQyRwj__IYA.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑鼠拖動可以到視窗中央，可以堆疊這兩個視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*0-vM8MdNwqYIa38cHmDIqw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速變換焦點視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*PiIo2aasyB15nf1zbMWO9w.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速對換視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*TZbmWNgQkEmsZmol6fSdnw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵放大 / 縮小視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*uA-p4IlvU3hOKYDsQFy8qg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵將視窗丟到其他工作區&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*k770qOtVklQZxhr0j7aCew.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵將視窗脫離 TWM，並且在這樣的狀況下依然可以快速排列視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*rf5sUpiqjZXPuJFW_-TiXQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵將視窗與其他視窗堆疊，以堆疊的形式整理視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*--6z5M0BwxkCgclrwDuYsQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一鍵旋轉目前的佈局樣式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*RHb6p3zEYN6GIVtXhQvtUg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;另外，關於 stack 堆疊的效果，我額外使用了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0FkYW1XYWduZXIvc3RhY2tsaW5l&#34;&gt;stackline&lt;/span&gt; 的小圖示特效。&lt;/p&gt;
&lt;p&gt;他可以更好地將目前有堆疊狀態的視窗給顯示出來，有效的降低了忘記視窗存在的狀況。&lt;/p&gt;
&lt;p&gt;目前我主要就是使用這些功能，未來如果有想到什麼需要的功能會繼續更新在設定檔中。&lt;/p&gt;
&lt;h3 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h3&gt;
&lt;p&gt;TWM 的使用體驗是真的優於以往的視窗管理方法。&lt;/p&gt;
&lt;p&gt;他更有效率地整理雜亂無章的視窗佈局，大大提高了我們在視窗之間游移速度，並且減少了許多記憶視窗位置的心智負擔。&lt;/p&gt;
&lt;p&gt;至於對於到底該使用 Amethyst 或是 Yabai？&lt;/p&gt;
&lt;p&gt;我認為這完全是個人喜好問題。&lt;/p&gt;
&lt;p&gt;真要給點意見的話，我個人認為從 Amethyst 開始入門是一個不錯的起手式。&lt;/p&gt;
&lt;p&gt;畢竟我就是在 Amethyst 玩一段時間後開始發現 Amethyst 的不足並且決定跳槽到 Yabai。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就像是發現了新大陸一般，著實被 Yabai 的強大給折服。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通過 skhd 搭配 Yabai 的設定，我們幾乎可以做到任何想得到的快捷鍵用法設定。剩下的只有「想不想得到」而沒有「做不做得到」的問題了。&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lhbnloL0FtZXRoeXN0&#34;&gt;Amethyst&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3lhYmFpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZA==&#34;&gt;Yabai&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tvZWtlaXNoaXlhL3NraGQvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k&#34;&gt;skhd&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubm90aW9uLnNvL1lhYmFpLThkYTNiODI5ODcyZDQzMmZhYzQzMTgxYjdmZjYyOGZj&#34;&gt;Yabai-note&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0FkYW1XYWduZXIvc3RhY2tsaW5l&#34;&gt;stackline&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibGFuYm9vbS5vcmcvMjAxOS95YWJhaS8=&#34;&gt;用于 macOS 平铺式窗口管理器 — yabai&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Linux/2021-06-07-%E9%97%9C%E6%96%BC-selinux-policy/</guid>
            <title>關於 SELinux Policy</title>
            <link>https://z20240.github.io/Tech/Linux/2021-06-07-%E9%97%9C%E6%96%BC-selinux-policy/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Linux" scheme="https://z20240.github.io/categories/Tech/Linux/" />
            <category term="linux" scheme="https://z20240.github.io/tags/linux/" />
            <category term="rhel" scheme="https://z20240.github.io/tags/rhel/" />
            <category term="selinux" scheme="https://z20240.github.io/tags/selinux/" />
            <category term="tech" scheme="https://z20240.github.io/tags/tech/" />
            <pubDate>Mon, 07 Jun 2021 19:22:50 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;關於-selinux-policy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#關於-selinux-policy&#34;&gt;#&lt;/a&gt; 關於 SELinux Policy&lt;/h3&gt;
&lt;p&gt;最近工作上需要研究一下 Red Hat 這款 Linux，在其上進行 k8s 安裝時，發現其對於 service 的檔案存取跟 Ubuntu, Debian 這類的 Linux 有些許不同。其中多了一層叫做 SELinux 的 Policy 作為權限存取的保護，因此花了一些時間好好的來了解一下這個 SELinux Policy 是什麼東西。&lt;/p&gt;
&lt;h4 id=&#34;簡介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#簡介&#34;&gt;#&lt;/a&gt; 簡介&lt;/h4&gt;
&lt;p&gt;SELinux 全稱 (Security-Enhanced Linux) 是一個 Linux core 的 module ，算是一個 Linux 的安全子系統，主要存在 fedora base 的 Linux 中。現在以 CentOS, Red Hat 這幾款 Linux 比較常見。&lt;/p&gt;
&lt;p&gt;SELinux 主要作用是「最大限度地減小系統中可訪問的資源」、能不開放的就不開放（最小權限原則）。&lt;/p&gt;
&lt;p&gt;為什麼會需要 SELinux 呢？主要是基礎的 Linux 在檔案存取的權限控管上總有一些不足之處。&lt;/p&gt;
&lt;h4 id=&#34;一般-linux-權限管理的問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一般-linux-權限管理的問題&#34;&gt;#&lt;/a&gt; 一般 Linux 權限管理的問題&lt;/h4&gt;
&lt;p&gt;一般 Linux 權限管理通常只有兩個級別：  &lt;code&gt;root&lt;/code&gt;  與  &lt;code&gt;user&lt;/code&gt;  ，當中難以實現更小的權限管理概念。但是這兩個級別的權限又常常會互相賦予。&lt;/p&gt;
&lt;p&gt;例如 Linux 允許用戶或程式將不安全的檔案權限賦予他人，或反過來存取系統正在正常運作下「無須存取的部分」。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;root 無法控制 user ： user 可以把「誰都可以讀取的權限」給予敏感的檔案 ex. ssh 金鑰常放置在～/.ssh 目錄。&lt;/li&gt;
&lt;li&gt;process 可以更改安全性的屬性：每位 user 的郵件應該只供此用戶讀取，但是客戶端的 application 有能力將其改為誰都能讀取。&lt;/li&gt;
&lt;li&gt;process 可以繼承用戶的權限：我們假設某個 service 被木馬程式所佔用，他可能存取 user 的 ssh key 或是其他不該擁有權限存取的檔案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡言之，傳統的 Linux 無法簡易地實施最小權限的理念。很多由 root 啟動的 process 最終都會使用「受限制的用戶身份」來運行、存取用戶的檔案；有些則會在 chroot 的情況下執行。&lt;/p&gt;
&lt;h4 id=&#34;selinux-解決方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selinux-解決方案&#34;&gt;#&lt;/a&gt; SELinux 解決方案&lt;/h4&gt;
&lt;p&gt;SELinux 預設使用 &lt;strong&gt;enforcing&lt;/strong&gt; 情況下，一切的存取要求都會先被拒絕。&lt;/p&gt;
&lt;p&gt;接下來使用一系列的「例外政策」來允許系統的每個元素 (service, process, user, …etc) 運作所需要的存取權。 &lt;strong&gt;當一個元素嘗試存取或修改他不須用的檔案或資源的時候，她的請求就會被拒絕。&lt;/strong&gt; 並且這個行為會被記錄下來 (預設放置在  &lt;code&gt;/var/log/audit/audit.log&lt;/code&gt;  )。&lt;/p&gt;
&lt;h4 id=&#34;selinux-的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selinux-的工作原理&#34;&gt;#&lt;/a&gt; SELinux 的工作原理&lt;/h4&gt;
&lt;p&gt;SELinux 主要有三大部分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enforcing：強制模式，依據設定來限制檔案資源存取。&lt;/li&gt;
&lt;li&gt;Permissive：寬容模式，不限制檔案資源存取，但仍會依據設定檢查並記錄相關訊息。&lt;/li&gt;
&lt;li&gt;Disabled：停用 SELinux。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作類型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strict：每個 process 都受到限制&lt;/li&gt;
&lt;li&gt;targeted：限制大部分網路的服務 (Red Hat 7 default 是這個)&lt;/li&gt;
&lt;li&gt;minimum：限制部分的網路服務 (CentOS 7 default 是這個)&lt;/li&gt;
&lt;li&gt;mls：多級安全限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;安全上下文 (Security context)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 SELinux 中，我們可以使用  &lt;code&gt;ls -Z&lt;/code&gt;  或  &lt;code&gt;ps -eZ&lt;/code&gt;  查看到檔案目錄或是 process 的 security context.&lt;/p&gt;
&lt;p&gt;process 或 檔案目錄的 security context 必須對應才能存取。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*o4gpFTbf0gWP-KWY-CnxZQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我們可使用  &lt;code&gt;sestatus&lt;/code&gt;  查看目前 SELinux 的工作狀態&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*sm2kXbOKHi7OHowp5KQfAg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SELinux 會依照「工作模式」、「工作類型」制定不同的策略，並且去比對 process 或是目錄檔案的 security context ，如果對應才會去比對 Linux 的 RWX 權限，否則就 reject。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*4JcEry75wMdLTp2wkWOSEQ.png&#34; alt=&#34;[www.Linuxidc.com](http://www.Linuxidc.com)&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一般來說，我們該隨意地去更動「工作類型」或「工作模式」。&lt;/p&gt;
&lt;p&gt;因此主要都是修改目錄檔案或是 process 的 &lt;strong&gt;security context&lt;/strong&gt; 來符合 SELinux 規範。&lt;/p&gt;
&lt;p&gt;security context 主要以以下 5 個字段利用「：」做為分隔符號構成。&lt;/p&gt;
&lt;p&gt;分別代表的涵意如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user：身份識別；「undefined_u：不受限的用戶或文件」、「system_u：受限的 process 或文件」&lt;/li&gt;
&lt;li&gt;role：角色 ；「object_r：文件」、「sytsme_r：process 或 user」&lt;/li&gt;
&lt;li&gt;type：代表數據類型，決定何種類型的 process 可以訪問何種的文件&lt;/li&gt;
&lt;li&gt;sensitivity：安全級別，s0 最低級別 （只有在 mls 類型下會用到）&lt;/li&gt;
&lt;li&gt;category：劃分的不同分類&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，我們可以藉由安裝  &lt;code&gt;setools-console.x86_64&lt;/code&gt;  來獲得操控 selinux 的指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seinfo&lt;/li&gt;
&lt;li&gt;sesearch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo yum install setools-console.x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;藉由以下幾個指令，我們可以得知 SELinux 有哪些種類的字段。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;seinfo -u # 查詢所有的 user 字段 (8個)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;seinfo -r # 查詢所有的 role 字段 (14個)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外我們可以使用 sesearch -A 查詢什麼類型的 process 可以什麼 type 的 file。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sesearch -A -s [type] # 查詢 type 的 process 能夠讀取的文件類型&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*-S0VPmREwFR2J6GZrnWu3A.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;修改當前的-context&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改當前的-context&#34;&gt;#&lt;/a&gt; 修改當前的 context&lt;/h4&gt;
&lt;p&gt;可以使用  &lt;code&gt;chcon&lt;/code&gt;  手動修改 &lt;strong&gt;security context&lt;/strong&gt; 。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;chcon [option] target&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chcon -t # 修改 context 的 type&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chcon -u # 修改 context 的 user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chcon -r # 修改 context 的 role&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chcon -l # 修改 context 的 sensitivity level&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chcon -R # Recirsive target 下所有目錄結構修改&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h4&gt;
&lt;p&gt;SELinux Policy 是一個增強 Linux 安全性的措施。&lt;/p&gt;
&lt;p&gt;我們應該盡量確保一個 process 僅能存取其所需要的檔案與目錄結構。&lt;/p&gt;
&lt;p&gt;另外，我們若要開放存取也應該使用 chcon -t 修改標籤的方式去將目標檔案對 process 類型做匹配，而非直接暴力修改 chmod 或是 chroot 開放資源的權限。&lt;/p&gt;
&lt;p&gt;這篇文章只是很基礎的 SELinux 介紹，以下的參考資料會更加完整與詳細，有興趣可以就這幾篇文章查看，相信會有更完整的認識。&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmNlbnRvcy5vcmcvemgtdHcvSG93VG9zL1NFTGludXg=&#34;&gt;CentOS Wiki — SELinux&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGludXhpZGMuY29tL0xpbnV4LzIwMTgtMDgvMTUzNDU0Lmh0bQ==&#34;&gt;Linux 公社 — SELinux&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ra25ld3MuY2MvemgtdHcvY29kZS9qbW4zbDU2Lmh0bWw=&#34;&gt;每日頭條 — 一文徹底明白 SELinux&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eF9hdG9taWNfaG9zdC83L2h0bWwvZ2V0dGluZ19zdGFydGVkX3dpdGhfa3ViZXJuZXRlcy9nZXRfc3RhcnRlZF9wcm92aXNpb25pbmdfc3RvcmFnZV9pbl9rdWJlcm5ldGVz&#34;&gt;Red Hat — CHAPTER 2. GET STARTED PROVISIONING STORAGE IN KUBERNETES&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eF9hdG9taWNfaG9zdC83L2h0bWwvY29udGFpbmVyX3NlY3VyaXR5X2d1aWRlL2RvY2tlcl9zZWxpbnV4X3NlY3VyaXR5X3BvbGljeQ==&#34;&gt;Red Hat — CHAPTER 6. DOCKER SELINUX SECURITY POLICY&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Data%20Storage/2021-05-16-sql-mysql-postgresql-%E8%88%87-mongodb-%E5%A6%82%E4%BD%95%E5%A4%A7%E9%87%8F%E7%94%A2%E7%94%9F%E6%B8%AC%E8%A9%A6%E8%B3%87%E6%96%99/</guid>
            <title>SQL MySQL, PostgreSQL 與 MongoDB 如何大量產生測試資料</title>
            <link>https://z20240.github.io/Tech/Data%20Storage/2021-05-16-sql-mysql-postgresql-%E8%88%87-mongodb-%E5%A6%82%E4%BD%95%E5%A4%A7%E9%87%8F%E7%94%A2%E7%94%9F%E6%B8%AC%E8%A9%A6%E8%B3%87%E6%96%99/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Data Storage" scheme="https://z20240.github.io/categories/Tech/Data-Storage/" />
            <category term="mysql" scheme="https://z20240.github.io/tags/mysql/" />
            <category term="postgresql" scheme="https://z20240.github.io/tags/postgresql/" />
            <category term="mongodb" scheme="https://z20240.github.io/tags/mongodb/" />
            <pubDate>Sun, 16 May 2021 19:02:14 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;sql-mysql-postgresql-與-mongodb-如何大量產生測試資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-mysql-postgresql-與-mongodb-如何大量產生測試資料&#34;&gt;#&lt;/a&gt; [SQL] MySQL, PostgreSQL 與 MongoDB 如何大量產生測試資料&lt;/h3&gt;
&lt;h4 id=&#34;dummy-data-test-data-mongo-mysql-postgresql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dummy-data-test-data-mongo-mysql-postgresql&#34;&gt;#&lt;/a&gt; Dummy data, Test data, mongo, mysql, postgresql.&lt;/h4&gt;
&lt;p&gt;在網頁前端的領域，工程師常常使用 &lt;strong&gt;lorem&lt;/strong&gt; 這種「不具意義」的文字作為排版的測試。&lt;/p&gt;
&lt;p&gt;在後端領域，我們時常也需要資料庫中有「大量但並不需要具有真實意義的資料」也就是所謂的 dummy data，供我們的程式能夠進行測試。&lt;/p&gt;
&lt;p&gt;網路上有很多可以產生 dummy data 的網站，可以讓人很輕鬆的產生大量的資料供使用者測試跟使用。&lt;/p&gt;
&lt;p&gt;但是，其實我們可以直接使用簡單的 SQL 就達成這樣的目的，無需再去網路上找尋這種 dummy data generator.&lt;/p&gt;
&lt;p&gt;以下針對 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcv&#34;&gt;PostgreSQL&lt;/span&gt; 、 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXlzcWwuY29tLw==&#34;&gt;MySQL&lt;/span&gt; 跟 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vY2xvdWQvYXRsYXMvbHAvdHJ5Mg==&#34;&gt;MongoDB&lt;/span&gt; 三種比較常見的 Database 提供 dummy data generate 的語法。&lt;/p&gt;
&lt;h4 id=&#34;postgresql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#postgresql&#34;&gt;#&lt;/a&gt; PostgreSQL&lt;/h4&gt;
&lt;p&gt;我們先 Create 一個空 table 作為講解使用。&lt;br /&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Create a table `users`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; users  (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    id uuid &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; uuid_generate_v4 (),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    name &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    email &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;PRIMARY&lt;/span&gt; KEY (id)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;基本思路是，利用 PostgreSQL 內建的  &lt;code&gt;generate_series&lt;/code&gt;  指令，產生大量的流水號，再利用流水號的數量塞入 random 的資料進資料庫。&lt;/p&gt;
&lt;p&gt;細節的指令可以查看以下的語法：&lt;br /&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- random 10,000 data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;INTO&lt;/span&gt; users (name, email)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; md5(random()::text), CONCAT(random()::text, &lt;span class=&#34;string&#34;&gt;&amp;#x27;@xxx.com&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; generate_series(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;檢查一下是否真的塞入了 10000 筆資料了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*5I9wbUun0tnHjHOiebc06Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h4&gt;
&lt;p&gt;MySQL 沒有像 PostgreSQL 的 generate_series 這樣方便的工具，因此我們要自己寫。&lt;/p&gt;
&lt;p&gt;假設我們一樣需要 10,000 筆的資料，基本思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我們先建立一張擁有流水號 1 ~ 10,000 的臨時表，可以使用 in-memory table。&lt;/li&gt;
&lt;li&gt;基於 select 這個臨時表來 insert dummy data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那麼問題就簡化到，我們該怎麼建立這樣的臨時表呢？&lt;/p&gt;
&lt;p&gt;網路上有幾種方法。第一種是使用  &lt;code&gt;store procedure&lt;/code&gt;  ；其二就是我今天想介紹的作法：直接使用 python, node 這種小程式 &lt;strong&gt;一行創建&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;創建臨時表 table&lt;/strong&gt;&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CREATE TABLE tmp_table (id INT,  PRIMARY KEY (id)) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;幫臨時表 insert 10000 筆的流水號的文件，作為準備。&lt;/p&gt;
&lt;p&gt;Python Version:&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python -c &amp;#x27;print(&amp;quot;id&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for i in range(1, 1+10000): print(i)&amp;#x27; &amp;gt; base.csv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;NodeJs Version:&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;node -e &amp;#x27;console.log(&amp;quot;id&amp;quot;); for(let i=1; i&amp;lt;=10000; i++) console.log(i);&amp;#x27; &amp;gt; base.csv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;從 base.txt 導入數據到剛剛的臨時表&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mysql&amp;gt; load data infile &amp;#x27;/Your/file/path/base.txt&amp;#x27; replace into table tmp_table;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;確認一下是否有成功導入&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*u7tqvIP1aNErGnjuZjRcdg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下來我們就能利用這個流水表，創建隨機資料了。&lt;/p&gt;
&lt;p&gt;一樣使用剛剛 Create 資料表的語法創建一個 table 當作目標 table&lt;br /&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Create a table `users`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; `users`  (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    `id` &lt;span class=&#34;type&#34;&gt;binary&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;36&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;primary&lt;/span&gt; key,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    `name` &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    `email` &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下來就可以使用  &lt;code&gt;tmp_table&lt;/code&gt;  塞入大量的 random data.&lt;br /&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- random 10,000 data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;INTO&lt;/span&gt; users (id, name, email)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; uuid(), md5(&lt;span class=&#34;keyword&#34;&gt;LEFT&lt;/span&gt;(UUID(), &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)), CONCAT(&lt;span class=&#34;keyword&#34;&gt;LEFT&lt;/span&gt;(UUID(), &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;#x27;@xxx.com&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; tmp_table;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;mongodb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mongodb&#34;&gt;#&lt;/a&gt; MongoDB&lt;/h4&gt;
&lt;p&gt;mongodb 要產生 dummy data 很簡單。&lt;/p&gt;
&lt;p&gt;我們只需要使用 forloop 即可產生我們想要的數量。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mongo&amp;gt; for (var i = 1; i &amp;lt;= 10000; i++) db.users.insert( &amp;#123; name : UUID(), email: UUID() + &amp;quot;@mail.com&amp;quot; &amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下來檢查看看，是否真的有 10000 筆資料。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*TvJnGY8LvtvZok6MRDLg9g.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h4&gt;
&lt;p&gt;最近公司開始往大數據的開發方向靠攏，許許多多的程式開發都希望能夠擁有支持大數據處理的能力。&lt;/p&gt;
&lt;p&gt;因此在 local side 如果也能夠建立足夠的數據量，對於 local 的開發會更加單純方便。&lt;/p&gt;
&lt;p&gt;本文整理了幾個比較常見資料庫的產生 dummy data 的方式，除了作為紀錄，也希望能夠幫助到有需要的人。&lt;/p&gt;
&lt;p&gt;另外小小抱怨一下： &lt;em&gt;MySQL 產生 dummy data 的方式真的是有夠麻煩。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hbmR5eW91LmdpdGh1Yi5pby8yMDE0LzAxLzI5L21vbmdvZGItbm90ZXMv&#34;&gt;MongoDB 快速入門筆記&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODQ3OTQ1NTg0NjQ3I2Zyb21IaXN0b3J5&#34;&gt;MySQL 快速创建千万级测试数据&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQ4NDExNDIvaG93LWNhbi1pLWdlbmVyYXRlLWJpZy1kYXRhLXNhbXBsZS1mb3ItcG9zdGdyZXNxbC11c2luZy1nZW5lcmF0ZS1zZXJpZXMtYW5kLXJhbmQ=&#34;&gt;How can I generate big data sample for Postgresql using generate_series and random?&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Frontend/2021-02-09-front-end-emmet-%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E9%96%8B%E7%99%BC%E7%9A%84%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/</guid>
            <title>Front-end Emmet , 前端快速開發的神兵利器</title>
            <link>https://z20240.github.io/Tech/Frontend/2021-02-09-front-end-emmet-%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E9%96%8B%E7%99%BC%E7%9A%84%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Frontend" scheme="https://z20240.github.io/categories/Tech/Frontend/" />
            <category term="html" scheme="https://z20240.github.io/tags/html/" />
            <category term="frontend" scheme="https://z20240.github.io/tags/frontend/" />
            <category term="emmet" scheme="https://z20240.github.io/tags/emmet/" />
            <category term="vscode" scheme="https://z20240.github.io/tags/vscode/" />
            <pubDate>Tue, 09 Feb 2021 17:41:20 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;front-end-emmet-前端快速開發的神兵利器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#front-end-emmet-前端快速開發的神兵利器&#34;&gt;#&lt;/a&gt; [Front-end] Emmet , 前端快速開發的神兵利器&lt;/h3&gt;
&lt;h4 id=&#34;一個-snapchat-標準庫只需要少少的記憶就可以大大提升html-css-的撰寫效率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一個-snapchat-標準庫只需要少少的記憶就可以大大提升html-css-的撰寫效率&#34;&gt;#&lt;/a&gt; 一個 Snapchat 標準庫，只需要少少的記憶，就可以大大提升 HTML、CSS 的撰寫效率&lt;/h4&gt;
&lt;p&gt;VSCode 最近的更版對於 Emmet 的支持更加完整了，因此決定來寫一篇文章介紹 Emmet 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;0*4D_q0c3hxHQcjjYE.gif&#34; alt=&#34;[https://code.visualstudio.com/updates/v1_53](https://code.visualstudio.com/updates/v1_53)&#34; /&gt;&lt;/p&gt;
&lt;p&gt;身為 web engineer ，在寫 HTML 的時候總是要打那煩人的左右角括號，並且還要在每個標籤結尾寫上結尾標籤，著實麻煩。&lt;/p&gt;
&lt;p&gt;emmet 就是為了我們這種懶人發明的一鍵 HTML 產生器！&lt;/p&gt;
&lt;p&gt;我們只需要依照著 Emmet 的規則，編寫我們想要的 html 結構，之後按下 「Tab」，Emmet 就會自動幫我產生相對應的 HTML Code ！&lt;/p&gt;
&lt;p&gt;就像上面的那張 GIF 展示的那樣～&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.emmet.io/&#34;&gt;&lt;strong&gt;Emmet Documentation&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://docs.emmet.io/&#34;&gt;&lt;em&gt;Emmet is a web-developer&#39;s toolkit that can greatly improve your HTML &amp;amp; CSS workflow: Basically, most text editors out…&lt;/em&gt; docs.emmet.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Emmet 的語法很簡單也不多，且很多規則跟 CSS 的選擇器語法很相近。對於會寫 CSS 的人來說，幾乎是無痛學習。&lt;/p&gt;
&lt;p&gt;以下就來針對 Emmet 的語法介紹一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元素標籤 + Tab&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;emmet 的使用方法就是，打好一串表達語法之後，按下「Tab」，就會自動轉換成相對應的 HTML 了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*4l8SN32JJqXAjF-RKnexwg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 &amp;quot;!&amp;quot; 一鍵生成 HTML 結構&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;emmet 可以使用 &amp;quot;!&amp;quot; 一鍵生成 HTML Template，我們不用再自己從  &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;  開始一個字一個字敲打了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*bpP5Wasjp58bz3SeU2dT1g.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 &amp;gt; 表示結構的「下一層」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;像是 CSS 選擇器中，我們想要表達階層結構的時候，可以使用 &amp;gt; 來選取子元素。Emmet 也可以使用 「&amp;gt;」 來表示這種巢狀結構。&lt;/p&gt;
&lt;p&gt;例如：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;div&amp;gt;ul&amp;gt;li&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;會展開成這樣&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*IutHuFaDKyL83MZuxHwXNA.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 *N 代表要重複 N 次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，我們可以使用  &lt;code&gt;li*5&lt;/code&gt;  讓他自動重複 5 次，產生五個  &lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*UyCQppxtpLwqyTFLijikdA.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 + 表示結構的「同一層」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常一個標準的 html 頁面需要有 header, main, footer 。這時候就可以用 + 很簡單地產生。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;header+main+footer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;會展開成&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;footer&amp;gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*-JvloFLYjqUzfVfZjkCG5g.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;綜合練習&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我想要產生如下的結構，該怎麼寫呢？&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;main&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;article&amp;gt;&amp;lt;/article&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;寫法：  &lt;code&gt;header+main&amp;gt;article+section*6&lt;/code&gt; &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 ^ 跳回上一層&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我們可以使用 ^ 跳回到上一層，例如剛剛的例子，如果我們想要在  &lt;code&gt;main&lt;/code&gt;  後面繼續接著寫 HTML 結構，我們就可以使用 ^ 來回到與 main 同一層的地方繼續往下串接我們的語法。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;header+main&amp;gt;article+section*6^footer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;會展開成&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;main&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;article&amp;gt;&amp;lt;/article&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*rz00s3Dj25n2wbqTPovThQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;當然，如果我們想要往外多跳幾層，我們只需要多重複幾次 ^ 即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*sF0HVT8G5gfOwiCeToBNCg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 ( ) 將結構分塊，增加可讀性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由於 Emmet 的語法轉換器，是一次 parse 這一連串的字串，因此不允許語法中存在空格，但這也讓在撰寫這表達式的時候可讀性不佳。此時我們可以使用 ( ) 來為結構分塊。&lt;/p&gt;
&lt;p&gt;以上方的例子來說，我們就可以改寫成下方這樣&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;header+(main&amp;gt;nav&amp;gt;ul&amp;gt;li*4)+article+section*3+footer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*c2jZ3I4MSQQAv8S2lGwHqw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用。表示 class / # 表示 ID / [] 表示其他屬性 / {} 表示標籤之間的內容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Emmet 一樣支援標籤內的屬性描述。&lt;/p&gt;
&lt;p&gt;例如最常見的 &amp;lt;a&amp;gt; 標籤，我們就可以給他額外的屬性&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a.link#customLink[src=&amp;#x27;test.png&amp;#x27; alt=&amp;#x27;test&amp;#x27;]&amp;#123;This is a test link&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;會自動展成這樣&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;a href=&amp;quot;&amp;quot; class=&amp;quot;link&amp;quot; id=&amp;quot;customLink&amp;quot; src=&amp;quot;test.png&amp;quot; alt=&amp;quot;test&amp;quot;&amp;gt;This is a test link&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*xYvBbURns_-f3w08g1zVLg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 $ 可以自動記數&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有些時候，我們希望 class 的名稱能夠照著數字順序給，這個時候，可以使用 $ 讓他 auto incremental&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;li.class$*5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;會展開成&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class1&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class2&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class3&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class4&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class5&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;當然我們也可以多給幾個 $，來代表要「幾位數」&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*A_2TRu4IpBPa6kiqKd5gEA.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 @ 給予起始值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;剛剛的例子中，我們也可以不要從 1 開始，使用 @ 可以指定一個起始數字。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*zYGPsvtn0yFucRQvweP-Ug.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 - 來倒著數回去&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這基本上很少使用到，但是還是說一下。我們除了順著數，也可以倒著屬回去。&lt;/p&gt;
&lt;p&gt;一樣以剛剛的 li 為例，我們如果在 @ 後面多增加一個 「-」，就可以讓數字由大到小排列。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;li.class$@-10*30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;會展開成&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class39&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class38&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class37&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class36&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class35&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class34&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class33&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class32&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class31&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li class=&amp;quot;class30&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ZVzYUKvGMGxVSMVBeFAM3Q.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;當然，我們也可以一般地使用 (不設定起始數字)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*raTa4R7FKI8NlWqPNXw6Tg.gif&#34; alt=&#34;1*raTa4R7FKI8NlWqPNXw6Tg.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Emmet 的功能很強大，但是其實語法都是有邏輯可以依循的，學起來感覺並不會太困難。&lt;/p&gt;
&lt;p&gt;如果記不起來也沒關係，以下已經幫忙提供了一份小抄。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.emmet.io/cheat-sheet/&#34;&gt;&lt;strong&gt;Emmet Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h4&gt;
&lt;p&gt;Emmet 真的是懶人工程師的一大利器，我個人認為以這學習成本極低的情況，多了解一項也並非壞事。&lt;/p&gt;
&lt;p&gt;而且也僅需要敲打少少的文字，就能產生好整份 HTML 結構。真的是用過就回不去了！&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmVtbWV0LmlvL2NoZWF0LXNoZWV0Lw==&#34;&gt;https://docs.emmet.io/cheat-sheet/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2Z1YmxvZy5jb20vMjAxNy8wOC9lbW1ldC1zdWJsaW1lLXRleHQuaHRtbA==&#34;&gt;https://www.wfublog.com/2017/08/emmet-sublime-text.html&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wamNoZW5kZXIuYmxvZ3Nwb3QuY29tLzIwMTYvMDcvZW1tZXQuaHRtbA==&#34;&gt;https://pjchender.blogspot.com/2016/07/emmet.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Others/2021-02-09-windows-%E6%89%8B%E5%8B%95%E7%A7%BB%E9%99%A4-%E6%96%B0%E5%A2%9E-%E7%A7%BB%E9%99%A4%E7%A8%8B%E5%BC%8F-%E6%B8%85%E5%96%AE%E4%B8%AD%E7%84%A1%E6%B3%95%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%A8%8B%E5%BC%8F/</guid>
            <title>Windows 手動移除「新增/移除程式」清單中無法被移除的程式</title>
            <link>https://z20240.github.io/Tech/Others/2021-02-09-windows-%E6%89%8B%E5%8B%95%E7%A7%BB%E9%99%A4-%E6%96%B0%E5%A2%9E-%E7%A7%BB%E9%99%A4%E7%A8%8B%E5%BC%8F-%E6%B8%85%E5%96%AE%E4%B8%AD%E7%84%A1%E6%B3%95%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%A8%8B%E5%BC%8F/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Others" scheme="https://z20240.github.io/categories/Tech/Others/" />
            <category term="windows" scheme="https://z20240.github.io/tags/windows/" />
            <category term="regedit" scheme="https://z20240.github.io/tags/regedit/" />
            <pubDate>Tue, 09 Feb 2021 12:35:41 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;windows-手動移除新增移除程式清單中無法被移除的程式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows-手動移除新增移除程式清單中無法被移除的程式&#34;&gt;#&lt;/a&gt; [Windows] 手動移除「新增 / 移除程式」清單中無法被移除的程式&lt;/h3&gt;
&lt;h4 id=&#34;相比於-macos-跟-linuxwindows-好多東西都是藏在機碼裡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相比於-macos-跟-linuxwindows-好多東西都是藏在機碼裡&#34;&gt;#&lt;/a&gt; 相比於 MacOS 跟 Linux，Windows 好多東西都是藏在機碼裡&lt;/h4&gt;
&lt;p&gt;最近會碰到這個問題的原因在於我更新 Docker desktop for windows 時出現了一些意外，導致 docker desktop 無法成功更新，因此卡在一個「裝不完全的狀況」。&lt;/p&gt;
&lt;p&gt;新增移除程式要刪除的話會跳出「 &lt;em&gt;找不到 &amp;quot;C:\path\for\docker\install\location&amp;quot;&lt;/em&gt; 」之類的錯誤訊息。偏偏想要重新安裝，docker installer 又認為你已經安裝過了，會直接跳 Install finished.&lt;/p&gt;
&lt;p&gt;真的令人欲哭無淚～～～😂😂😂😂😂😂😂&lt;/p&gt;
&lt;p&gt;為了讓 docker installer 能夠重新啟動安裝程序，勢必要先刪除掉 「新增 / 移除程式」列表中的 Zombie Docker。於是我上網找了一些資訊後，終於讓我找到了手動解除安裝的方法了！&lt;/p&gt;
&lt;p&gt;以下開始操作流程。&lt;/p&gt;
&lt;p&gt;首先，點選 [開始]，再按一下 [執行]，在 [開啟] 方塊中輸入 regedit，然後按 ENTER。呼叫出 Windows 的 regedit。這是紀錄 windows 機碼的地方。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*KyjfFojRFu2tKRlqfPlrAA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下來從左側欄中逐項找出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*_SqNf0EQ2vCvFsO5eM2zvg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;這邊的每個亂碼資料夾，都對應著你所安裝的一個程式。&lt;/p&gt;
&lt;p&gt;接下來就是，一個一個確認，找出哪一個是你要刪除的程式了。&lt;/p&gt;
&lt;p&gt;我們可以通過 &lt;strong&gt;DisplayName&lt;/strong&gt; 查看這個資料夾代表的是哪個程式。&lt;/p&gt;
&lt;p&gt;例如，我有裝 AWS Command Line Interface ，所以在這邊就能看到我安裝的 AWS Command Line Interface。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*hjrrM9Q7CVlkMtWVlcTkfw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;找到要移除的機碼之後，對他「滑鼠按右鍵 -&amp;gt; 刪除」&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*kdfkj20bkBl5VtdXLnA3Zw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;之後再回到控制台中去檢查「新增 / 移除程式」列表，應該就會發現剛剛刪除的程式已經不在列表當中了！&lt;/p&gt;
&lt;p&gt;這個時候，再回來重新安裝 Docker ，終於可以正常安裝了！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;參考資料&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vemgtdHcvdG9waWMvJUU1JUE2JTgyJUU0JUJEJTk1JUU2JTg5JThCJUU1JThCJTk1JUU3JUE3JUJCJUU5JTk5JUE0JUU2JTk2JUIwJUU1JUEyJTlFLSVFNyVBNyVCQiVFOSU5OSVBNCVFNyVBOCU4QiVFNSVCQyU4RiVFNiVCOCU4NSVFNSU5NiVBRSVFNCVCOCVBRCVFNyU5QSU4NCVFNyVBOCU4QiVFNSVCQyU4Ri00OTQ5NDE1OS1kMjE1LTA3YjItZTRjNy0wNTA0NTdiMzgzNTI=&#34;&gt;如何手動移除新增 / 移除程式清單中的程式&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Frontend/2020-11-13-axios-%E5%A6%82%E4%BD%95-cancel-%E5%B7%B2%E7%B6%93%E7%99%BC%E5%87%BA%E7%9A%84-request/</guid>
            <title>Axios 如何 Cancel 已經發出的 Request?</title>
            <link>https://z20240.github.io/Tech/Frontend/2020-11-13-axios-%E5%A6%82%E4%BD%95-cancel-%E5%B7%B2%E7%B6%93%E7%99%BC%E5%87%BA%E7%9A%84-request/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Frontend" scheme="https://z20240.github.io/categories/Tech/Frontend/" />
            <category term="javascript" scheme="https://z20240.github.io/tags/javascript/" />
            <category term="axios" scheme="https://z20240.github.io/tags/axios/" />
            <pubDate>Fri, 13 Nov 2020 16:25:21 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;axios-如何-cancel-已經發出的-request&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#axios-如何-cancel-已經發出的-request&#34;&gt;#&lt;/a&gt; [Axios] 如何 Cancel 已經發出的 Request?&lt;/h3&gt;
&lt;p&gt;最近收到一個很有趣的需求：希望我們取消已經發出但是未獲得 Response 的 Request 。&lt;/p&gt;
&lt;p&gt;因此基於圓滿完成任務後，必須留下痕 (紀) 跡 (錄) 的精神，決定來寫一下這篇。&lt;/p&gt;
&lt;h4 id=&#34;canceltoken&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#canceltoken&#34;&gt;#&lt;/a&gt;  &lt;code&gt;CancelToken&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Axios 在 v0.15 版本之後就已經支援了基於  &lt;code&gt;cancelable promise proposal&lt;/code&gt;  的 Cancelable 功能，因此目前我們使用的 Axios 應該都擁有這項能力才是。&lt;/p&gt;
&lt;p&gt;查找 Axios 的 Document 後，了解其 cancel request 的思路其實也很單純。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 CancelToken.source ( ) 產生 cancel instance，其中包含一個 unique token。&lt;/li&gt;
&lt;li&gt;當 axios 要 send request 前，我們就在 option 中加上這個 token 作為 axios 的識別。&lt;/li&gt;
&lt;li&gt;當我們要 cancel 的時候，僅需要利用  &lt;code&gt;source.cancel()&lt;/code&gt;  即可達到目標。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;p.s. 一個 cancel token 可以 cancel 多個 request.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;以 github 上 axios 的範例來說，程式碼可以寫成這樣。&lt;br /&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 生成 CancelToken 的 instance 命名為 source.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CancelToken&lt;/span&gt; = axios.&lt;span class=&#34;property&#34;&gt;CancelToken&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; source = &lt;span class=&#34;title class_&#34;&gt;CancelToken&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;source&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axios.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/user/12345&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;cancelToken&lt;/span&gt;: source.&lt;span class=&#34;property&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 將 source 的 unique token 加入 request，作為 cancel 的識別&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;span class=&#34;title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;thrown&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 如果 request 被啟動 cancel ，則做一些 canceled 的處理。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (axios.&lt;span class=&#34;title function_&#34;&gt;isCancel&lt;/span&gt;(thrown)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Request canceled&amp;#x27;&lt;/span&gt;, thrown.&lt;span class=&#34;property&#34;&gt;message&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// handle error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// post 一樣可以進行 cancel ，只是 options 變成放在第三個位置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axios.&lt;span class=&#34;title function_&#34;&gt;post&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/user/12345&amp;#x27;&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;new name&amp;#x27;&lt;/span&gt; &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;cancelToken&lt;/span&gt;: source.&lt;span class=&#34;property&#34;&gt;token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// cancel the request (the message parameter is optional)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;source.&lt;span class=&#34;title function_&#34;&gt;cancel&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Operation canceled by the user.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;在-interceptors-中使用-canceltoken&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在-interceptors-中使用-canceltoken&#34;&gt;#&lt;/a&gt; 在  &lt;code&gt;interceptors&lt;/code&gt;  中使用 CancelToken&lt;/h4&gt;
&lt;p&gt;在實務上，我們通常會先使用 axios create 一個客製化的 instance，再用  &lt;code&gt;instance.interceptors.request / instance.interceptors.response&lt;/code&gt;  攔截 ajax 的  &lt;code&gt;request, response&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;這種情況下，我們該怎麼做才能將 cancelToken 加入至生成的 instance 呢？&lt;/p&gt;
&lt;p&gt;依照 Document 中的範例:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*mSPQ2f7osaeXy45N9jLFQw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我們可以 callback function 的方式將 cancel function  &lt;code&gt;reference&lt;/code&gt;  出來。&lt;/p&gt;
&lt;p&gt;所以我們就可以將原本的 instance 改成以下的寫法。&lt;br /&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; axios &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;axios&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CancelToken&lt;/span&gt; = axios.&lt;span class=&#34;property&#34;&gt;CancelToken&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; cancelFunc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;axios.&lt;span class=&#34;property&#34;&gt;interceptors&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;request&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;config&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cancelFunc) &lt;span class=&#34;title function_&#34;&gt;cancelFunc&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// cancel request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// generate the cancel token instance to the request.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// And reference the cancelFunc to the callback function `c`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  config.&lt;span class=&#34;property&#34;&gt;cancelToken&lt;/span&gt; =  &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CancelToken&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;executor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;c&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cancelFunc = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;reject&lt;/span&gt;(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;甚至再進階一點，我們創建一個 request pool 蒐集所有的 request ，使其每當有相同的 request 被重複發送，就 cancel 掉上一個未回來的 request。&lt;br /&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 引用 axios 的 cancelToken&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CancelToken&lt;/span&gt; = axios.&lt;span class=&#34;property&#34;&gt;CancelToken&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 建立一個 request pool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; requestPool = &lt;span class=&#34;comment&#34;&gt;/** &lt;span class=&#34;doctag&#34;&gt;@type&lt;/span&gt; &amp;#123;&lt;span class=&#34;type&#34;&gt; &amp;#123;[url: string]: import(&amp;#x27;axios&amp;#x27;).Canceler &lt;/span&gt;&amp;#125; &amp;#125; */&lt;/span&gt; (&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// create an axios instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; service = axios.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;baseURL&lt;/span&gt;: process.&lt;span class=&#34;property&#34;&gt;env&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;VUE_APP_BASE_API&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;// url = base url + request url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// withCredentials: true, // send cookies when cross-domain requests&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;timeout&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;300000&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// request timeout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// request interceptor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;service.&lt;span class=&#34;property&#34;&gt;interceptors&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;request&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;config&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// cancel 掉 request pool 中相同的 requst.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// hint. 若 pool 中的 request 上已經 response, cancel 的 call 不會生效。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (requestPool[config.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; cancel = requestPool[config.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; requestPool[config.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;cancel&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;status&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;cancel&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;message&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Cancel repeated request:&amp;#x27;&lt;/span&gt; + config.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt; &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 將新的 request 的 cancel 覆蓋掉舊的 cancel request.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    config.&lt;span class=&#34;property&#34;&gt;cancelToken&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CancelToken&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;executor&lt;/span&gt; (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      requestPool[config.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;] = c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// do something with request error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(error) &lt;span class=&#34;comment&#34;&gt;// for debug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;reject&lt;/span&gt;(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// response interceptor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;service.&lt;span class=&#34;property&#34;&gt;interceptors&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * If you want to get http information such as headers or status&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * Please return  response =&amp;gt; response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * Determine the request status by custom code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * Here is just an example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   * You can also judge the status by HTTP Status Code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;response&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; response.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;title class_&#34;&gt;IsJsonString&lt;/span&gt;(error.&lt;span class=&#34;property&#34;&gt;message&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;reject&lt;/span&gt;(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; errMsg = &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;parse&lt;/span&gt;(error.&lt;span class=&#34;property&#34;&gt;message&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (errMsg.&lt;span class=&#34;property&#34;&gt;status&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;cancel&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;warn&lt;/span&gt;(errMsg.&lt;span class=&#34;property&#34;&gt;message&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下來我們就可以來嘗試看看是否真的有生效 (cancel 掉前面的 request)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*tsSFPOgWSZcPh9XTEavQwA.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;至此，我們就完美達成了需求啦～！&lt;/p&gt;
&lt;p&gt;可喜可賀！ 可喜可賀！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Others/2020-11-04-%E5%91%8A%E5%88%A5-powershell-%E8%88%87-cmd-%E6%93%81%E6%8A%B1-windows-terminal-%E5%8C%85%E6%8B%AC%E8%87%AA%E8%A8%82%E6%A8%A3%E5%BC%8F/</guid>
            <title>告別 PowerShell 與 CMD，擁抱 Windows Terminal (包括自訂樣式)</title>
            <link>https://z20240.github.io/Tech/Others/2020-11-04-%E5%91%8A%E5%88%A5-powershell-%E8%88%87-cmd-%E6%93%81%E6%8A%B1-windows-terminal-%E5%8C%85%E6%8B%AC%E8%87%AA%E8%A8%82%E6%A8%A3%E5%BC%8F/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Others" scheme="https://z20240.github.io/categories/Tech/Others/" />
            <category term="windows-terminal" scheme="https://z20240.github.io/tags/windows-terminal/" />
            <category term="wsl" scheme="https://z20240.github.io/tags/wsl/" />
            <pubDate>Wed, 04 Nov 2020 11:58:12 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;告別-powershell-與-cmd擁抱-windows-terminal-包括自訂樣式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#告別-powershell-與-cmd擁抱-windows-terminal-包括自訂樣式&#34;&gt;#&lt;/a&gt; 告別 PowerShell 與 CMD，擁抱 Windows Terminal (包括自訂樣式)&lt;/h3&gt;
&lt;h4 id=&#34;睽違了如此多年windows-終於在-terminal-上注意到使用者了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#睽違了如此多年windows-終於在-terminal-上注意到使用者了&#34;&gt;#&lt;/a&gt; 睽違了如此多年，Windows 終於在 Terminal 上注意到使用者了&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在文章開始之前，我們先來看看 Windows Terminal 的工商廣告，傳傳教吧～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8gw0rXPMMPE&#34;&gt;&lt;img data-src=&#34;19cf_hqdefault.jpg&#34; alt=&#34;The new Windows Terminal&#34; title=&#34;The new Windows Terminal&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以往提到 Windows 的 Terminal ，大家的印象都是這樣&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ToHMLSXBYrKwNgDHjkFR4w.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;或是這樣&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*tnjjMpf606Nc3hFo5RauNA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;比起隔壁棚 (MaxOS) 有強大的 iTerm2 可以客製化自己的佈景主題、使用熱鍵、字體大小、文字主題… 等。Windows 的簡直  &lt;code&gt;like a sh_t&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;因此，在得知 windows 要推出新的 terminal 讓人著實非常期待。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows Terminal 是一種現代化、快速、高效、功能強大且具生產力的終端應用程式，適合命令列工具和 Shell (像是命令提示字元、PowerShell 和 WSL) 的使用者。主要功能包括多個索引標籤、窗格、Unicode 和 UTF-8 字元支援、GPU 加速的文字呈現引擎，以及自訂主題、樣式和設定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇將講述如何安裝 Windows Terminal 以及自訂 Windows Terminal 的樣式。&lt;/p&gt;
&lt;h4 id=&#34;安裝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安裝&#34;&gt;#&lt;/a&gt; 安裝&lt;/h4&gt;
&lt;p&gt;Windows 安裝東西都很簡單，打開 Microsoft store ，找尋 Windows Terminal ，安裝即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ccFZQhAqUQnN_VzNVZks5w.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*RBKVWvWz58gDliZ19_gDig.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;剛安裝完的時候會長成這樣原始的樣子。但是已經整合了 OS 中擁有的 Terminal。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*wglfuUP-kzJ0NAlIVFAVEw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;個人化佈景主題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#個人化佈景主題&#34;&gt;#&lt;/a&gt; 個人化佈景主題&lt;/h4&gt;
&lt;p&gt;先上結論，以下是我目前調整完後的樣式，個人非常地滿意。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*1xbwxWw8CwNf_RNo4VoUNA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;首先我們選取「設定」開啟位於  &lt;code&gt;C:\Users\your-user\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState&lt;/code&gt;  中的  &lt;code&gt;settings.json&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*koMTJ4hDD1T6GwwKdPXUHA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;找到  &lt;code&gt;profiles&lt;/code&gt;  區域，我們可以看到分為 default 與 list 兩處。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;default&lt;/strong&gt; 用來存放全域設定，如果你有一些設定想要 apply 到所有類型的 Terminal ，就將這些設定寫在 default。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*iy_uqJrXLlsLEao75Gpo1w.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;list&lt;/strong&gt; 的部分用來分別對特定 Terminal 的進行個人化設定&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*-nI7Q6hnOV6RKIag4XdUQw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;布景配色可以上這個網站找尋，裡面有大量的 Windows Terminal 色彩配置，可以任君挑選。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*iWY8_kxIAQCq-Sy2Yt4ovQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://windowsterminalthemes.dev/&#34;&gt;&lt;strong&gt;Windows Terminal Themes&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://windowsterminalthemes.dev/&#34;&gt;&lt;em&gt;Browse and copy hundreds of themes for Windows Terminal&lt;/em&gt; windowsterminalthemes.dev&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;選好喜歡的主題後點選  &lt;code&gt;Get theme&lt;/code&gt;  複製主題的 Json，貼在 profiles 中的  &lt;code&gt;schemas&lt;/code&gt;  處。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Q43c7Cex6esd_k47iqdMoQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然後在  &lt;code&gt;colorScheme&lt;/code&gt;  設定想要的主題名稱。&lt;/p&gt;
&lt;p&gt;你也可以使用  &lt;code&gt;backgroundImage&lt;/code&gt;  設定自己的背景照片與 Icon 圖片。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*A6Z2EayE-kPdzZM1naNsBw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;這邊講解一下我有使用到的參數所代表的意義。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;colorScheme: 佈景主題名稱&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;acrylicOpacity: 壓克力效果的透明度 (0~1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;backgroundImage: 背景圖片的路徑&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;backgroundImageOpacity: 背景圖片的透明度&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;useAcrylic: 是否開啟壓克力效果(true/false)這邊必須開啟才能使用&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;基本上這樣就設定完成了。&lt;br /&gt;
我們就可以來享受自己修改後的成果啦～！!&lt;/p&gt;
&lt;p&gt;您的鼓勵是我持續分享的動力。&lt;/p&gt;
&lt;p&gt;如果覺得這篇文章有幫助的話，請不吝給予一點鼓勵吧～&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Frontend/vue/2020-09-17-vue-vue3-%E5%8D%B3%E5%B0%87%E6%AD%A3%E5%BC%8F%E4%B8%8A%E7%B7%9A-%E5%AE%83%E8%A7%A3%E6%B1%BA%E4%BA%86vue2%E7%9A%84%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C-%E5%8F%88%E8%B7%9F-react-hooks-%E6%9C%89%E4%BB%80%E9%BA%BC%E9%97%9C%E4%BF%82/</guid>
            <title>Vue Vue3 即將正式上線，它解決了Vue2的什麼問題? 又跟 React-hooks 有什麼關係?</title>
            <link>https://z20240.github.io/Tech/Frontend/vue/2020-09-17-vue-vue3-%E5%8D%B3%E5%B0%87%E6%AD%A3%E5%BC%8F%E4%B8%8A%E7%B7%9A-%E5%AE%83%E8%A7%A3%E6%B1%BA%E4%BA%86vue2%E7%9A%84%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C-%E5%8F%88%E8%B7%9F-react-hooks-%E6%9C%89%E4%BB%80%E9%BA%BC%E9%97%9C%E4%BF%82/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Frontend" scheme="https://z20240.github.io/categories/Tech/Frontend/" />
            <category term="Vue" scheme="https://z20240.github.io/categories/Tech/Frontend/Vue/" />
            <category term="javascript" scheme="https://z20240.github.io/tags/javascript/" />
            <category term="vue" scheme="https://z20240.github.io/tags/vue/" />
            <pubDate>Thu, 17 Sep 2020 18:15:44 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;vue-vue3-即將正式上線它解決了vue2的什麼問題-又跟-react-hooks-有什麼關係&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue-vue3-即將正式上線它解決了vue2的什麼問題-又跟-react-hooks-有什麼關係&#34;&gt;#&lt;/a&gt; [Vue] Vue3 即將正式上線，它解決了 Vue2 的什麼問題？又跟 React-hooks 有什麼關係？&lt;/h3&gt;
&lt;h4 id=&#34;vue3-的來臨對於-vue-開發圈的影響之於-react-hooks-的降臨改變-react-開發圈一般重大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue3-的來臨對於-vue-開發圈的影響之於-react-hooks-的降臨改變-react-開發圈一般重大&#34;&gt;#&lt;/a&gt; Vue3 的來臨對於 Vue 開發圈的影響，之於 React-hooks 的降臨改變 React 開發圈一般重大&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;0*KwYbSLWGVrGrhh4D.jpg&#34; alt=&#34;鎮版圖 [http://hk.hdwall365.com/USA-canyon-river-hills-rocks-clouds-dawn_1920x1200_wallpaper.html](http://hk.hdwall365.com/USA-canyon-river-hills-rocks-clouds-dawn_1920x1200_wallpaper.html)&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vue framework 即將迎來 3.0 大改版。&lt;/p&gt;
&lt;p&gt;對比於 Vue 2 的版本，Vue 3 的的體積變得 &lt;strong&gt;更小&lt;/strong&gt; 、執行速度變得 &lt;strong&gt;更快&lt;/strong&gt; 、並且 &lt;strong&gt;加強了對 Typescript 的支持&lt;/strong&gt; 以及 &lt;strong&gt;開放了更多的底層功能&lt;/strong&gt; ，使得開發者可以直接調用。&lt;/p&gt;
&lt;h4 id=&#34;優勢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#優勢&#34;&gt;#&lt;/a&gt; 優勢&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更快&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;捨棄了 &lt;strong&gt;Object.defineProperty&lt;/strong&gt; 改為使用 ES6 的 Proxy 對基礎型別進行重新定義，大大提升了 Vue 的在 Javascript engine 的執行效率。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;為何會如此說呢？&lt;br /&gt;
因為 Object.defineProperty 是在 Runtime 時期對 Object 增減 property 的。對於任一個 Language engine，動態計算 property 所需的費用都是昂貴的。&lt;br /&gt;
Proxy 不同於 Object.defineProperty 在於，其並未對原始對象進行改動，而是直接「代理」此對象，執行增加 / 減少的功能。這在 Javascript Engine 轉譯 Javascript 上，相較於前者的執行費用便小得多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Virtual DOM 的重構。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;更多編譯時的優化。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;1*mRZLw9fTTe1HNiERY1ikBQ.png&#34; alt=&#34;scripting 時間減少超過一半 ( [https://www.youtube.com/watch?v=AnoZheeH0Nk](https://www.youtube.com/watch?v=AnoZheeH0Nk) )&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更好的 Typescript 支持 &amp;amp; 開放更多底層的 API。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們都知道，過去 Vue2 對於 Typescript 並不友善，主要原因是 Vue 依靠  &lt;code&gt;this&lt;/code&gt;  export 所有的 property，然而造成的了許多麻煩。&lt;/p&gt;
&lt;p&gt;其中一個明顯的問題是：”methods function 中的  &lt;code&gt;this&lt;/code&gt;  指向  &lt;code&gt;vue instance&lt;/code&gt;  而非 method ，造成 Typescript 類型推導上不小的成本。”&lt;/p&gt;
&lt;p&gt;因此我們會發現，在 Vue2 的 Typescript 專案中，人們還需要另外通過  &lt;code&gt;vue-class-component&lt;/code&gt;  這個 library 借助 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NhaWJhb2ppYW4uY29tL2VzNi9kZWNvcmF0b3IuaHRtbA==&#34;&gt;Decorator&lt;/span&gt; 來達到類型推導。&lt;/p&gt;
&lt;p&gt;在 Vue3 中，引進了 &lt;strong&gt;Composite-API&lt;/strong&gt; ，更好地支持了 Typescript 的類型推導，並且還解決了 Vue2 時許多為人詬病的開發上的「問題」。&lt;/p&gt;
&lt;p&gt;以下，我們就先來講講 Vue2 碰到了什麼樣的難題，Vue3 又是怎麼樣子解決了這些問題。&lt;/p&gt;
&lt;h4 id=&#34;vue2-面臨的問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue2-面臨的問題&#34;&gt;#&lt;/a&gt; Vue2 面臨的問題&lt;/h4&gt;
&lt;p&gt;我們時常聽到有人說&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 只適合拿來做小型的專案，並不適合大專案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;歸咎原因，主要有以下幾點：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Vue 並未對 Typescript 友善，不利於多人協作的大型專案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;專案開發大多仍為 Javascript。JS 鬆散靈活的語言特性使開發者在協同合作時信心不足，使得專案架構難以擴張規模。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Vue 的  &lt;code&gt;this&lt;/code&gt;  綁定整個 Vue instance ，與傳統 Javascript Language 對  &lt;code&gt;this&lt;/code&gt;  的詮釋並不一致。增加了程式開發人員對專案開發的心智成本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;眾所周知，在 Vue 中不論在哪個地方 (methods, computed, watch… etc) 當使用  &lt;code&gt;this&lt;/code&gt;  時，都是指 vue instance 本身。然而，在 Javascript 中，function 本身有自己的 scope ，  &lt;code&gt;this&lt;/code&gt;  應該指向 function 本身 (或是 function 所屬的 class scope)，這種與 JS 原生概念不相同的概念，提升了了使用者的心智成本。&lt;/p&gt;
&lt;p&gt;我們可以舉一個簡單的例子&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;請問在「右圖」中引入「左圖」的 columns.js&lt;br /&gt;
 其中的 左圖的 this 指向何處？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;1*2uwvet3crTe3EfpQcbd59w.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*j6tSqRKCyW7pUJDLr0N_jA.png&#34; alt=&#34;左圖：columns.js ；右圖：其他的 component 引用了 column.js&#34; /&gt;&lt;/p&gt;
&lt;p&gt;左圖：columns.js ；右圖：其他的 component 引用了 column.js&lt;/p&gt;
&lt;p&gt;&lt;em&gt;第一張圖中的  &lt;code&gt;this&lt;/code&gt;  會指向 vue instance，因此即使在 function 中並沒有定義  &lt;code&gt;$t&lt;/code&gt;  ，卻依然可以使用  &lt;code&gt;$t&lt;/code&gt;  的功能。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;這種利用 this 指向 vue instance 的作法雖然帶來了便利，但是在經驗不足的開法者面前，簡直就是一場災難。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 缺少簡潔且「低成本的機制」來提取、重用組件之間的邏輯。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue2 多採用  &lt;code&gt;mixin&lt;/code&gt;  的方式提取組件中的共用部分，然而  &lt;code&gt;mixin&lt;/code&gt;  本身隱式的依賴關係有礙於團隊的程式開發。&lt;/p&gt;
&lt;p&gt;試想，你可能寫了一個帶有某個狀態的組件，且你的同事製作了一個讀取此狀態的  &lt;code&gt;mixin&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;在某天你需要將組件的狀態重構到其他組件去，你們會記得應該要更新  &lt;code&gt;mixin&lt;/code&gt;  嗎？若此  &lt;code&gt;mixin&lt;/code&gt;  又被許多組件複用的話呢？&lt;/p&gt;
&lt;p&gt;另外  &lt;code&gt;mixin&lt;/code&gt;  也可能導致名稱的衝突。&lt;/p&gt;
&lt;p&gt;若是你的組件中使用的名稱剛好與第三方中的  &lt;code&gt;mixin&lt;/code&gt;  有衝突，你無法為其重新命名。相反的你只能尷尬地換一個名稱來避免衝突的發生。&lt;/p&gt;
&lt;p&gt;因此在 React 中，使用了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMuaHRtbA==&#34;&gt;HOC&lt;/span&gt; 與 Render Props 的方式取代了 mixin。&lt;/p&gt;
&lt;p&gt;然而由於 Vue2 的 Options 特性，HOC 難以在 Vue2 中被借鑑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Vue API 迫使使用者使用 Options 組織程式碼；但是許多時候，通過「邏輯」組織程式碼會更有助於程式的開發。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下方圖中相同顏色部分代表相關的程式碼，Vue2 的 Option 組織程式碼的方式使得開發人員時常需要在檔案的上下文之間滑動比對所需的邏輯。隨著程式碼的增加，開發與維護的成本就越來越高。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*_yg3tfiqEE_puHseOtpoFQ.png&#34; alt=&#34;[https://user-images.githubusercontent.com/499550/62783021-7ce24400-ba89-11e9-9dd3-36f4f6b1fae2.png](https://user-images.githubusercontent.com/499550/62783021-7ce24400-ba89-11e9-9dd3-36f4f6b1fae2.png)&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vNDk5NTUwLzYyNzgzMDIxLTdjZTI0NDAwLWJhODktMTFlOS05ZGQzLTM2ZjRmNmIxZmFlMi5wbmc=&#34;&gt;https://user-images.githubusercontent.com/499550/62783021-7ce24400-ba89-11e9-9dd3-36f4f6b1fae2.png&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;vue3-的解決辦法-composition-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue3-的解決辦法-composition-api&#34;&gt;#&lt;/a&gt; Vue3 的解決辦法 — Composition-API&lt;/h4&gt;
&lt;p&gt;為了解決以上的種種問題，Vue3 借鑒了 React-hook 的精神，推出了 Composition-API (或稱 functional API)。&lt;/p&gt;
&lt;p&gt;Composition-API 暴露了 Vue 更多更核心的 API 接口，讓使用者就像使用 react-hook 那樣，需要什麼 API ，再 import 就行。&lt;/p&gt;
&lt;p&gt;並且，所有的 code 都寫在 &lt;strong&gt;setup( )&lt;/strong&gt; 中 &lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下使用一個小例子呈現 Vue3 的 Composition-API 使用方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/s/objective-shannon-y79so?fontsize=14&#34;&gt;&lt;img data-src=&#34;https://codesandbox.io/api/v1/sandboxes/y79so/screenshot.png&#34; alt=&#34;objective-shannon-y79so&#34; title=&#34;objective-shannon-y79so&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Mojm8NIEzcE1BwYsezjIGg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*lLEoouSU5ds5XNwGFdImbw.png&#34; alt=&#34;左圖：使用 Options 方式組織程式邏輯；右圖：使用 Composition 方式組織邏輯&#34; /&gt;&lt;/p&gt;
&lt;p&gt;左圖：使用 Options 方式組織程式邏輯；右圖：使用 Composition 方式組織邏輯&lt;/p&gt;
&lt;p&gt;範例中，我們在 setup ( ) 中組織我們所有的邏輯，相比於將程式邏輯分散至 Options 的 properies 各處，我們可以更容易地閱讀程式、在程式的維護上也更加平易近人。&lt;/p&gt;
&lt;p&gt;以下是官方文檔中附上的 Vue2 與 Vue3 的程式邏輯分佈的比較。左邊是使用 Vue2 的 Options API 開發的程式邏輯分佈；右邊則是 Vue3 的 Composition API 的邏輯分佈。&lt;/p&gt;
&lt;p&gt;很明顯地我們可以看出，右邊的程式邏輯性比起左邊要更佳的緊密。&lt;/p&gt;
&lt;p&gt;可以預見的是，開發者在閱讀與理解程式碼的舒適程度也一定是右邊大於左邊。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*1sCGNlLdTajVSU-XISYWIg.png&#34; alt=&#34;[https://user-images.githubusercontent.com/499550/62783026-810e6180-ba89-11e9-8774-e7771c8095d6.png](https://user-images.githubusercontent.com/499550/62783026-810e6180-ba89-11e9-8774-e7771c8095d6.png)&#34; /&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vNDk5NTUwLzYyNzgzMDI2LTgxMGU2MTgwLWJhODktMTFlOS04Nzc0LWU3NzcxYzgwOTVkNi5wbmc=&#34;&gt;https://user-images.githubusercontent.com/499550/62783026-810e6180-ba89-11e9-8774-e7771c8095d6.png&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;compare-to-react-hooks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#compare-to-react-hooks&#34;&gt;#&lt;/a&gt; Compare to React-hooks&lt;/h4&gt;
&lt;p&gt;在 Vue3 發布後，網路上充斥著類似這樣的聲音&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「這根本就是抄 React-hooks 的啊！, 我幹嘛不直接用 React 就好了？」&lt;br /&gt;
「雜七雜八的 code 都丟在 setup 中，看起來結構比 Vue2 更糟啊！」&lt;br /&gt;
「拜託不要再更新了！老子已經學不動了～」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，如果你是從文章一開始就讀到現在，應該已經能理解 Vue3 的改進是 &lt;strong&gt;勢在必行&lt;/strong&gt; ，且 &lt;strong&gt;不得不為&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;事實上，Vue3 中 Options Syntax 並未消失，你依然可以使用以前習慣的寫法繼續開發，也不是一定要在專案中使用 Composition-API。&lt;/p&gt;
&lt;p&gt;另外，如果你有寫過 React-hooks，你可能真的跟我一樣會覺得寫起來跟 react hooks 很像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是 Vue3 的底層實作與 React Hooks 是大相逕庭的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同於 React-hooks 每一次的改動就需要 re-calculating 所有的 dependency value、 re-render 相對應的 components， &lt;strong&gt;Vue3 只在 created ( ) 之前執行一次&lt;/strong&gt; &lt;strong&gt;setup( )&lt;/strong&gt; function。&lt;/p&gt;
&lt;p&gt;並且因為建基於 Vue 的「響應式系統」，寫在 setup ( ) function 內的邏輯 Vue 依然能夠追蹤得到。&lt;/p&gt;
&lt;p&gt;Components 也僅需要 re-render 更新的部分，效能理論上會更勝 React-hooks。&lt;/p&gt;
&lt;p&gt;其次從設計哲學方面來看，在 React-hooks 中簡化了原始 React-Class Component 的 life cycle。&lt;/p&gt;
&lt;p&gt;對於從 React Class Component 入門的新手而言，無異於要學兩套 React 的 Render Logic。&lt;/p&gt;
&lt;p&gt;然而 Vue3 在 life cycle 並未作大幅度更動，僅以額外提供另一種使用 API 的方法為主，無論是 Vue 的新手或是老手使用體驗並不會差異過大。&lt;/p&gt;
&lt;p&gt;另外，關於「程式重用性」與「程式結構性」的疑問，事實上 Composition API 更能將程式寫得井然有序。&lt;/p&gt;
&lt;p&gt;因為基於 Composition-API ，我們可以更容易地將相同邏輯的程式碼抽離出 Components，僅在需要的時候在引入。&lt;/p&gt;
&lt;p&gt;舉一個追蹤游標位置的例子 (例子取自官網)&lt;/p&gt;
&lt;p&gt;Composition-API 只依賴其參數以及 Vue3 的 API，而不依賴  &lt;code&gt;this&lt;/code&gt;  。我們可以將組件內任何邏輯抽離出來進行複用，甚至導出整個  &lt;code&gt;setup&lt;/code&gt;  ，來達到 extends 的效果。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*QNzpeIqBZ2M-RMcpL-r4uw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以下是 Component 如何利用 function 的作法:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*3qr3bAwQYth1ArsXrmxZiw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果這段邏輯使用 Vue2 的 Options API 來撰寫，試想一下該怎麼簡潔地寫出這樣的 Code 呢？(可能也只有 mixin 了吧…)&lt;/p&gt;
&lt;h4 id=&#34;結論&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結論&#34;&gt;#&lt;/a&gt; 結論&lt;/h4&gt;
&lt;p&gt;Vue3 的改版無疑是在社群掀起了巨大的波瀾，當然評價也一定有褒有貶。&lt;/p&gt;
&lt;p&gt;在我看完 RC 的 API Document 以及 Vue 的改版動機後，我對於這樣的改動是樂觀其成的。&lt;/p&gt;
&lt;p&gt;事實上做為一個以 Vue 為主要前端開發項目的工程師而言，我也長期忍受著 Options API 種種在程式碼上「不便利」。&lt;/p&gt;
&lt;p&gt;每每閱讀一個 Components 都需要畫面上下滾動，跳來跳去觀看參絞在一起的程式邏輯，無疑是一種痛苦。&lt;/p&gt;
&lt;p&gt;我認為開發模式從 Class Components 轉變至 Functional Components 是一種演進上的必然。&lt;/p&gt;
&lt;p&gt;前端程式的開發邏輯比起後端的 OOP，更多時候是以「事件驅動」一連串資料流到畫面的響應處理。此時使用 Functional Programming 的開發思維會更加地直覺且友好。&lt;/p&gt;
&lt;p&gt;因此對於 Vue3 的改進，我個人是期待且樂觀其成的。&lt;/p&gt;
&lt;p&gt;另外，這篇文章的撰寫我參閱了非常多的資料，以下的參考資料我個人認為非常有意義，有興趣也可以當作延伸閱讀，好好瀏覽一番。&lt;/p&gt;
&lt;h3 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NhaWJhb2ppYW4uY29tL2VzNi8=&#34;&gt;ES6 文檔&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWcudzNjdGVjaC5jb20vVnVlQ29uZjIwMTlTSF9FdmFuLnBkZg==&#34;&gt;2019 Vue Conf 尤大 Power Point&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9ldmFueW91L3Bvc3Rz&#34;&gt;尤雨溪 Blog&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTMyMTA5NjY0MjY0&#34;&gt;Vue3 究竟好在哪里？（和 React Hook 的详细对比）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdXJvLnR3L3Bvc3RzLzIwMTkvMDgvMDYvJUU1JTg4JTlEJUU2JThFJUEyLVZ1ZS0zLTAtRnVuY3Rpb24tYmFzZWQtQVBJLw==&#34;&gt;初探 - Vue-3–0-Function-based-API&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92dWUtY29tcG9zaXRpb24tYXBpLXJmYy5uZXRsaWZ5LmFwcC96aC8=&#34;&gt;Vue 組合式 API 蓋覽&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92dWUtY29tcG9zaXRpb24tYXBpLXJmYy5uZXRsaWZ5LmFwcC96aC9hcGkuaHRtbCNzZXR1cA==&#34;&gt;Vue 組合式 API 手冊&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JmY3MvcHVsbC80MiNjb21wYXJpc29uLXdpdGgtcmVhY3QtaG9va3M=&#34;&gt;vue/rfcs: Function-based Component API&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzY3NTg4NDc5&#34;&gt;为何在 React 中推荐使用 HOC，而不是 mixins 来实现组件复用。但在 Vue 中，很少有 HOC 的尝试？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saXpoaXlhby5naXRodWIuaW8vMjAxOC8wMS8wNS9mMmUvbWl4aW5zLWNvbnNpZGVyZWQtaGFybWZ1bC8=&#34;&gt;Mixins 被认为是有害的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTkzMDQ0NTEyNzgy&#34;&gt;從 React State Hooks 的閉包陷阱切入，淺談 hooks&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzNzk5MDk4NzAzODgw&#34;&gt;React State Hooks 的閉包陷阱，在使用 Hooks 前必須掌握&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Frontend/2020-08-25-javascript-es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E4%B8%B2-template-string-%E7%9F%A5%E5%A4%9A%E5%B0%91/</guid>
            <title>Javascript ES6 模板字串 (Template String)知多少</title>
            <link>https://z20240.github.io/Tech/Frontend/2020-08-25-javascript-es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E4%B8%B2-template-string-%E7%9F%A5%E5%A4%9A%E5%B0%91/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Frontend" scheme="https://z20240.github.io/categories/Tech/Frontend/" />
            <category term="javascript" scheme="https://z20240.github.io/tags/javascript/" />
            <category term="es6" scheme="https://z20240.github.io/tags/es6/" />
            <category term="template-literals" scheme="https://z20240.github.io/tags/template-literals/" />
            <category term="template-strings" scheme="https://z20240.github.io/tags/template-strings/" />
            <pubDate>Tue, 25 Aug 2020 16:17:31 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;javascript-es6-模板字串-template-string知多少&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javascript-es6-模板字串-template-string知多少&#34;&gt;#&lt;/a&gt; [Javascript] ES6 模板字串 (Template String) 知多少&lt;/h3&gt;
&lt;h4 id=&#34;小小的兩個-學問可真不少&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小小的兩個-學問可真不少&#34;&gt;#&lt;/a&gt; 小小的兩個 ` ` 學問可真不少&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;1*MRkZgd6EA6KjPDyJ9BbhcA.png&#34; alt=&#34;動態板模字串&#34; /&gt;&lt;/p&gt;
&lt;p&gt;動態板模字串&lt;/p&gt;
&lt;p&gt;Javasciript 在 ES6 後迎來了一大變革，不僅增加了許許多多的語法特性，在「字串」的撰寫上也增加了更多實用、方便的撰寫方法。&lt;/p&gt;
&lt;p&gt;今天要來介紹的就是一個看似簡單，但卻功能強大的語法特性 — 模板字串 (Template String) 。&lt;/p&gt;
&lt;h4 id=&#34;模板字串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模板字串&#34;&gt;#&lt;/a&gt; 模板字串&lt;/h4&gt;
&lt;p&gt;有別於以前使用單引號  &lt;code&gt;‘’&lt;/code&gt;  或是雙引號  &lt;code&gt;“”&lt;/code&gt;  將 &lt;strong&gt;文字 / 符號 / 數字&lt;/strong&gt; 包住，所謂的模板字串就是使用 ```` 框住的一串 &lt;strong&gt;文字 / 符號 / 數字&lt;/strong&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;字串拚接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字串拚接&#34;&gt;#&lt;/a&gt; 字串拚接&lt;/h4&gt;
&lt;p&gt;傳統的字串拼接寫法，我們習慣使用  &lt;code&gt;+&lt;/code&gt;  將多個字串、變數串接起來，以下為例：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var str = &amp;#x27;example line: &amp;#x27; + line1 + &amp;#x27;\n&amp;#x27; + &amp;#x27;column: &amp;#x27; + column;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;模板字串的寫法，我們可以使用  &lt;code&gt;$&amp;#123;變數名稱&amp;#125;&lt;/code&gt;  直接將變數安插在整個字串的自訂位置。並且，模板字串支援換行符號，我們不再需要使用  &lt;code&gt;\n&lt;/code&gt;  表示換行。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var str = `example line: $&amp;#123;line1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;column: $&amp;#123;column&amp;#125;`;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上這兩種的差異顯而易見。模板字串解決了傳統字串拼接的一大痛點 — 使用  &lt;code&gt;+&lt;/code&gt;  進行拼接導致字串內容被拆分得過於零散，閱讀與維護得成本都相對較高。&lt;/p&gt;
&lt;p&gt;模板字串允許變數直接插入字串之中，盡量保持字串預期呈現的格式，使得讀者在見到字串時便可一目了然，減少了閱讀時人腦轉換字串結果的「成本」。&lt;/p&gt;
&lt;p&gt;以上，是模板字串最常使用的用法。大約涵蓋了 80% 以上的使用情境。&lt;/p&gt;
&lt;p&gt;大部分人一般時間應該也就是使用到這樣的功能足矣。&lt;/p&gt;
&lt;p&gt;然而，你知道板模字串的功能遠遠比上述更加強大嗎？&lt;/p&gt;
&lt;p&gt;接下來要介紹的，就是板模字串更加強大的使用方法 — &lt;strong&gt;板模標籤&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;tagged-template-literals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tagged-template-literals&#34;&gt;#&lt;/a&gt; Tagged Template Literals&lt;/h4&gt;
&lt;p&gt;不知道各位有沒有使用過諸如 Styled Component、Apollo Graphql… 這幾類工具？&lt;/p&gt;
&lt;p&gt;在 Styled Component 中，提供如下的寫法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*iqoi254cRLpkUgFUC3IkWg.png&#34; alt=&#34;https://styled-components.com/&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdHlsZWQtY29tcG9uZW50cy5jb20v&#34;&gt;https://styled-components.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Vluuu2ZEkswFpbzZ5ULvug.png&#34; alt=&#34;https://www.apollographql.com/docs/tutorial/schema/&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy90dXRvcmlhbC9zY2hlbWEv&#34;&gt;https://www.apollographql.com/docs/tutorial/schema/&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直接在模板字串之前使用函數，並且不需使用「括號 ( )」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;這是如何做到的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這就是今天重點要說明的主題。&lt;/p&gt;
&lt;p&gt;我們引用 MDN 上對於 Tagged Template Literals 的解釋。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;標籤樣板字面值是一種更高級的樣板字面值形式，允許你透過 &lt;strong&gt;標籤函數&lt;/strong&gt; 操作樣板字面值的輸出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;標籤函數的 &lt;strong&gt;第一個參數是一「字串陣列」&lt;/strong&gt; ， &lt;strong&gt;其餘參數則是「處理過的表達式」&lt;/strong&gt; 。最終，你可以返回一個經處理後的字串，甚至是完全不一樣的東西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;標籤函數的名稱可以是任何你想要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;什麼意思？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;意思是，我們只要定義一個 function 符合第一個參數為 string array, 第二個參數為 rest argument，即可作為標籤函數。&lt;/p&gt;
&lt;p&gt;我們使用以下幾個實驗來使我們了解這段話的意思。&lt;/p&gt;
&lt;p&gt;定義一個 function 我們取名為 &lt;strong&gt;print&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*iNGXaKSPfLZQ5pKaie44XQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用一個 &lt;strong&gt;純字串&lt;/strong&gt; 看看&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*VHuOhbHJGcfzk-MU2EWN8Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第一個參數將傳入的 string 變成了一個 array，而後面的 rest 沒有得到任何東西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;帶有變數的 Template String&lt;/strong&gt; 看看&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;1*-mORctsYOsPTVCBunpYYrg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;這次，我們看到第一個參數接收的 array 為依照  &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  的位置間格而成的字串；而第二個參數則是將  &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  內的變數收集起來。&lt;/p&gt;
&lt;p&gt;如此我們就知道，這個 function 的運作原理如下圖所示，清楚明瞭了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;0*aUXamM8t0mHhFD-K.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此，我們其實可以利用這特性，來做更加多樣的字串處理。&lt;/p&gt;
&lt;p&gt;例如，我們便可以利用此特性，設計一個依照接收參數動態調整的字串板模&lt;br /&gt;
 &lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dynamicTamplateString&lt;/span&gt; = props =&amp;gt; &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;str_ary, ...rest_ary&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    str_ary.&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;whole_str, cur_str, indx&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;whole_str&amp;#125;&lt;/span&gt;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;rest_ary[indx - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;](props)&amp;#125;&lt;/span&gt;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;cur_str&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如此，我們便可以使用這個 helping function 寫一個自定義的模板。&lt;br /&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;myTemplate&lt;/span&gt; = props =&amp;gt; &lt;span class=&#34;title function_&#34;&gt;dynamicTamplateString&lt;/span&gt;(props)&lt;span class=&#34;string&#34;&gt;`I am a &lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;    (props) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (props.sex === &lt;span class=&#34;string&#34;&gt;&amp;#x27;M&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; props.age &amp;gt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;man&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (props.sex === &lt;span class=&#34;string&#34;&gt;&amp;#x27;M&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; props.age &amp;lt;= &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;boy&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (props.sex === &lt;span class=&#34;string&#34;&gt;&amp;#x27;W&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; props.age &amp;gt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;woman&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (props.sex === &lt;span class=&#34;string&#34;&gt;&amp;#x27;W&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; props.age &amp;lt;= &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;girl&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Geek&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&lt;/span&gt;, I&amp;#x27;m &lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;    props =&amp;gt; props.age&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&lt;/span&gt; years old, and I&amp;#x27;m &lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;    props =&amp;gt; props.tall &amp;gt; &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;#x27;very tall&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;#x27;not quite tall&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如下表示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*m4lVm2fHNJtnF0oblHxzEQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*VNU7p6sERC8as6j8ti2-LQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;結語&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結語&#34;&gt;#&lt;/a&gt; 結語&lt;/h4&gt;
&lt;p&gt;模板字串語法的使用情境很廣。了解這些特性，在未來程式開發中必定會大大提高效率。&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZm9vaXNoLmNvbS9qYXZhc2NyaXB0L0VTNi90ZW1wbGF0ZS1saXRlcmFscy5odG1s&#34;&gt;JavaScript ES6 Template Literals 字串樣版&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHM=&#34;&gt;MDN&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9teHN0YnIuYmxvZy8yMDE2LzExL3N0eWxlZC1jb21wb25lbnRzLW1hZ2ljLWV4cGxhaW5lZC8=&#34;&gt;The magic behind 💅 styled-components&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Linux/2020-07-27-debian-add-apt-repository-command-not-found-%E5%95%8F%E9%A1%8C/</guid>
            <title>Debian add-apt-repository command not found 問題</title>
            <link>https://z20240.github.io/Tech/Linux/2020-07-27-debian-add-apt-repository-command-not-found-%E5%95%8F%E9%A1%8C/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Linux" scheme="https://z20240.github.io/categories/Tech/Linux/" />
            <category term="linux" scheme="https://z20240.github.io/tags/linux/" />
            <category term="debian" scheme="https://z20240.github.io/tags/debian/" />
            <category term="apt" scheme="https://z20240.github.io/tags/apt/" />
            <pubDate>Mon, 27 Jul 2020 23:38:02 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;debian-add-apt-repository-command-not-found-問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#debian-add-apt-repository-command-not-found-問題&#34;&gt;#&lt;/a&gt; [Debian] add-apt-repository command not found 問題&lt;/h3&gt;
&lt;p&gt;add-apt-repository 是用來更新 apt-get 套件來源的指令。&lt;/p&gt;
&lt;p&gt;在比較新的 Ubuntu 或是 Debian 版本，這可能不是在初始預設便有的指令集中。&lt;/p&gt;
&lt;p&gt;我們可以使用以下指令來安裝這個指令套件。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ sudo apt-get install software-properties-common&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eading package lists... Done&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Building dependency tree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Reading state information... Done&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The following additional packages will be installed:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gir1.2-glib-2.0 gir1.2-packagekitglib-1.0 iso-codes libappstream4 libcurl3-gnutls libgirepository-1.0-1 libglib2.0-bin libglib2.0-data libgstreamer1.0-0 libpackagekit-glib2-18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;libpolkit-agent-1-0 libpolkit-backend-1-0 libpolkit-gobject-1-0 libstemmer0d libyaml-0-2 packagekit packagekit-tools policykit-1 python3-gi python3-pycurl python3-software-properties&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Suggested packages:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;isoquery gstreamer1.0-tools appstream libcurl4-gnutls-dev python-pycurl-doc python3-pycurl-dbg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The following NEW packages will be installed:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gir1.2-glib-2.0 gir1.2-packagekitglib-1.0 iso-codes libappstream4 libcurl3-gnutls libgirepository-1.0-1 libglib2.0-bin libglib2.0-data libgstreamer1.0-0 libpackagekit-glib2-18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;libpolkit-agent-1-0 libpolkit-backend-1-0 libpolkit-gobject-1-0 libstemmer0d libyaml-0-2 packagekit packagekit-tools policykit-1 python3-gi python3-pycurl python3-software-properties&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;software-properties-common&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 upgraded, 22 newly installed, 0 to remove and 5 not upgraded.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Need to get 8194 kB of archives.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如此就可以解決此問題了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Linux/2020-07-27-gcp-%E9%81%87%E5%88%B0permission-denied-publickey-%E6%80%8E%E9%BA%BC%E8%BE%A6/</guid>
            <title>GCP遇到permission denied (publickey)怎麼辦？</title>
            <link>https://z20240.github.io/Tech/Linux/2020-07-27-gcp-%E9%81%87%E5%88%B0permission-denied-publickey-%E6%80%8E%E9%BA%BC%E8%BE%A6/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Linux" scheme="https://z20240.github.io/categories/Tech/Linux/" />
            <category term="google-cloud-platform" scheme="https://z20240.github.io/tags/google-cloud-platform/" />
            <pubDate>Mon, 27 Jul 2020 23:36:19 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;gcp遇到permission-denied-publickey怎麼辦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gcp遇到permission-denied-publickey怎麼辦&#34;&gt;#&lt;/a&gt; [GCP] 遇到 permission denied (publickey) 怎麼辦？&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;1*5SlkKa9VGVM9bmANkqrHYg.png&#34; alt=&#34;https://www.paulgifford.co/googlecloudplatform&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucGF1bGdpZmZvcmQuY28vZ29vZ2xlY2xvdWRwbGF0Zm9ybQ==&#34;&gt;https://www.paulgifford.co/googlecloudplatform&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最近因為專案需求，在 GCP 上建立了一個 VM instance。&lt;/p&gt;
&lt;p&gt;眾所周知，要連進 GCP 的 VM instance 通常都是使用 ssh 搭配 id_rsa key &lt;em&gt;(不知道何謂 id_rsa 若如何使用 id_rsa 進行 ssh 可以 google 一下，這邊暫不贅述)&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;但是某日在需要 ssh 時，卻跳出了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;permission denied (publickey)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;心中只有一個字：「e04 咧！! ! 」「到底發生什麼事情了…」&lt;/p&gt;
&lt;p&gt;從這短短的訊息中透露出幾條線索&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;權限不足&lt;/li&gt;
&lt;li&gt;為什麼權限不足？ 因為 public key 不對。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是為什麼 public key 會不對？通常 key 這種東西，設過一次之後就不會再變更的，基本上不可能會出錯。&lt;/p&gt;
&lt;p&gt;所以可能的原因只有幾點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;對應此 public key 的 private key 遺失或是失效了。&lt;/li&gt;
&lt;li&gt;GCP 上搞錯使用者了 (這機率實在很低)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我重新開始釐清。&lt;/p&gt;
&lt;p&gt;第一點：檢查 id_rsa 是否存在且內容看起來是否正常。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ls ~/.ssh/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;id_rsa id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ cat ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-----BEGIN RSA PRIVATE KEY-----&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看起來 private key 格式也沒有怪異。&lt;/p&gt;
&lt;p&gt;我決定嘗試將 key 換掉，重創一個使用者。( &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL0B6MjAyNDAvZ2NwLSVFNSVBNiU4MiVFNCVCRCU5NSVFNCVCRCVCRiVFNyU5NCVBOC1zc2gtJUU4JUFFJTkzJUU0JUJEJUJGJUU3JTk0JUE4JUU4JTgwJTg1JUU3JTk5JUJCJUU1JTg1JUE1LXZtLWluc3RhbmNlLTRmM2ZjYmY3NDk4Yj9zb3VyY2U9ZnJpZW5kc19saW5rJmFtcDtzaz0wMDA0MTZiODEyN2RjYzE2ZWJmMGFiMGNkZjYyNzUxMQ==&#34;&gt;創建使用者方法可以查看這篇&lt;/span&gt; )&lt;/p&gt;
&lt;p&gt;因此進入 GCP 的操作平台，重新刪除 public key，並且創建新的 key。&lt;/p&gt;
&lt;p&gt;結果依然是 &lt;strong&gt;&lt;em&gt;permission denied (publickey) …。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此時我已經開始懷疑是 GCP 上同使用者名稱，搞錯 ssh key 的問題了。&lt;/p&gt;
&lt;p&gt;因此我使用了 GCP online terminal 進去 GCP ，並且查看 /home 下面目前的使用者有哪些&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ls /home/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;沒有 les 這個使用者…&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;cat /etc/passwd&lt;/code&gt;  查看所有用戶群組&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ cat /etc/passwd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root:x:0:0:root:/root:/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;z20240z:x:1003:1004::/home/z20240z:/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;les.lee:x:1004:1005::/home/les.lee:/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;les:x:1005:1006::/home/les:/bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抓到問題了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;VM Instance 中有 les 這名用戶，但是卻沒有對應的 /home 使用者。難怪怎麼改 key 都沒有效果。&lt;/p&gt;
&lt;p&gt;知道原因後，簡單地使用  &lt;code&gt;userdel -r &amp;lt;使用者名稱&amp;gt;&lt;/code&gt;  將使用者刪除，重新再 GCP 中建立一次帳號。&lt;/p&gt;
&lt;p&gt;這次終於可以 ssh 登入了。&lt;/p&gt;
&lt;p&gt;終於解決了 「permission denied (publickey)」 的問題了！&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MzUwOTA3L2FydGljbGUvZGV0YWlscy83ODg3ODc0Nw==&#34;&gt;Linux 如何查看所有的用户和组信息&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Linux/2020-07-27-gcp-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ssh-%E8%AE%93%E4%BD%BF%E7%94%A8%E8%80%85%E7%99%BB%E5%85%A5-vm-instance/</guid>
            <title>GCP如何使用 SSH 讓使用者登入 VM Instance</title>
            <link>https://z20240.github.io/Tech/Linux/2020-07-27-gcp-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ssh-%E8%AE%93%E4%BD%BF%E7%94%A8%E8%80%85%E7%99%BB%E5%85%A5-vm-instance/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Linux" scheme="https://z20240.github.io/categories/Tech/Linux/" />
            <category term="google-cloud-platform" scheme="https://z20240.github.io/tags/google-cloud-platform/" />
            <category term="ssh" scheme="https://z20240.github.io/tags/ssh/" />
            <pubDate>Mon, 27 Jul 2020 15:27:33 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;gcp如何使用-ssh-讓使用者登入-vm-instance&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gcp如何使用-ssh-讓使用者登入-vm-instance&#34;&gt;#&lt;/a&gt; [GCP] 如何使用 SSH 讓使用者登入 VM Instance&lt;/h3&gt;
&lt;p&gt;GCP (google cloud platform) 是一個 google 提供的雲端運算服務平台。&lt;/p&gt;
&lt;p&gt;其中擁有許許多多的雲端服務，諸如 database, cloud computing…, 甚至是大數據的分析工具… 等等，應有盡有。&lt;/p&gt;
&lt;p&gt;我們也可以在 GCP 中租一個虛擬雲端空間，搭建個人的雲端作業系統，也就是本文說的 &lt;strong&gt;VM Instance&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;本文假設讀者已經透過各種方法擁有了自己的 VM instance，卻苦無不知如何使用 ssh 登入 gcp 的 VM instance，因此前來尋求解答。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下正文開始&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 gcp 的 ssh 中，我們需要使用 ssh key 作為登入密鑰。因此我們需要先生出自己的 ssh key。&lt;/p&gt;
&lt;p&gt;我們可以使用  &lt;code&gt;ssh-keygen&lt;/code&gt;  一行指令生成&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ssh-keygen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如此，我們便在 ./ssh 中擁有了自己的 ssh key。其中 rsa_id.pub 是公鑰，待會要放上 GCP ；rsa_id 是私鑰，要自己保存好。&lt;/p&gt;
&lt;p&gt;接下來，前往自己的 VM Instance，在邊側欄找到  &lt;code&gt;Compute Engine &amp;gt; 中繼資料&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Vja4LMw8UAO9vCauM5Gd1g.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;點選 「安全殼層金鑰」 (SSH 金鑰)，並且選取「編輯」。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*reygeRRdhsoPxjPNtMNrsw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;點選「新增項目」，後將剛剛的 rsa_id.pub 的內容貼上，之後儲存。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Inm9BZzGX2_CRDgxkl3tTg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;它就會對應公鑰的最後一小段的使用者名稱在 VM Instance 自動創建對應的使用者。&lt;/p&gt;
&lt;p&gt;接下來就可以嘗試使用 SSH 連線進 GCP 了！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*WRUx_I2CVf6bp0HCkIKI4A.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/Data%20Storage/2020-07-27-mongodb-%E5%A6%82%E4%BD%95-auto-increment-%E5%9C%B0%E6%8F%92%E5%85%A5%E8%B3%87%E6%96%99/</guid>
            <title>MongoDB 如何 Auto increment 地插入資料</title>
            <link>https://z20240.github.io/Tech/Data%20Storage/2020-07-27-mongodb-%E5%A6%82%E4%BD%95-auto-increment-%E5%9C%B0%E6%8F%92%E5%85%A5%E8%B3%87%E6%96%99/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="Data Storage" scheme="https://z20240.github.io/categories/Tech/Data-Storage/" />
            <category term="nodejs" scheme="https://z20240.github.io/tags/nodejs/" />
            <category term="mongo" scheme="https://z20240.github.io/tags/mongo/" />
            <pubDate>Mon, 27 Jul 2020 14:41:45 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;mongodb-如何-auto-increment-地插入資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mongodb-如何-auto-increment-地插入資料&#34;&gt;#&lt;/a&gt; [MongoDB] 如何 Auto increment 地插入資料&lt;/h3&gt;
&lt;p&gt;眾所周知，在 mongodb 中對於 ID 的保存方式，並不像 SQL 那樣可以設定 auto increment 有序地設置流水號作為 unique key。取而代之的是，每一筆資料都會有獨自的  &lt;code&gt;_id&lt;/code&gt;  以確保每筆資料的唯一性。&lt;/p&gt;
&lt;p&gt;而在 mongodb 中，我們無法「直接地」設定 collection 中的 entry 的某個 attribute 具有 auto increment 的特性。&lt;/p&gt;
&lt;p&gt;但是在許多場合我們卻依然會有這樣的需求，該怎麼辦呢？&lt;/p&gt;
&lt;p&gt;我們需要自己在程式中手動實作這樣的功能。&lt;/p&gt;
&lt;p&gt;雖說是自己實作，但其實也沒有很複雜。&lt;/p&gt;
&lt;p&gt;主要思路如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;設計一個 &lt;strong&gt;autoIncrease&lt;/strong&gt; collection 專門 maintain 需要 auto increment 的 collection 其當前的 auto increment number。未來當某 collection 需要 auto increment 時，就來 &lt;strong&gt;autoIncrease&lt;/strong&gt; collection 拿取 lastest Id.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以 NodeJs 為例&lt;/p&gt;
&lt;p&gt;實作一個 function ，專門獲取 lastest Id，並在每次獲取的同時更新 lastest Id.&lt;br /&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_auto_increment_id&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;table_name&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 寫死 autoIncrease 為紀錄各個 document 的 auto increment 的 document.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; auto_increment_record_table = &lt;span class=&#34;string&#34;&gt;&amp;#x27;autoIncrease&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 連接 mongodb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; db = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CreateDB&lt;/span&gt;(process.&lt;span class=&#34;property&#34;&gt;env&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;MONGO_DB&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 獲取此 collection&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; db_collection = db.&lt;span class=&#34;title function_&#34;&gt;collection&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;autoIncrease&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; dbFindOneAndUpdateAsync = &lt;span class=&#34;title function_&#34;&gt;promisify&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        db_collection.&lt;span class=&#34;property&#34;&gt;findOneAndUpdate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ).&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(db_collection);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 先 update 此 table_name 的 last number + 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; result = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dbFindOneAndUpdateAsync&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;attr&#34;&gt;_id&lt;/span&gt;: tableName &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;attr&#34;&gt;$inc&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;seqValue&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123; &lt;span class=&#34;attr&#34;&gt;upsert&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;returnNewDocument&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; seqDoc = result.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 再回傳最新的 last number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; seqDoc ? seqDoc.&lt;span class=&#34;property&#34;&gt;seqValue&lt;/span&gt; : &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;未來我們便可以使用這個 function 取得 collection 中最新的 id。如此就可以用程式達到手動 auto increment 的功效了。&lt;/p&gt;
&lt;p&gt;以下是我在自己專案中使用的 handle function，當我插入一筆 Question 資料到 mongodb 前，我便讓 table 的 id+1，作為此筆資料的 id。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*K6syln_71vBX22lssiVQdQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如此便完成 mongodb 的 auto increment 了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://z20240.github.io/Tech/git/2020-04-07-git-%E7%94%A8-rebase-%E5%90%88%E4%BD%B5%E5%88%86%E6%94%AF-%E8%AE%93%E4%BD%A0%E7%9A%84-git-history-%E6%9B%B4%E4%B9%BE%E6%B7%A8/</guid>
            <title>GIT 用 rebase 合併分支，讓你的 Git history 更乾淨</title>
            <link>https://z20240.github.io/Tech/git/2020-04-07-git-%E7%94%A8-rebase-%E5%90%88%E4%BD%B5%E5%88%86%E6%94%AF-%E8%AE%93%E4%BD%A0%E7%9A%84-git-history-%E6%9B%B4%E4%B9%BE%E6%B7%A8/</link>
            <category term="Tech" scheme="https://z20240.github.io/categories/Tech/" />
            <category term="git" scheme="https://z20240.github.io/categories/Tech/git/" />
            <category term="git" scheme="https://z20240.github.io/tags/git/" />
            <pubDate>Wed, 08 Apr 2020 01:31:57 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;git-用-rebase-合併分支讓你的-git-history-更乾淨&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git-用-rebase-合併分支讓你的-git-history-更乾淨&#34;&gt;#&lt;/a&gt; [GIT] 用 rebase 合併分支，讓你的 Git history 更乾淨&lt;/h3&gt;
&lt;h4 id=&#34;你的-git-history-是雜亂無章的地下鐵路線圖還是一條筆直的康莊大道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#你的-git-history-是雜亂無章的地下鐵路線圖還是一條筆直的康莊大道&#34;&gt;#&lt;/a&gt; 你的 GIT History 是雜亂無章的地下鐵路線圖，還是一條筆直的康莊大道？&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;1*l_0AwXprRSt-RiA-WpjGqA.png&#34; alt=&#34;每次當看混亂的 git history 總會讓我聯想到左邊的圖&#34; /&gt;&lt;/p&gt;
&lt;p&gt;每次當看混亂的 git history 總會讓我聯想到左邊的圖&lt;/p&gt;
&lt;p&gt;在工作中 GIT 應該已經是不可或缺的工具了。它為團隊的共同協作帶來極大的方便性，並且其版本控制的特性，使得專案的更迭變得更加安全穩固。&lt;/p&gt;
&lt;p&gt;我想大部分的人應該都對於 GIT 並不陌生了，  &lt;code&gt;git merge&lt;/code&gt;  可能更是很多人每天都在使用的指令之一。&lt;/p&gt;
&lt;p&gt;然而，你知道 GIT 還有一個指令叫做  &lt;code&gt;git rebase&lt;/code&gt;  嗎？我們不僅可以使用  &lt;code&gt;git rebase&lt;/code&gt;  合併分支，甚至可以用它來整理 branch，讓我們的 git history 變得更加乾淨。&lt;/p&gt;
&lt;h4 id=&#34;使用-merge-合併分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-merge-合併分支&#34;&gt;#&lt;/a&gt; &lt;strong&gt;使用 Merge 合併分支&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;假設我們今天有一個 git history graph 長成以下這樣。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*UybAbYx6WrBrcC1S5vqZfQ.png&#34; alt=&#34;git history graph&#34; /&gt;&lt;/p&gt;
&lt;p&gt;git history graph&lt;/p&gt;
&lt;p&gt;使用 merge 合併分支的話，我們知道，會產生一個「新的 commit」來接合兩個 commit，類似如下這樣的結果。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*cVxaTmuY37VAmnsXbTwNrw.png&#34; alt=&#34;從 master 對 branch_1 與 branch_2 進行合併&#34; /&gt;&lt;/p&gt;
&lt;p&gt;從 master 對 branch_1 與 branch_2 進行合併&lt;/p&gt;
&lt;p&gt;這看起來沒有什麼問題，但是隨著專案的迭代，branch 越開越多、commit 越加越多，我們可以預見 commit history 肯定會像上方右邊的圖一樣，儼然是個 &lt;strong&gt;大眾鐵路網&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;這時候，我們就可以利用  &lt;code&gt;git rebase&lt;/code&gt;  的特性來進行分支的合併，以此達到整理 git history 的功效。&lt;/p&gt;
&lt;h4 id=&#34;git-rebase&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git-rebase&#34;&gt;#&lt;/a&gt; git rebase&lt;/h4&gt;
&lt;p&gt;git rebase 的基礎指令格式如下&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git rebase &amp;lt;branch name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其功效會對分支的基準進行重新定義。&lt;/p&gt;
&lt;p&gt;例如：以上面 &lt;a href=&#34;#5a45&#34;&gt;git history graph&lt;/a&gt; 為例，若 &lt;strong&gt;我在 branch_1&lt;/strong&gt; 使用  &lt;code&gt;git rebase branch_2&lt;/code&gt;  ，則 &lt;strong&gt;會以 branch_2 作為基準，將 branch_1 接在 branch_2 上方&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*C8hxxOpdGqxZ-zUqtkg3kA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我們可以看看這個指令執行的訊息：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git rebase branch_2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;First, rewinding head to replay your work on top of it...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Applying: commit C in branch 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Using index info to reconstruct a base tree...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;M       main.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Falling back to patching base and 3-way merge...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Auto-merging main.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要注意的是，如果碰到 conflict，我們一樣要手動解 conflict，並且在解完之後，使用  &lt;code&gt;git rebase --continue&lt;/code&gt;  繼續執行剩下的 rebase。這邊與  &lt;code&gt;git merge&lt;/code&gt;  不同的另一點是，  &lt;code&gt;git merge&lt;/code&gt;  通常 conflict 一次就可以全部解完了；然而  &lt;code&gt;git rebase&lt;/code&gt;  是以  &lt;code&gt;commit&lt;/code&gt;  為單位，將  &lt;code&gt;commit&lt;/code&gt;  一個一個接到 branch ，因此可能會要重複解好幾次 confilct。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;從上方的圖示，我們可以發現  &lt;code&gt;git rebase&lt;/code&gt;  的結果跟 git merge 有很大的差異。感覺上  &lt;code&gt;git rebase&lt;/code&gt;  似乎是將 branch_1 的 commit 剪下、貼上到 branch_2。&lt;/p&gt;
&lt;p&gt;但其實並非如此。  &lt;code&gt;git rebase&lt;/code&gt;  真正做的事情是，將 branch_1 的 commit 以 branch_2 為基準，重新計算 SHA-1 的值、並且打包一個新的 commit 物件，接上 branch_2。因此，如果你仔細檢查，可以發現兩個 commit 的 hash key 已經不一樣了，所以，比較正確的敘述應該是「複製、貼上」。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*RNG46OBHZbikRif_JWuCWA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*MQ-xv-FbIWXJahsLDea-0g.png&#34; alt=&#34;git rebase 前後，hash key 已經不一樣了&#34; /&gt;&lt;/p&gt;
&lt;p&gt;git rebase 前後，hash key 已經不一樣了&lt;/p&gt;
&lt;h4 id=&#34;取消-git-rebase-的結果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#取消-git-rebase-的結果&#34;&gt;#&lt;/a&gt; 取消 git rebase 的結果&lt;/h4&gt;
&lt;p&gt;如果是一般的合併，我們只需要  &lt;code&gt;git reset HEAD^ —-hard&lt;/code&gt;  ，將 merge 的 commit reset 掉，就可以退回到合併前的狀態了。&lt;/p&gt;
&lt;p&gt;但是，在 git rebase 的結果，我們如果使用這行指令，卻只能拆掉最後一個 commit，無法回到 rebase 前的狀態。那該怎麼辦呢？&lt;/p&gt;
&lt;p&gt;其實，在 GIT 中有一個 pointer 叫做  &lt;code&gt;ORIG_HEAD&lt;/code&gt;  ，專門紀錄「危險操作」之前的 HEAD 位置。我們只要  &lt;code&gt;git reaset ORIG_HEAD --hard&lt;/code&gt;  就可以回復到原始、合併前的狀況了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*SDbO0L3bXRnjqdNVFJAdLQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*uVc-Sl91MlRsv3MClb42TA.png&#34; alt=&#34;使用 &#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;git reset ORIG_HEAD --hard 可以回復到合併前的狀態&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;講了這麼多， &lt;strong&gt;在實務上我們怎麼使用  &lt;code&gt;git rebase&lt;/code&gt;  ？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;實務上，我們大多時候希望將 branch 合併到 master 中，因此我們通常會在 branch 上以 master 為基準將目前的 branch commit 接到 master。&lt;/p&gt;
&lt;p&gt;所以，我們常常會直接使用&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// On any branch ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ git rebase master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上面的 git 為例子，我時常會將 &lt;strong&gt;branch_1&lt;/strong&gt; 、 &lt;strong&gt;branch_2&lt;/strong&gt; 對 &lt;strong&gt;master&lt;/strong&gt; 做  &lt;code&gt;git rebase master&lt;/code&gt;  以追蹤最新的 master，並且確保每個 branch 的 commit 都在 master 的 forward。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*TZIQciWYAHN_Sdhm7fcFpg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;之後再用 master 去 merge 這些已經在 forward 的 branch。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*L1UKhRZTNXtt2AHLCsrlQA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如此，就可以將整條 git history 整理成一條直線，看起來乾淨整齊。&lt;/p&gt;
&lt;p&gt;然而，隨著業務量越來越大、branch 越開越多，我們要手動對每個 branch 追蹤當前的 master 其實有點強人所難。&lt;/p&gt;
&lt;p&gt;因此很多人其實會選擇放爛一些 branch，等到要用時若有 conflict 再來解。&lt;/p&gt;
&lt;p&gt;不過若 branch 的歷史與 master 差異過大，很多時候要解 conflict 可能也不是這麼輕鬆。因此我自己還是傾向「 &lt;strong&gt;定時讓每個 branch 都追蹤 master 的變化&lt;/strong&gt; 」。&lt;/p&gt;
&lt;p&gt;可是這是一個吃力不討好的工作（要手動將每個 branch 都追蹤最新的 master 著實是一個苦工），因此我自己寫了一個 「  &lt;code&gt;rebase-master&lt;/code&gt;  」的小工具。只要在專案中使用  &lt;code&gt;rebase-master&lt;/code&gt;  就會自動將所有的 branch 追蹤最新的 master（也可以自訂只要某幾個 branch 進行更動或不更動）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/rebase-master&#34;&gt;&lt;img data-src=&#34;https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;rebase-進階用法git-rebase-onto&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rebase-進階用法git-rebase-onto&#34;&gt;#&lt;/a&gt;  &lt;code&gt;rebase 進階用法：git rebase --onto&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;在某些情況，我們可能希望將某 branch 的某幾段 commit 接到另一個 branch 中，這時我們就能夠使用  &lt;code&gt;git rebase --onto&lt;/code&gt;  來達成我們的目的。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git rebase --onto &amp;lt;target base-commit&amp;gt; &amp;lt;commit from&amp;gt; [&amp;lt;commit to&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase --onto&lt;/code&gt;  可以將自訂將  &lt;code&gt;&amp;lt;commit from&amp;gt;&lt;/code&gt;  開始的一連串 commit 嫁接到另一個 commit (  &lt;code&gt;&amp;lt;target base-commit&amp;gt;&lt;/code&gt;  ) 上面。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;target base-commit&amp;gt;&lt;/strong&gt; ： 做為基礎的 commit&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;commit from&amp;gt;&lt;/strong&gt; ：要嫁接 commit 的起始點 (不包含此 commit)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;commit to&amp;gt;&lt;/strong&gt; ：要嫁接 commit 的終點 (包含此 commit)，如果未給予，則預設為 branch 的最後一個 commit。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下圖為例&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Hk5KCcC-WzNVku731K7VWw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;目前有三個 branch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;master&lt;/strong&gt; ：7ce0378a、b9521564&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;branch_1&lt;/strong&gt; ：a28cb258、b1f1bba6、b73d414e&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;branch_2&lt;/strong&gt; ：074ad172、f90af89e、4c54470d&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我希望將 branch_2 的「Commit D in branch 2 (074ad172)」至 「commit D’ in branch 2 (f90af89e)」嫁接到 「commit C’ in branch 1 (b1f1bba6)」，則我可以使用這樣的指令&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git rebase --onto b1f1bba6 ddcbc256 f90af89e&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其結果如下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*ECOhYfjW8ztCI0inzMvQUA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我們可以發現，的確成功將 commit 接過去了。而原本的 branch 也還是在。&lt;/p&gt;
&lt;p&gt;另外，我們要注意的是，這樣的作法 git status 會存在於一個「非任何一個 branch 的狀態」。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*pjpYnYV6YCWQ6hu6eEeFUQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我們要自己給他一個「新的 branch name」。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*Mc0f6hpwvlGrRZihEn4lpg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1*0CbprtxSD9bGeD2XnVRiHA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;結論&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#結論&#34;&gt;#&lt;/a&gt; 結論&lt;/h4&gt;
&lt;p&gt;GIT 是一個在軟體開發中不可或缺的工具。許多人可能知道如何使用 GIT，通常使用到的那些指令就能完成 80% 的工作了。&lt;/p&gt;
&lt;p&gt;然而，若是能夠再更進階一點、多了解一點，未嘗也不是一個壞處。&lt;/p&gt;
&lt;h4 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRib29rLnR3L2NoYXB0ZXJzL2JyYW5jaC9tZXJnZS13aXRoLXJlYmFzZS5odG1s&#34;&gt;為你自己學 Git — 另一種合併方式 (使用 rebase)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLnlvcmt4aW4ub3JnLzIwMTEvMDcvMjkvZ2l0LXJlYmFzZS5odG1s&#34;&gt;Git-rebase 小筆記&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzNmMjk0YzUxODgyNTI1NDc0MjMyZWE=&#34;&gt;git rebase — onto 的奇妙用法&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://button.like.co/z20240z&#34;&gt;&lt;img data-src=&#34;https://button.like.co/images/og/likebutton.png&#34; alt=&#34;Like z20240z&#39;s work&#34; title=&#34;Like z20240z&#39;s work&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
